1a0:	endbr64 
1a4:	push   %rbp
1a5:	mov    %rsp,%rbp
1a8:	push   %r15
1aa:	push   %r14
1ac:	push   %r13
1ae:	push   %r12
1b0:	push   %rbx
1b1:	and    $0xfffffffffffffff0,%rsp
1b5:	sub    $0x250,%rsp
1bc:	mov    %r9,0x18(%rsp)
1c1:	mov    %r8,%r15
1c4:	mov    %ecx,%ebx
1c6:	mov    %edx,0x14(%rsp)
1ca:	mov    %rsi,0x20(%rsp)
1cf:	mov    %rdi,0x28(%rsp)
1d4:	mov    %fs:0x28,%rax
1dd:	mov    %rax,0x240(%rsp)
1e5:	mov    %gs:0x38a8,%r12
1ee:	lea    0x38b8(%r12),%r14
1f6:	lea    0x40(%rsp),%rsi
1fb:	mov    $0x1,%edi
200:	callq  3500 <ippsBigNumGetSize>
205:	mov    $0x2000,%r13d
20b:	test   %eax,%eax
20d:	jne    276 <rsa_verify_signature+0xd6>
20f:	mov    0x40(%rsp),%eax
213:	add    $0xffffffff,%eax
216:	cmp    $0x1fff,%eax
21b:	ja     276 <rsa_verify_signature+0xd6>
21d:	mov    $0x1,%edi
222:	mov    %r14,%rsi
225:	callq  3540 <ippsBigNumInit>
22a:	test   %eax,%eax
22c:	jne    276 <rsa_verify_signature+0xd6>
22e:	mov    %ebx,%eax
230:	shr    $0x8,%eax
233:	mov    %ebx,%ecx
235:	shr    $0x10,%ecx
238:	mov    %ebx,%edx
23a:	shr    $0x18,%edx
23d:	mov    %bl,0xc3(%rsp)
244:	mov    %al,0xc2(%rsp)
24b:	mov    %cl,0xc1(%rsp)
252:	mov    %dl,0xc0(%rsp)
259:	lea    0xc0(%rsp),%rdi
261:	mov    $0x4,%esi
266:	mov    %r14,%rdx
269:	callq  3800 <ippsSetOctString_BN>
26e:	test   %eax,%eax
270:	je     4ba <rsa_verify_signature+0x31a>
276:	xor    %eax,%eax
278:	mov    %rax,0x8(%rsp)
27d:	lea    0x40(%rsp),%rsi
282:	mov    $0x60,%edi
287:	callq  3500 <ippsBigNumGetSize>
28c:	mov    0x40(%rsp),%ecx
290:	cmp    %r13d,%ecx
293:	jg     312 <rsa_verify_signature+0x172>
299:	test   %eax,%eax
29b:	jne    312 <rsa_verify_signature+0x172>
29d:	test   %ecx,%ecx
29f:	jle    312 <rsa_verify_signature+0x172>
2a1:	mov    $0x60,%edi
2a6:	mov    %r14,%rsi
2a9:	callq  3540 <ippsBigNumInit>
2ae:	test   %eax,%eax
2b0:	jne    312 <rsa_verify_signature+0x172>
2b2:	add    $0x3,%r15
2b6:	mov    $0x180,%eax
2bb:	nopl   0x0(%rax,%rax,1)
2c0:	movzbl -0x3(%r15),%ecx
2c5:	mov    %cl,0xbf(%rsp,%rax,1)
2cc:	movzbl -0x2(%r15),%ecx
2d1:	mov    %cl,0xbe(%rsp,%rax,1)
2d8:	movzbl -0x1(%r15),%ecx
2dd:	mov    %cl,0xbd(%rsp,%rax,1)
2e4:	movzbl (%r15),%ecx
2e8:	mov    %cl,0xbc(%rsp,%rax,1)
2ef:	add    $0x4,%r15
2f3:	add    $0xfffffffffffffffc,%rax
2f7:	jne    2c0 <rsa_verify_signature+0x120>
2f9:	lea    0xc0(%rsp),%rdi
301:	mov    $0x180,%esi
306:	mov    %r14,%rdx
309:	callq  3800 <ippsSetOctString_BN>
30e:	test   %eax,%eax
310:	je     33f <rsa_verify_signature+0x19f>
312:	mov    $0xfffffffe,%ebx
317:	mov    %fs:0x28,%rax
320:	cmp    0x240(%rsp),%rax
328:	jne    4dd <rsa_verify_signature+0x33d>
32e:	mov    %ebx,%eax
330:	lea    -0x28(%rbp),%rsp
334:	pop    %rbx
335:	pop    %r12
337:	pop    %r13
339:	pop    %r14
33b:	pop    %r15
33d:	pop    %rbp
33e:	retq   
33f:	mov    $0xfffffffe,%ebx
344:	cmpq   $0x0,0x8(%rsp)
34a:	je     317 <rsa_verify_signature+0x177>
34c:	movslq 0x40(%rsp),%r15
351:	sub    %r15d,%r13d
354:	lea    0xc0(%rsp),%rdx
35c:	mov    $0xc00,%edi
361:	mov    $0x20,%esi
366:	callq  3e40 <ippsRSA_GetSizePublicKey>
36b:	mov    0xc0(%rsp),%ecx
372:	cmp    %r13d,%ecx
375:	jg     317 <rsa_verify_signature+0x177>
377:	test   %eax,%eax
379:	jne    317 <rsa_verify_signature+0x177>
37b:	test   %ecx,%ecx
37d:	jle    317 <rsa_verify_signature+0x177>
37f:	add    %r14,%r15
382:	mov    $0xc00,%edi
387:	mov    $0x20,%esi
38c:	mov    %r15,%rdx
38f:	callq  3ee0 <ippsRSA_InitPublicKey>
394:	test   %eax,%eax
396:	jne    317 <rsa_verify_signature+0x177>
39c:	mov    %r14,%rdi
39f:	mov    0x8(%rsp),%rsi
3a4:	mov    %r15,%rdx
3a7:	callq  4180 <ippsRSA_SetPublicKey>
3ac:	test   %eax,%eax
3ae:	jne    317 <rsa_verify_signature+0x177>
3b4:	test   %r15,%r15
3b7:	je     317 <rsa_verify_signature+0x177>
3bd:	movslq 0xc0(%rsp),%r14
3c5:	sub    %r14d,%r13d
3c8:	lea    0x3c(%rsp),%rdi
3cd:	mov    %r15,%rsi
3d0:	callq  3da0 <ippsRSA_GetBufferSizePublicKey>
3d5:	mov    0x3c(%rsp),%ecx
3d9:	cmp    %r13d,%ecx
3dc:	jg     317 <rsa_verify_signature+0x177>
3e2:	test   %eax,%eax
3e4:	jne    317 <rsa_verify_signature+0x177>
3ea:	test   %ecx,%ecx
3ec:	jle    317 <rsa_verify_signature+0x177>
3f2:	add    %r15,%r14
3f5:	mov    0x28(%rsp),%rdx
3fa:	add    $0x3,%rdx
3fe:	mov    $0x180,%eax
403:	movzbl -0x3(%rdx),%ecx
407:	mov    %cl,0xbf(%rsp,%rax,1)
40e:	movzbl -0x2(%rdx),%ecx
412:	mov    %cl,0xbe(%rsp,%rax,1)
419:	movzbl -0x1(%rdx),%ecx
41d:	mov    %cl,0xbd(%rsp,%rax,1)
424:	movzbl (%rdx),%ecx
427:	mov    %cl,0xbc(%rsp,%rax,1)
42e:	add    $0x4,%rdx
432:	add    $0xfffffffffffffffc,%rax
436:	jne    403 <rsa_verify_signature+0x263>
438:	lea    0x38(%rsp),%rdi
43d:	callq  3a80 <ippsHashMethodGetSize>
442:	mov    $0xfffffffe,%ebx
447:	test   %eax,%eax
449:	jne    317 <rsa_verify_signature+0x177>
44f:	cmpl   $0x80,0x38(%rsp)
457:	jg     317 <rsa_verify_signature+0x177>
45d:	lea    0x40(%rsp),%rdi
462:	callq  3aa0 <ippsHashMethodSet_SHA384>
467:	test   %eax,%eax
469:	jne    317 <rsa_verify_signature+0x177>
46f:	movl   $0x0,0x34(%rsp)
477:	mov    %r14,(%rsp)
47b:	lea    0xc0(%rsp),%rdx
483:	lea    0x34(%rsp),%rcx
488:	lea    0x40(%rsp),%r9
48d:	mov    0x20(%rsp),%rdi
492:	mov    0x14(%rsp),%esi
496:	mov    %r15,%r8
499:	callq  4500 <ippsRSAVerify_PKCS1v15_rmf>
49e:	mov    %eax,%ebx
4a0:	test   %eax,%eax
4a2:	jne    317 <rsa_verify_signature+0x177>
4a8:	cmpl   $0x0,0x34(%rsp)
4ad:	mov    0x18(%rsp),%rax
4b2:	setne  (%rax)
4b5:	jmpq   317 <rsa_verify_signature+0x177>
4ba:	mov    %r14,0x8(%rsp)
4bf:	movslq 0x40(%rsp),%rax
4c4:	lea    (%r12,%rax,1),%r14
4c8:	add    $0x38b8,%r14
4cf:	mov    $0x2000,%r13d
4d5:	sub    %eax,%r13d
4d8:	jmpq   27d <rsa_verify_signature+0xdd>
4dd:	callq  820 <__wrap___stack_chk_fail>
4e2:	nopw   %cs:0x0(%rax,%rax,1)
4ec:	nopl   0x0(%rax)
4f0:	endbr64 
4f4:	push   %rbp
4f5:	mov    %rsp,%rbp
4f8:	push   %r15
4fa:	push   %r14
4fc:	push   %r12
4fe:	push   %rbx
4ff:	and    $0xfffffffffffffff0,%rsp
503:	sub    $0xa0,%rsp
50a:	mov    %rdx,%r14
50d:	mov    %esi,%r15d
510:	mov    %rdi,%r12
513:	mov    %fs:0x28,%rax
51c:	mov    %rax,0x98(%rsp)
524:	lea    0xc(%rsp),%rdi
529:	callq  3a80 <ippsHashMethodGetSize>
52e:	mov    $0xfffffffe,%ebx
533:	test   %eax,%eax
535:	jne    564 <sha384_generate_hash+0x74>
537:	cmpl   $0x80,0xc(%rsp)
53f:	jg     564 <sha384_generate_hash+0x74>
541:	lea    0x10(%rsp),%rdi
546:	callq  3aa0 <ippsHashMethodSet_SHA384>
54b:	test   %eax,%eax
54d:	jne    564 <sha384_generate_hash+0x74>
54f:	lea    0x10(%rsp),%rcx
554:	mov    %r12,%rdi
557:	mov    %r15d,%esi
55a:	mov    %r14,%rdx
55d:	callq  39e0 <ippsHashMessage_rmf>
562:	mov    %eax,%ebx
564:	mov    %fs:0x28,%rax
56d:	cmp    0x98(%rsp),%rax
575:	jne    586 <sha384_generate_hash+0x96>
577:	mov    %ebx,%eax
579:	lea    -0x20(%rbp),%rsp
57d:	pop    %rbx
57e:	pop    %r12
580:	pop    %r14
582:	pop    %r15
584:	pop    %rbp
585:	retq   
586:	callq  820 <__wrap___stack_chk_fail>
58b:	nopl   0x0(%rax,%rax,1)
590:	endbr64 
594:	push   %rbp
595:	mov    %rsp,%rbp
598:	push   %r15
59a:	push   %r14
59c:	push   %r13
59e:	push   %r12
5a0:	push   %rbx
5a1:	and    $0xfffffffffffffff0,%rsp
5a5:	sub    $0x20,%rsp
5a9:	mov    %rdx,%r11
5ac:	mov    %rsi,%r8
5af:	mov    %rdi,%r9
5b2:	mov    %fs:0x28,%rax
5bb:	mov    %rax,0x10(%rsp)
5c0:	mov    $0x480,%ecx
5c5:	rdmsr  
5c7:	mov    %eax,%r12d
5ca:	mov    %edx,%r10d
5cd:	mov    $0x48d,%ecx
5d2:	rdmsr  
5d4:	mov    %eax,%r14d
5d7:	mov    $0x48e,%ecx
5dc:	rdmsr  
5de:	mov    %eax,%r15d
5e1:	mov    $0x48f,%ecx
5e6:	rdmsr  
5e8:	mov    %eax,%ebx
5ea:	mov    $0x490,%ecx
5ef:	rdmsr  
5f1:	mov    %eax,%r13d
5f4:	mov    $0x486,%ecx
5f9:	rdmsr  
5fb:	shl    $0x20,%rdx
5ff:	mov    %eax,%edi
601:	or     %rdx,%rdi
604:	mov    $0x487,%ecx
609:	rdmsr  
60b:	shl    $0x20,%rdx
60f:	mov    %eax,%esi
611:	or     %rdx,%rsi
614:	and    %rdi,%rsi
617:	mov    $0x488,%ecx
61c:	rdmsr  
61e:	shl    $0x20,%rdx
622:	mov    %eax,%edi
624:	or     %rdx,%rdi
627:	mov    $0x489,%ecx
62c:	rdmsr  
62e:	shl    $0x20,%rdx
632:	mov    %eax,%eax
634:	or     %rdx,%rax
637:	and    %rdi,%rax
63a:	movabs $0x1000000000000000,%rcx
644:	mov    %rcx,0x1d8(%r9)
64b:	mov    $0x80010031,%ecx
650:	or     %rsi,%rcx
653:	mov    %rcx,0x328(%r9)
65a:	mov    0xb8(%r8),%rcx
661:	mov    %rcx,0x330(%r9)
668:	or     $0xb526a8,%rax
66e:	mov    %rax,0x338(%r9)
675:	movl   $0x100008,0xc2(%r9)
680:	movl   $0x180018,0xc8(%r9)
68b:	movw   $0x20,0xcc(%r9)
695:	movabs $0x6060606060606,%rax
69f:	mov    %rax,0x310(%r9)
6a6:	movq   $0x15,0x458(%r9)
6b1:	movq   $0xd00,0x318(%r9)
6bc:	mov    $0x48f,%ecx
6c1:	rdmsr  
6c3:	or     $0x573c1204,%ebx
6c9:	and    %edx,%ebx
6cb:	mov    %ebx,0x15c(%r9)
6d2:	mov    $0x490,%ecx
6d7:	rdmsr  
6d9:	or     $0x7ee004,%r13d
6e0:	and    %edx,%r13d
6e3:	mov    %r13d,0x2b8(%r9)
6ea:	mov    %r14d,0x128(%r9)
6f1:	mov    %r15d,0x120(%r9)
6f8:	add    0x28(%r8),%r11
6fc:	mov    %r11,0x308(%r9)
703:	mov    0x18(%r8),%rax
707:	mov    %rax,0x350(%r9)
70e:	mov    0xd8(%r8),%rax
715:	mov    %rax,0x340(%r9)
71c:	mov    0xe0(%r8),%rax
723:	mov    %rax,0x348(%r9)
72a:	mov    0x80(%r8),%rdx
731:	mov    0xd0(%r8),%r11
738:	add    $0xfffffffffffffff8,%rdx
73c:	mov    0x60(%r8),%r14
740:	add    %rdx,%r14
743:	add    0x70(%r8),%rdx
747:	add    0x50(%r8),%r11
74b:	mov    %r14,0x300(%r9)
752:	mov    %rdx,0x460(%r9)
759:	mov    %r11,0x358(%r9)
760:	and    $0x7fffffff,%r12d
767:	mov    %r12d,(%r9)
76a:	cmpq   $0x2,0xc8(%r8)
772:	jb     7ed <setup_seam_vmcs+0x25d>
774:	and    $0x1fff,%r10d
77b:	lea    0x1000(%r9),%rax
782:	mov    $0x1,%ebx
787:	nopw   0x0(%rax,%rax,1)
790:	mov    %r10,%rcx
793:	mov    %r9,%rsi
796:	mov    %rax,%rdi
799:	rep movsb %ds:(%rsi),%es:(%rdi)
79b:	mov    %rsi,0x8(%rsp)
7a0:	mov    %rdi,(%rsp)
7a4:	mov    0x70(%r8),%rcx
7a8:	imul   %rbx,%rcx
7ac:	add    %r14,%rcx
7af:	mov    %rcx,0x300(%rax)
7b6:	mov    0x70(%r8),%rcx
7ba:	imul   %rbx,%rcx
7be:	add    %rdx,%rcx
7c1:	mov    %rcx,0x460(%rax)
7c8:	mov    0x38(%r8),%rcx
7cc:	imul   %rbx,%rcx
7d0:	add    %r11,%rcx
7d3:	mov    %rcx,0x358(%rax)
7da:	add    $0x1,%rbx
7de:	add    $0x1000,%rax
7e4:	cmp    0xc8(%r8),%rbx
7eb:	jb     790 <setup_seam_vmcs+0x200>
7ed:	mov    %fs:0x28,%rax
7f6:	cmp    0x10(%rsp),%rax
7fb:	jne    80c <setup_seam_vmcs+0x27c>
7fd:	lea    -0x28(%rbp),%rsp
801:	pop    %rbx
802:	pop    %r12
804:	pop    %r13
806:	pop    %r14
808:	pop    %r15
80a:	pop    %rbp
80b:	retq   
80c:	callq  820 <__wrap___stack_chk_fail>
811:	nopl   (%rax)
814:	nopw   %cs:0x0(%rax,%rax,1)
81e:	xchg   %ax,%ax
820:	endbr64 
824:	push   %rbp
825:	mov    %rsp,%rbp
828:	and    $0xfffffffffffffff0,%rsp
82c:	mov    $0xcf00,%edi
831:	xor    %esi,%esi
833:	callq  10e0 <pseamldr_report_error_and_halt>
838:	mov    %rbp,%rsp
83b:	pop    %rbp
83c:	retq   
83d:	nopl   (%rax)
840:	endbr64 
844:	push   %rbp
845:	mov    %rsp,%rbp
848:	push   %rbx
849:	and    $0xfffffffffffffff8,%rsp
84d:	mov    $0x4,%eax
852:	mov    $0x3,%ecx
857:	cpuid  
859:	mov    %eax,%ecx
85b:	shr    $0xe,%ecx
85e:	and    $0xfff,%ecx
864:	lea    0x1(%rcx),%eax
867:	test   %eax,%ecx
869:	je     87a <get_num_addressable_lps_on_socket+0x3a>
86b:	bsr    %rax,%rcx
86f:	add    $0x1,%cl
872:	mov    $0x1,%eax
877:	shl    %cl,%rax
87a:	lea    -0x8(%rbp),%rsp
87e:	pop    %rbx
87f:	pop    %rbp
880:	retq   
881:	nopw   %cs:0x0(%rax,%rax,1)
88b:	nopl   0x0(%rax,%rax,1)
890:	endbr64 
894:	push   %rbp
895:	mov    %rsp,%rbp
898:	push   %rbx
899:	and    $0xfffffffffffffff8,%rsp
89d:	mov    %rcx,%r10
8a0:	mov    %rdx,%r11
8a3:	mov    %esi,%ecx
8a5:	mov    %edi,%eax
8a7:	cpuid  
8a9:	mov    %eax,(%r11)
8ac:	mov    %ebx,(%r10)
8af:	mov    %ecx,(%r8)
8b2:	mov    %edx,(%r9)
8b5:	lea    -0x8(%rbp),%rsp
8b9:	pop    %rbx
8ba:	pop    %rbp
8bb:	retq   
8bc:	nopl   0x0(%rax)
8c0:	endbr64 
8c4:	push   %rbp
8c5:	mov    %rsp,%rbp
8c8:	push   %rbx
8c9:	and    $0xfffffffffffffff8,%rsp
8cd:	mov    $0x1f,%eax
8d2:	xor    %ecx,%ecx
8d4:	cpuid  
8d6:	mov    %edx,%eax
8d8:	lea    -0x8(%rbp),%rsp
8dc:	pop    %rbx
8dd:	pop    %rbp
8de:	retq   
8df:	nop
8e0:	endbr64 
8e4:	push   %rbp
8e5:	mov    %rsp,%rbp
8e8:	push   %r15
8ea:	push   %r14
8ec:	push   %rbx
8ed:	and    $0xfffffffffffffff0,%rsp
8f1:	sub    $0x10,%rsp
8f5:	mov    %rcx,%rbx
8f8:	mov    %edx,%r14d
8fb:	mov    %rdi,%r15
8fe:	cmp    %rcx,%rsi
901:	jae    912 <basic_memset+0x32>
903:	mov    $0xf002,%edi
908:	mov    $0x2,%esi
90d:	callq  10e0 <pseamldr_report_error_and_halt>
912:	mov    %rbx,%rcx
915:	mov    %r14d,%eax
918:	mov    %r15,%rdi
91b:	rep stos %al,%es:(%rdi)
91d:	lea    -0x18(%rbp),%rsp
921:	pop    %rbx
922:	pop    %r14
924:	pop    %r15
926:	pop    %rbp
927:	retq   
928:	nopl   0x0(%rax,%rax,1)
930:	endbr64 
934:	push   %rbp
935:	mov    %rsp,%rbp
938:	and    $0xfffffffffffffff8,%rsp
93c:	mov    %rsi,%rcx
93f:	xor    %eax,%eax
941:	rep stos %al,%es:(%rdi)
943:	mov    %rbp,%rsp
946:	pop    %rbp
947:	retq   
948:	nopl   0x0(%rax,%rax,1)
950:	endbr64 
954:	push   %rbp
955:	mov    %rsp,%rbp
958:	and    $0xfffffffffffffff8,%rsp
95c:	add    $0xffffffffffffffff,%rsi
960:	test   %rdi,%rsi
963:	jne    97f <shared_hpa_check_with_pwr_2_alignment+0x2f>
965:	mov    %gs:0x38a8,%rax
96e:	mov    0xb9(%rax),%cl
974:	mov    %rdi,%rdx
977:	shr    %cl,%rdx
97a:	test   %rdx,%rdx
97d:	je     986 <shared_hpa_check_with_pwr_2_alignment+0x36>
97f:	xor    %eax,%eax
981:	mov    %rbp,%rsp
984:	pop    %rbp
985:	retq   
986:	movabs $0xfffffffffffff,%rcx
990:	and    %rcx,%rdi
993:	mov    0xc1(%rax),%rdx
99a:	mov    0xd1(%rax),%rcx
9a1:	mov    %rcx,%rsi
9a4:	not    %rsi
9a7:	and    %rdi,%rsi
9aa:	cmp    %rdx,%rsi
9ad:	jb     9bb <shared_hpa_check_with_pwr_2_alignment+0x6b>
9af:	add    0xc9(%rax),%rdx
9b6:	cmp    %rsi,%rdx
9b9:	ja     97f <shared_hpa_check_with_pwr_2_alignment+0x2f>
9bb:	bsf    %rcx,%rcx
9bf:	and    0xd1(%rax),%rdi
9c6:	shr    %cl,%rdi
9c9:	movzwl %di,%ecx
9cc:	cmp    %rcx,0xd9(%rax)
9d3:	seta   %al
9d6:	jmp    981 <shared_hpa_check_with_pwr_2_alignment+0x31>
9d8:	nopl   0x0(%rax,%rax,1)
9e0:	endbr64 
9e4:	push   %rbp
9e5:	mov    %rsp,%rbp
9e8:	push   %r14
9ea:	push   %rbx
9eb:	and    $0xfffffffffffffff0,%rsp
9ef:	movabs $0x8000000000000000,%rax
9f9:	add    $0xffffffffffffffff,%rsi
9fd:	test   %rdi,%rsi
a00:	jne    a1f <check_and_map_aligned_shared_hpa+0x3f>
a02:	mov    %rcx,%r14
a05:	mov    %gs:0x38a8,%rsi
a0e:	mov    0xb9(%rsi),%cl
a14:	mov    %rdi,%rbx
a17:	shr    %cl,%rbx
a1a:	test   %rbx,%rbx
a1d:	je     a28 <check_and_map_aligned_shared_hpa+0x48>
a1f:	lea    -0x10(%rbp),%rsp
a23:	pop    %rbx
a24:	pop    %r14
a26:	pop    %rbp
a27:	retq   
a28:	movabs $0xfffffffffffff,%rcx
a32:	and    %rcx,%rdi
a35:	mov    0xc1(%rsi),%rcx
a3c:	mov    0xd1(%rsi),%r8
a43:	mov    %r8,%rbx
a46:	not    %rbx
a49:	and    %rdi,%rbx
a4c:	cmp    %rcx,%rbx
a4f:	jb     a5d <check_and_map_aligned_shared_hpa+0x7d>
a51:	add    0xc9(%rsi),%rcx
a58:	cmp    %rbx,%rcx
a5b:	ja     a1f <check_and_map_aligned_shared_hpa+0x3f>
a5d:	bsf    %r8,%rcx
a61:	mov    0xd1(%rsi),%rbx
a68:	and    %rdi,%rbx
a6b:	shr    %cl,%rbx
a6e:	movzwl %bx,%ecx
a71:	cmp    %rcx,0xd9(%rsi)
a78:	jbe    a1f <check_and_map_aligned_shared_hpa+0x3f>
a7a:	mov    %edx,%esi
a7c:	callq  1b10 <map_pa>
a81:	mov    %rax,(%r14)
a84:	xor    %eax,%eax
a86:	jmp    a1f <check_and_map_aligned_shared_hpa+0x3f>
a88:	nopl   0x0(%rax,%rax,1)
a90:	endbr64 
a94:	push   %rbp
a95:	mov    %rsp,%rbp
a98:	and    $0xfffffffffffffff8,%rsp
a9c:	cmp    %rsi,%rdi
a9f:	jae    aa5 <is_addr_in_range+0x15>
aa1:	xor    %eax,%eax
aa3:	jmp    aae <is_addr_in_range+0x1e>
aa5:	add    %rsi,%rdx
aa8:	cmp    %rdi,%rdx
aab:	seta   %al
aae:	mov    %rbp,%rsp
ab1:	pop    %rbp
ab2:	retq   
ab3:	nopw   %cs:0x0(%rax,%rax,1)
abd:	nopl   (%rax)
ac0:	endbr64 
ac4:	push   %rbp
ac5:	mov    %rsp,%rbp
ac8:	push   %r15
aca:	push   %r14
acc:	push   %rbx
acd:	and    $0xfffffffffffffff0,%rsp
ad1:	sub    $0x20,%rsp
ad5:	mov    %rdi,%r14
ad8:	mov    %fs:0x28,%rax
ae1:	mov    %rax,0x10(%rsp)
ae6:	mov    %gs:0x38a8,%r15
aef:	add    $0x1100,%r15
af6:	mov    %gs:0x38b0,%rbx
aff:	mov    0x818(%rbx),%rax
b06:	cmp    %r15,%rax
b09:	ja     b1b <seamextend_read+0x5b>
b0b:	mov    0x820(%rbx),%rcx
b12:	lea    (%rcx,%rax,1),%rdx
b16:	cmp    %r15,%rdx
b19:	ja     b38 <seamextend_read+0x78>
b1b:	mov    $0xf002,%edi
b20:	mov    $0x5,%esi
b25:	callq  10e0 <pseamldr_report_error_and_halt>
b2a:	mov    0x818(%rbx),%rax
b31:	mov    0x820(%rbx),%rcx
b38:	mov    %r15,%rdx
b3b:	sub    %rcx,%rdx
b3e:	sub    %rax,%rdx
b41:	add    0x30(%rbx),%rdx
b45:	add    0x38(%rbx),%rdx
b49:	sub    0x810(%rbx),%rdx
b50:	sub    0x830(%rbx),%rdx
b57:	add    $0xfffffffffffff000,%rdx
b5e:	mov    %edx,%eax
b60:	or     $0x1,%eax
b63:	shr    $0x20,%rdx
b67:	mov    $0x1402,%ecx
b6c:	wrmsr  
b6e:	mov    $0x88,%ecx
b73:	mov    %r15,%rsi
b76:	mov    %r14,%rdi
b79:	rep movsb %ds:(%rsi),%es:(%rdi)
b7b:	mov    %rsi,0x8(%rsp)
b80:	mov    %rdi,(%rsp)
b84:	mov    %fs:0x28,%rax
b8d:	cmp    0x10(%rsp),%rax
b92:	jne    b9f <seamextend_read+0xdf>
b94:	lea    -0x18(%rbp),%rsp
b98:	pop    %rbx
b99:	pop    %r14
b9b:	pop    %r15
b9d:	pop    %rbp
b9e:	retq   
b9f:	callq  820 <__wrap___stack_chk_fail>
ba4:	nopw   %cs:0x0(%rax,%rax,1)
bae:	xchg   %ax,%ax
bb0:	endbr64 
bb4:	push   %rbp
bb5:	mov    %rsp,%rbp
bb8:	push   %r14
bba:	push   %rbx
bbb:	and    $0xfffffffffffffff0,%rsp
bbf:	sub    $0x20,%rsp
bc3:	mov    %fs:0x28,%rax
bcc:	mov    %rax,0x18(%rsp)
bd1:	mov    %gs:0x38a8,%rbx
bda:	add    $0x1100,%rbx
be1:	mov    $0x88,%ecx
be6:	mov    %rdi,%rsi
be9:	mov    %rbx,%rdi
bec:	rep movsb %ds:(%rsi),%es:(%rdi)
bee:	mov    %rsi,0x10(%rsp)
bf3:	mov    %rdi,0x8(%rsp)
bf8:	mov    %gs:0x38b0,%r14
c01:	mov    0x818(%r14),%rax
c08:	cmp    %rbx,%rax
c0b:	ja     c1d <seamextend_write+0x6d>
c0d:	mov    0x820(%r14),%rcx
c14:	lea    (%rcx,%rax,1),%rdx
c18:	cmp    %rbx,%rdx
c1b:	ja     c3a <seamextend_write+0x8a>
c1d:	mov    $0xf002,%edi
c22:	mov    $0x5,%esi
c27:	callq  10e0 <pseamldr_report_error_and_halt>
c2c:	mov    0x818(%r14),%rax
c33:	mov    0x820(%r14),%rcx
c3a:	sub    %rcx,%rbx
c3d:	sub    %rax,%rbx
c40:	add    0x30(%r14),%rbx
c44:	add    0x38(%r14),%rbx
c48:	sub    0x810(%r14),%rbx
c4f:	sub    0x830(%r14),%rbx
c56:	add    $0xfffffffffffff000,%rbx
c5d:	mov    %rbx,%rdx
c60:	shr    $0x20,%rdx
c64:	mov    $0x1402,%ecx
c69:	mov    %ebx,%eax
c6b:	wrmsr  
c6d:	mov    %fs:0x28,%rax
c76:	cmp    0x18(%rsp),%rax
c7b:	jne    c86 <seamextend_write+0xd6>
c7d:	lea    -0x10(%rbp),%rsp
c81:	pop    %rbx
c82:	pop    %r14
c84:	pop    %rbp
c85:	retq   
c86:	callq  820 <__wrap___stack_chk_fail>
c8b:	nopl   0x0(%rax,%rax,1)
c90:	endbr64 
c94:	push   %rbp
c95:	mov    %rsp,%rbp
c98:	and    $0xfffffffffffffff0,%rsp
c9c:	sub    $0x10,%rsp
ca0:	mov    %fs:0x28,%rax
ca9:	mov    %rax,0x8(%rsp)
cae:	movb   $0x0,0x7(%rsp)
cb3:	test   %rdx,%rdx
cb6:	je     d10 <safe_memcmp+0x80>
cb8:	mov    %edx,%r8d
cbb:	and    $0x1,%r8d
cbf:	cmp    $0x1,%rdx
cc3:	jne    cce <safe_memcmp+0x3e>
cc5:	xor    %ecx,%ecx
cc7:	test   %r8,%r8
cca:	jne    d06 <safe_memcmp+0x76>
ccc:	jmp    d10 <safe_memcmp+0x80>
cce:	sub    %r8,%rdx
cd1:	xor    %ecx,%ecx
cd3:	nopw   %cs:0x0(%rax,%rax,1)
cdd:	nopl   (%rax)
ce0:	movzbl (%rdi,%rcx,1),%eax
ce4:	xor    (%rsi,%rcx,1),%al
ce7:	or     %al,0x7(%rsp)
ceb:	movzbl 0x1(%rdi,%rcx,1),%eax
cf0:	xor    0x1(%rsi,%rcx,1),%al
cf4:	or     %al,0x7(%rsp)
cf8:	add    $0x2,%rcx
cfc:	cmp    %rcx,%rdx
cff:	jne    ce0 <safe_memcmp+0x50>
d01:	test   %r8,%r8
d04:	je     d10 <safe_memcmp+0x80>
d06:	mov    (%rdi,%rcx,1),%al
d09:	xor    (%rsi,%rcx,1),%al
d0c:	or     %al,0x7(%rsp)
d10:	cmpb   $0x0,0x7(%rsp)
d15:	sete   %al
d18:	mov    %fs:0x28,%rcx
d21:	cmp    0x8(%rsp),%rcx
d26:	jne    d2d <safe_memcmp+0x9d>
d28:	mov    %rbp,%rsp
d2b:	pop    %rbp
d2c:	retq   
d2d:	callq  820 <__wrap___stack_chk_fail>
d32:	nopw   %cs:0x0(%rax,%rax,1)
d3c:	nopl   0x0(%rax)
d40:	endbr64 
d44:	push   %rbp
d45:	mov    %rsp,%rbp
d48:	push   %rbx
d49:	and    $0xfffffffffffffff0,%rsp
d4d:	sub    $0x50,%rsp
d51:	mov    %rdx,%rbx
d54:	mov    %fs:0x28,%rax
d5d:	mov    %rax,0x40(%rsp)
d62:	lea    0x10(%rsp),%rdx
d67:	callq  4f0 <sha384_generate_hash>
d6c:	test   %eax,%eax
d6e:	je     d75 <compute_and_verify_hash+0x35>
d70:	callq  1100 <pseamldr_arch_fatal_error>
d75:	movb   $0x0,0xf(%rsp)
d7a:	mov    $0x2,%eax
d7f:	nop
d80:	movzbl 0xe(%rsp,%rax,1),%ecx
d85:	xor    -0x2(%rbx,%rax,1),%cl
d89:	or     %cl,0xf(%rsp)
d8d:	movzbl 0xf(%rsp,%rax,1),%ecx
d92:	xor    -0x1(%rbx,%rax,1),%cl
d96:	or     %cl,0xf(%rsp)
d9a:	movzbl 0x10(%rsp,%rax,1),%ecx
d9f:	xor    (%rbx,%rax,1),%cl
da2:	or     %cl,0xf(%rsp)
da6:	add    $0x3,%rax
daa:	cmp    $0x32,%rax
dae:	jne    d80 <compute_and_verify_hash+0x40>
db0:	cmpb   $0x0,0xf(%rsp)
db5:	sete   %al
db8:	mov    %fs:0x28,%rcx
dc1:	cmp    0x40(%rsp),%rcx
dc6:	jne    dcf <compute_and_verify_hash+0x8f>
dc8:	lea    -0x8(%rbp),%rsp
dcc:	pop    %rbx
dcd:	pop    %rbp
dce:	retq   
dcf:	callq  820 <__wrap___stack_chk_fail>
dd4:	nopw   %cs:0x0(%rax,%rax,1)
dde:	xchg   %ax,%ax
de0:	endbr64 
de4:	push   %rbp
de5:	mov    %rsp,%rbp
de8:	and    $0xfffffffffffffff0,%rsp
dec:	sub    $0x20,%rsp
df0:	mov    %fs:0x28,%rax
df9:	mov    %rax,0x18(%rsp)
dfe:	movq   $0x0,0x10(%rsp)
e07:	mov    $0x681e,%eax
e0c:	vmread %rax,0x8(%rsp)
e11:	pushfq 
e12:	pop    %rax
e13:	test   $0x41,%al
e15:	je     e2e <advance_guest_rip+0x4e>
e17:	mov    $0xf006,%edi
e1c:	mov    $0x681e,%esi
e21:	callq  10e0 <pseamldr_report_error_and_halt>
e26:	cmpq   $0x0,0x10(%rsp)
e2c:	jne    e4d <advance_guest_rip+0x6d>
e2e:	mov    $0x440c,%eax
e33:	vmread %rax,0x10(%rsp)
e38:	pushfq 
e39:	pop    %rax
e3a:	test   $0x41,%al
e3c:	je     e4d <advance_guest_rip+0x6d>
e3e:	mov    $0xf006,%edi
e43:	mov    $0x440c,%esi
e48:	callq  10e0 <pseamldr_report_error_and_halt>
e4d:	mov    0x10(%rsp),%rax
e52:	add    0x8(%rsp),%rax
e57:	mov    $0x681e,%ecx
e5c:	vmwrite %rax,%rcx
e5f:	pushfq 
e60:	pop    %rax
e61:	test   $0x41,%al
e63:	je     e74 <advance_guest_rip+0x94>
e65:	mov    $0xf006,%edi
e6a:	mov    $0x681e,%esi
e6f:	callq  10e0 <pseamldr_report_error_and_halt>
e74:	mov    $0x4824,%eax
e79:	vmread %rax,0x10(%rsp)
e7e:	pushfq 
e7f:	pop    %rax
e80:	test   $0x41,%al
e82:	je     e93 <advance_guest_rip+0xb3>
e84:	mov    $0xf006,%edi
e89:	mov    $0x4824,%esi
e8e:	callq  10e0 <pseamldr_report_error_and_halt>
e93:	mov    0x10(%rsp),%eax
e97:	test   $0x3,%al
e99:	je     ec4 <advance_guest_rip+0xe4>
e9b:	and    $0xfffffffc,%eax
e9e:	mov    %eax,0x10(%rsp)
ea2:	mov    0x10(%rsp),%rax
ea7:	mov    $0x4824,%ecx
eac:	vmwrite %rax,%rcx
eaf:	pushfq 
eb0:	pop    %rax
eb1:	test   $0x41,%al
eb3:	je     ec4 <advance_guest_rip+0xe4>
eb5:	mov    $0xf006,%edi
eba:	mov    $0x4824,%esi
ebf:	callq  10e0 <pseamldr_report_error_and_halt>
ec4:	mov    $0x6820,%eax
ec9:	vmread %rax,0x10(%rsp)
ece:	pushfq 
ecf:	pop    %rax
ed0:	test   $0x41,%al
ed2:	je     ee3 <advance_guest_rip+0x103>
ed4:	mov    $0xf006,%edi
ed9:	mov    $0x6820,%esi
ede:	callq  10e0 <pseamldr_report_error_and_halt>
ee3:	mov    $0x2802,%eax
ee8:	vmread %rax,0x8(%rsp)
eed:	pushfq 
eee:	pop    %rax
eef:	test   $0x41,%al
ef1:	je     f02 <advance_guest_rip+0x122>
ef3:	mov    $0xf006,%edi
ef8:	mov    $0x2802,%esi
efd:	callq  10e0 <pseamldr_report_error_and_halt>
f02:	mov    $0x6822,%eax
f07:	vmread %rax,(%rsp)
f0b:	pushfq 
f0c:	pop    %rax
f0d:	test   $0x41,%al
f0f:	je     f20 <advance_guest_rip+0x140>
f11:	mov    $0xf006,%edi
f16:	mov    $0x6822,%esi
f1b:	callq  10e0 <pseamldr_report_error_and_halt>
f20:	testb  $0x1,0x11(%rsp)
f25:	jne    f2b <advance_guest_rip+0x14b>
f27:	xor    %eax,%eax
f29:	jmp    f39 <advance_guest_rip+0x159>
f2b:	mov    0x8(%rsp),%eax
f2f:	shl    $0xd,%eax
f32:	not    %eax
f34:	and    $0x4000,%eax
f39:	mov    $0xffffffffffffbfff,%rcx
f40:	and    (%rsp),%rcx
f44:	or     %rax,%rcx
f47:	mov    %rcx,(%rsp)
f4b:	mov    $0x6822,%eax
f50:	vmwrite %rcx,%rax
f53:	pushfq 
f54:	pop    %rax
f55:	test   $0x41,%al
f57:	je     f68 <advance_guest_rip+0x188>
f59:	mov    $0xf006,%edi
f5e:	mov    $0x6822,%esi
f63:	callq  10e0 <pseamldr_report_error_and_halt>
f68:	mov    %fs:0x28,%rax
f71:	cmp    0x18(%rsp),%rax
f76:	jne    f7d <advance_guest_rip+0x19d>
f78:	mov    %rbp,%rsp
f7b:	pop    %rbp
f7c:	retq   
f7d:	callq  820 <__wrap___stack_chk_fail>
f82:	nopw   %cs:0x0(%rax,%rax,1)
f8c:	nopl   0x0(%rax)
f90:	endbr64 
f94:	push   %rbp
f95:	mov    %rsp,%rbp
f98:	and    $0xfffffffffffffff8,%rsp
f9c:	mov    $0x1,%eax
fa1:	mov    %rbp,%rsp
fa4:	pop    %rbp
fa5:	retq   
fa6:	nopw   %cs:0x0(%rax,%rax,1)
fb0:	endbr64 
fb4:	push   %rbp
fb5:	mov    %rsp,%rbp
fb8:	push   %r15
fba:	push   %r14
fbc:	push   %r12
fbe:	push   %rbx
fbf:	and    $0xfffffffffffffff8,%rsp
fc3:	cmpb   $0x7f,(%rdi)
fc6:	jne    10c1 <relocate_elf_image+0x111>
fcc:	cmpb   $0x45,0x1(%rdi)
fd0:	jne    10c1 <relocate_elf_image+0x111>
fd6:	cmpb   $0x4c,0x2(%rdi)
fda:	jne    10c1 <relocate_elf_image+0x111>
fe0:	cmpb   $0x46,0x3(%rdi)
fe4:	jne    10c1 <relocate_elf_image+0x111>
fea:	cmpb   $0x2,0x4(%rdi)
fee:	jne    10c1 <relocate_elf_image+0x111>
ff4:	cmpb   $0x1,0x5(%rdi)
ff8:	jne    10c1 <relocate_elf_image+0x111>
ffe:	cmpb   $0x1,0x6(%rdi)
1002:	jne    10c1 <relocate_elf_image+0x111>
1008:	mov    $0x1,%cl
100a:	cmpw   $0x0,0x3c(%rdi)
100f:	je     10c3 <relocate_elf_image+0x113>
1015:	mov    %rdx,%r8
1018:	lea    -0x40(%rsi),%r9
101c:	lea    -0x18(%rsi),%r10
1020:	lea    -0x8(%rsi),%r11
1024:	xor    %r14d,%r14d
1027:	jmp    103a <relocate_elf_image+0x8a>
1029:	add    $0x1,%r14
102d:	movzwl 0x3c(%rdi),%eax
1031:	cmp    %rax,%r14
1034:	jae    10c3 <relocate_elf_image+0x113>
103a:	movzwl 0x3a(%rdi),%r15d
103f:	imul   %r14,%r15
1043:	add    0x28(%rdi),%r15
1047:	cmp    %r9,%r15
104a:	ja     10c1 <relocate_elf_image+0x111>
104c:	lfence 
104f:	cmpl   $0x4,0x4(%r15,%rdi,1)
1055:	jne    1029 <relocate_elf_image+0x79>
1057:	mov    0x38(%rdi,%r15,1),%rbx
105c:	test   %rbx,%rbx
105f:	je     10c1 <relocate_elf_image+0x111>
1061:	cmp    0x20(%rdi,%r15,1),%rbx
1066:	ja     1029 <relocate_elf_image+0x79>
1068:	xor    %r12d,%r12d
106b:	imul   %r12,%rbx
106f:	add    0x10(%rdi,%r15,1),%rbx
1074:	cmp    %r10,%rbx
1077:	ja     10c1 <relocate_elf_image+0x111>
1079:	lfence 
107c:	cmpq   $0x8,0x8(%rbx,%rdi,1)
1082:	jne    10c1 <relocate_elf_image+0x111>
1084:	cmp    %r11,(%rdi,%rbx,1)
1088:	ja     10c1 <relocate_elf_image+0x111>
108a:	cmp    %rsi,0x10(%rdi,%rbx,1)
108f:	jae    10c1 <relocate_elf_image+0x111>
1091:	lfence 
1094:	mov    0x10(%rdi,%rbx,1),%rax
1099:	add    %r8,%rax
109c:	mov    (%rdi,%rbx,1),%rdx
10a0:	mov    %rax,(%rdx,%rdi,1)
10a4:	add    $0x1,%r12
10a8:	mov    0x20(%rdi,%r15,1),%rax
10ad:	mov    0x38(%rdi,%r15,1),%rbx
10b2:	xor    %edx,%edx
10b4:	div    %rbx
10b7:	cmp    %rax,%r12
10ba:	jb     106b <relocate_elf_image+0xbb>
10bc:	jmpq   1029 <relocate_elf_image+0x79>
10c1:	xor    %ecx,%ecx
10c3:	mov    %ecx,%eax
10c5:	lea    -0x20(%rbp),%rsp
10c9:	pop    %rbx
10ca:	pop    %r12
10cc:	pop    %r14
10ce:	pop    %r15
10d0:	pop    %rbp
10d1:	retq   
10d2:	nopw   %cs:0x0(%rax,%rax,1)
10dc:	nopl   0x0(%rax)
10e0:	endbr64 
10e4:	push   %rbp
10e5:	mov    %rsp,%rbp
10e8:	and    $0xfffffffffffffff8,%rsp
10ec:	ud2    
10ee:	mov    %rbp,%rsp
10f1:	pop    %rbp
10f2:	retq   
10f3:	nopw   %cs:0x0(%rax,%rax,1)
10fd:	nopl   (%rax)
1100:	endbr64 
1104:	push   %rbp
1105:	mov    %rsp,%rbp
1108:	and    $0xfffffffffffffff8,%rsp
110c:	ud2    
110e:	mov    %rbp,%rsp
1111:	pop    %rbp
1112:	retq   
1113:	nopw   %cs:0x0(%rax,%rax,1)
111d:	nopl   (%rax)
1120:	endbr64 
1124:	push   %rbp
1125:	mov    %rsp,%rbp
1128:	push   %r15
112a:	push   %r14
112c:	push   %r13
112e:	push   %r12
1130:	push   %rbx
1131:	and    $0xfffffffffffffff0,%rsp
1135:	sub    $0x30,%rsp
1139:	mov    %rsi,%r12
113c:	mov    %rdi,0x8(%rsp)
1141:	mov    0x20(%rsi),%r14
1145:	mov    0x88(%rsi),%rax
114c:	lea    -0x1000(%rax),%rcx
1153:	mov    %rcx,0xb8(%rsi)
115a:	add    $0xffffffffffffe000,%rax
1160:	mov    %rax,0xc0(%rsi)
1167:	shr    $0xc,%r14
116b:	je     11b4 <seam_module_memory_map+0x94>
116d:	mov    0x28(%r12),%r15
1172:	mov    0x30(%r12),%rbx
1177:	nopw   0x0(%rax,%rax,1)
1180:	mov    $0x21,%ecx
1185:	mov    %r12,%rdi
1188:	mov    %rbx,%rsi
118b:	mov    %r15,%rdx
118e:	xor    %r8d,%r8d
1191:	callq  1470 <map_seam_range_page>
1196:	cmp    $0xffffffffffffffff,%rax
119a:	je     13a4 <seam_module_memory_map+0x284>
11a0:	add    $0x1000,%rbx
11a7:	add    $0x1000,%r15
11ae:	add    $0xffffffffffffffff,%r14
11b2:	jne    1180 <seam_module_memory_map+0x60>
11b4:	mov    0x48(%r12),%r14
11b9:	shr    $0xc,%r14
11bd:	je     1212 <seam_module_memory_map+0xf2>
11bf:	mov    0x50(%r12),%r15
11c4:	mov    0x58(%r12),%rbx
11c9:	movabs $0x8000000000010002,%rax
11d3:	lea    -0xff9f(%rax),%r13
11da:	nopw   0x0(%rax,%rax,1)
11e0:	mov    %r12,%rdi
11e3:	mov    %rbx,%rsi
11e6:	mov    %r15,%rdx
11e9:	mov    %r13,%rcx
11ec:	xor    %r8d,%r8d
11ef:	callq  1470 <map_seam_range_page>
11f4:	cmp    $0xffffffffffffffff,%rax
11f8:	je     13a4 <seam_module_memory_map+0x284>
11fe:	add    $0x1000,%rbx
1205:	add    $0x1000,%r15
120c:	add    $0xffffffffffffffff,%r14
1210:	jne    11e0 <seam_module_memory_map+0xc0>
1212:	cmpq   $0x0,0xc8(%r12)
121b:	je     1336 <seam_module_memory_map+0x216>
1221:	xor    %r13d,%r13d
1224:	movabs $0x8000000000010002,%rax
122e:	add    $0xffffffffffff005f,%rax
1234:	mov    %rax,0x10(%rsp)
1239:	mov    %r12,0x18(%rsp)
123e:	mov    0x70(%r12),%r15
1243:	imul   %r13,%r15
1247:	mov    0x88(%r12),%r14
124f:	add    %r15,%r14
1252:	mov    0x60(%r12),%rax
1257:	mov    %r12,%rcx
125a:	mov    %rax,%r12
125d:	add    0x80(%rcx),%r15
1264:	shr    $0xc,%r12
1268:	je     12d0 <seam_module_memory_map+0x1b0>
126a:	mov    %r13,0x20(%rsp)
126f:	mov    %r14,%r13
1272:	mov    %r15,%rbx
1275:	nopw   %cs:0x0(%rax,%rax,1)
127f:	nop
1280:	movabs $0x8000000000010002,%rax
128a:	lea    -0xff9f(%rax),%rcx
1291:	mov    0x18(%rsp),%rdi
1296:	mov    %r13,%rsi
1299:	mov    %rbx,%rdx
129c:	xor    %r8d,%r8d
129f:	callq  1470 <map_seam_range_page>
12a4:	cmp    $0xffffffffffffffff,%rax
12a8:	je     13a4 <seam_module_memory_map+0x284>
12ae:	add    $0x1000,%r13
12b5:	add    $0x1000,%rbx
12bc:	add    $0xffffffffffffffff,%r12
12c0:	jne    1280 <seam_module_memory_map+0x160>
12c2:	mov    0x18(%rsp),%rcx
12c7:	mov    0x60(%rcx),%rax
12cb:	mov    0x20(%rsp),%r13
12d0:	mov    0x68(%rcx),%rbx
12d4:	shr    $0xc,%rbx
12d8:	mov    %rcx,%r12
12db:	je     1324 <seam_module_memory_map+0x204>
12dd:	add    %rax,%r15
12e0:	add    %rax,%r14
12e3:	nopw   %cs:0x0(%rax,%rax,1)
12ed:	nopl   (%rax)
12f0:	mov    %r12,%rdi
12f3:	mov    %r14,%rsi
12f6:	mov    %r15,%rdx
12f9:	mov    0x10(%rsp),%rcx
12fe:	xor    %r8d,%r8d
1301:	callq  1470 <map_seam_range_page>
1306:	cmp    $0xffffffffffffffff,%rax
130a:	je     13a4 <seam_module_memory_map+0x284>
1310:	add    $0x1000,%r14
1317:	add    $0x1000,%r15
131e:	add    $0xffffffffffffffff,%rbx
1322:	jne    12f0 <seam_module_memory_map+0x1d0>
1324:	add    $0x1,%r13d
1328:	cmp    %r13,0xc8(%r12)
1330:	ja     123e <seam_module_memory_map+0x11e>
1336:	mov    0x8(%rsp),%rax
133b:	mov    0xc1(%rax),%rsi
1342:	mov    0x18(%r12),%rdx
1347:	movabs $0x8000000000010002,%r14
1351:	lea    -0xffe1(%r14),%rcx
1358:	mov    %r12,%rdi
135b:	xor    %r8d,%r8d
135e:	callq  1470 <map_seam_range_page>
1363:	cmp    $0xffffffffffffffff,%rax
1367:	je     13ae <seam_module_memory_map+0x28e>
1369:	cmpq   $0x1000,0x90(%r12)
1375:	jb     1458 <seam_module_memory_map+0x338>
137b:	mov    0x98(%r12),%r13
1383:	mov    0xa8(%r12),%rax
138b:	mov    %rax,0x8(%rsp)
1390:	movq   $0xffffffffffffffff,0x10(%rsp)
1399:	mov    $0x1,%r15d
139f:	xor    %r14d,%r14d
13a2:	jmp    13df <seam_module_memory_map+0x2bf>
13a4:	movabs $0x8000000000010002,%r14
13ae:	mov    %r14,%rax
13b1:	lea    -0x28(%rbp),%rsp
13b5:	pop    %rbx
13b6:	pop    %r12
13b8:	pop    %r13
13ba:	pop    %r14
13bc:	pop    %r15
13be:	pop    %rbp
13bf:	retq   
13c0:	add    $0x1000,%r13
13c7:	mov    %r15d,%eax
13ca:	mov    0x90(%r12),%rcx
13d2:	shr    $0xc,%rcx
13d6:	add    $0x1,%r15d
13da:	cmp    %rax,%rcx
13dd:	jbe    13ae <seam_module_memory_map+0x28e>
13df:	mov    %r12,%rdi
13e2:	xor    %esi,%esi
13e4:	mov    %r13,%rdx
13e7:	xor    %ecx,%ecx
13e9:	mov    $0x1,%r8d
13ef:	callq  1470 <map_seam_range_page>
13f4:	cmp    $0xffffffffffffffff,%rax
13f8:	je     1460 <seam_module_memory_map+0x340>
13fa:	mov    %rax,%rbx
13fd:	cmp    0x10(%rsp),%rax
1402:	je     13c0 <seam_module_memory_map+0x2a0>
1404:	mov    0xa0(%r12),%rax
140c:	add    0xa8(%r12),%rax
1414:	cmp    %rax,0x8(%rsp)
1419:	jae    1460 <seam_module_memory_map+0x340>
141b:	movabs $0x8000000000010002,%rax
1425:	lea    -0xff9b(%rax),%rcx
142c:	mov    %r12,%rdi
142f:	mov    %rbx,%rsi
1432:	mov    0x8(%rsp),%rdx
1437:	xor    %r8d,%r8d
143a:	callq  1470 <map_seam_range_page>
143f:	cmp    $0xffffffffffffffff,%rax
1443:	je     1460 <seam_module_memory_map+0x340>
1445:	addq   $0x1000,0x8(%rsp)
144e:	mov    %rbx,0x10(%rsp)
1453:	jmpq   13c0 <seam_module_memory_map+0x2a0>
1458:	xor    %r14d,%r14d
145b:	jmpq   13ae <seam_module_memory_map+0x28e>
1460:	callq  1100 <pseamldr_arch_fatal_error>
1465:	xor    %r14d,%r14d
1468:	jmpq   13ae <seam_module_memory_map+0x28e>
146d:	nopl   (%rax)
1470:	push   %rbp
1471:	mov    %rsp,%rbp
1474:	push   %r15
1476:	push   %r14
1478:	push   %rbx
1479:	and    $0xfffffffffffffff8,%rsp
147d:	mov    %gs:0x38b0,%rax
1486:	mov    0x858(%rax),%r9
148d:	mov    %gs:0x38a8,%rax
1496:	sub    0xc1(%rax),%r9
149d:	mov    0xb8(%rdi),%r10
14a4:	add    %r9,%r10
14a7:	mov    %rdx,%rbx
14aa:	shr    $0x27,%rbx
14ae:	and    $0x1ff,%ebx
14b4:	mov    (%r10,%rbx,8),%r14
14b8:	test   %r14,%r14
14bb:	jne    14f3 <map_seam_range_page+0x83>
14bd:	mov    0x48(%rdi),%r14
14c1:	mov    0xc0(%rdi),%r11
14c8:	add    0x58(%rdi),%r14
14cc:	mov    $0xffffffffffffffff,%rax
14d3:	cmp    %r14,%r11
14d6:	jb     15c8 <map_seam_range_page+0x158>
14dc:	or     $0x27,%r11
14e0:	mov    %r11,(%r10,%rbx,8)
14e4:	addq   $0xfffffffffffff000,0xc0(%rdi)
14ef:	mov    (%r10,%rbx,8),%r14
14f3:	movabs $0xffffffffff000,%r10
14fd:	and    %r10,%r14
1500:	add    %r9,%r14
1503:	mov    %rdx,%rbx
1506:	shr    $0x1e,%rbx
150a:	and    $0x1ff,%ebx
1510:	mov    (%r14,%rbx,8),%r11
1514:	test   %r11,%r11
1517:	jne    154f <map_seam_range_page+0xdf>
1519:	mov    0x48(%rdi),%r15
151d:	mov    0xc0(%rdi),%r11
1524:	add    0x58(%rdi),%r15
1528:	mov    $0xffffffffffffffff,%rax
152f:	cmp    %r15,%r11
1532:	jb     15c8 <map_seam_range_page+0x158>
1538:	or     $0x27,%r11
153c:	mov    %r11,(%r14,%rbx,8)
1540:	addq   $0xfffffffffffff000,0xc0(%rdi)
154b:	mov    (%r14,%rbx,8),%r11
154f:	and    %r10,%r11
1552:	add    %r9,%r11
1555:	mov    %edx,%ebx
1557:	shr    $0x15,%ebx
155a:	and    $0x1ff,%ebx
1560:	mov    (%r11,%rbx,8),%rax
1564:	test   %rax,%rax
1567:	jne    15b1 <map_seam_range_page+0x141>
1569:	mov    0x48(%rdi),%r15
156d:	mov    0xc0(%rdi),%r14
1574:	add    0x58(%rdi),%r15
1578:	mov    $0xffffffffffffffff,%rax
157f:	cmp    %r15,%r14
1582:	jb     15c8 <map_seam_range_page+0x158>
1584:	test   %r8b,%r8b
1587:	mov    $0x27,%r8d
158d:	movabs $0x8000000000000027,%rax
1597:	cmove  %r8,%rax
159b:	or     %rax,%r14
159e:	mov    %r14,(%r11,%rbx,8)
15a2:	addq   $0xfffffffffffff000,0xc0(%rdi)
15ad:	mov    (%r11,%rbx,8),%rax
15b1:	and    %r10,%rax
15b4:	shr    $0x9,%rdx
15b8:	add    %rax,%r9
15bb:	or     %rsi,%rcx
15be:	and    $0xff8,%edx
15c4:	mov    %rcx,(%rdx,%r9,1)
15c8:	lea    -0x18(%rbp),%rsp
15cc:	pop    %rbx
15cd:	pop    %r14
15cf:	pop    %r15
15d1:	pop    %rbp
15d2:	retq   
15d3:	nopw   %cs:0x0(%rax,%rax,1)
15dd:	nopl   (%rax)
15e0:	endbr64 
15e4:	push   %rbp
15e5:	mov    %rsp,%rbp
15e8:	and    $0xfffffffffffffff8,%rsp
15ec:	mov    %gs:0x38a8,%rax
15f5:	mov    %rax,%rcx
15f8:	add    $0x12af,%rcx
15ff:	xor    %edx,%edx
1601:	nopw   %cs:0x0(%rax,%rax,1)
160b:	nopl   0x0(%rax,%rax,1)
1610:	lea    -0x1(%rdx),%esi
1613:	mov    %si,-0x5(%rcx)
1617:	lea    0x1(%rdx),%rsi
161b:	mov    %si,-0x7(%rcx)
161f:	movl   $0xffff,-0x3(%rcx)
1626:	movq   $0x0,-0xf(%rcx)
162e:	movw   $0xffff,0x34a0(%rax,%rdx,2)
1638:	add    $0x11,%rcx
163c:	mov    %rsi,%rdx
163f:	cmp    $0x200,%rsi
1646:	jne    1610 <init_keyhole_state+0x30>
1648:	movw   $0xffff,0x12aa(%rax)
1651:	movw   $0xffff,0x3497(%rax)
165a:	movl   $0x1ff,0x38a0(%rax)
1664:	mov    %rbp,%rsp
1667:	pop    %rbp
1668:	retq   
1669:	nopl   0x0(%rax)
1670:	endbr64 
1674:	push   %rbp
1675:	mov    %rsp,%rbp
1678:	and    $0xfffffffffffffff0,%rsp
167c:	xor    %edx,%edx
167e:	callq  1690 <map_pa_with_memtype>
1683:	mov    %rbp,%rsp
1686:	pop    %rbp
1687:	retq   
1688:	nopl   0x0(%rax,%rax,1)
1690:	push   %rbp
1691:	mov    %rsp,%rbp
1694:	push   %r15
1696:	push   %r14
1698:	push   %r13
169a:	push   %r12
169c:	push   %rbx
169d:	and    $0xfffffffffffffff0,%rsp
16a1:	sub    $0x40,%rsp
16a5:	mov    %rdi,%r14
16a8:	mov    %gs:0x38a8,%rbx
16b1:	xor    %r10d,%r10d
16b4:	cmp    $0x1,%esi
16b7:	sete   %r13b
16bb:	mov    %rdi,%r15
16be:	and    $0xfffffffffffff000,%r15
16c5:	mov    %rdi,%rax
16c8:	shr    $0x20,%rax
16cc:	mov    %r14d,%ecx
16cf:	shr    $0x10,%ecx
16d2:	xor    %eax,%ecx
16d4:	mov    %rdi,%r12
16d7:	shr    $0x30,%r12
16db:	xor    %ecx,%r12d
16de:	and    $0x1ff,%r12d
16e5:	movzwl 0x34a0(%rbx,%r12,2),%eax
16ee:	cmp    $0xffff,%ax
16f2:	jne    1712 <map_pa_with_memtype+0x82>
16f4:	jmpq   17e0 <map_pa_with_memtype+0x150>
16f9:	nopl   0x0(%rax)
1700:	movzwl 0x12ac(%rbx,%rcx,1),%eax
1708:	cmp    $0xffff,%ax
170c:	je     17e0 <map_pa_with_memtype+0x150>
1712:	movzwl %ax,%eax
1715:	mov    %rax,%rcx
1718:	shl    $0x4,%rcx
171c:	add    %rax,%rcx
171f:	cmp    %r15,0x12a0(%rbx,%rcx,1)
1727:	jne    1700 <map_pa_with_memtype+0x70>
1729:	cmp    %r13b,0x12af(%rbx,%rcx,1)
1731:	jne    1700 <map_pa_with_memtype+0x70>
1733:	cmp    %dl,0x12b0(%rbx,%rcx,1)
173a:	jne    1700 <map_pa_with_memtype+0x70>
173c:	cmpb   $0x2,0x12ae(%rbx,%rcx,1)
1744:	jne    17b7 <map_pa_with_memtype+0x127>
1746:	movzwl 0x12a8(%rbx,%rcx,1),%esi
174e:	movzwl 0x12aa(%rbx,%rcx,1),%r8d
1757:	cmp    %ax,0x38a0(%rbx)
175e:	je     1ac9 <map_pa_with_memtype+0x439>
1764:	cmp    %ax,0x38a2(%rbx)
176b:	je     1ade <map_pa_with_memtype+0x44e>
1771:	cmp    $0xffff,%r8w
1776:	je     178e <map_pa_with_memtype+0xfe>
1778:	movzwl %r8w,%edx
177c:	mov    %rdx,%rdi
177f:	shl    $0x4,%rdi
1783:	add    %rdx,%rdi
1786:	mov    %si,0x12a8(%rbx,%rdi,1)
178e:	add    %rbx,%rcx
1791:	add    $0x12ae,%rcx
1798:	cmp    $0xffff,%si
179c:	je     17b4 <map_pa_with_memtype+0x124>
179e:	movzwl %si,%edx
17a1:	mov    %rdx,%rsi
17a4:	shl    $0x4,%rsi
17a8:	add    %rdx,%rsi
17ab:	mov    %r8w,0x12aa(%rbx,%rsi,1)
17b4:	movb   $0x1,(%rcx)
17b7:	lfence 
17ba:	mov    %gs:0x38b0,%rcx
17c3:	shl    $0xc,%rax
17c7:	add    0x838(%rcx),%rax
17ce:	and    $0xfff,%r14d
17d5:	or     %rax,%r14
17d8:	mov    %r14,%rax
17db:	jmpq   1aba <map_pa_with_memtype+0x42a>
17e0:	movzwl 0x38a2(%rbx),%ecx
17e7:	cmp    $0xffff,%rcx
17ee:	jne    1811 <map_pa_with_memtype+0x181>
17f0:	mov    $0xf005,%edi
17f5:	xor    %esi,%esi
17f7:	mov    %edx,0xc(%rsp)
17fb:	mov    %rcx,0x10(%rsp)
1800:	callq  10e0 <pseamldr_report_error_and_halt>
1805:	mov    0x10(%rsp),%rcx
180a:	xor    %r10d,%r10d
180d:	mov    0xc(%rsp),%edx
1811:	mov    %rcx,%r9
1814:	shl    $0x4,%r9
1818:	add    %rcx,%r9
181b:	mov    %gs:0x38b0,%rsi
1824:	mov    %rcx,%rax
1827:	shl    $0xc,%rax
182b:	mov    %rsi,0x30(%rsp)
1830:	add    0x838(%rsi),%rax
1837:	movzwl 0x12a8(%rbx,%r9,1),%esi
1840:	movzwl 0x12aa(%rbx,%r9,1),%r8d
1849:	cmp    %cx,0x38a0(%rbx)
1850:	je     1996 <map_pa_with_memtype+0x306>
1856:	cmp    %cx,0x38a2(%rbx)
185d:	je     19ab <map_pa_with_memtype+0x31b>
1863:	cmp    $0xffff,%r8w
1868:	je     1880 <map_pa_with_memtype+0x1f0>
186a:	movzwl %r8w,%r11d
186e:	mov    %r11,%rdi
1871:	shl    $0x4,%rdi
1875:	add    %r11,%rdi
1878:	mov    %si,0x12a8(%rbx,%rdi,1)
1880:	mov    %r14d,%edi
1883:	and    $0xfff,%edi
1889:	cmp    $0xffff,%si
188d:	je     18a6 <map_pa_with_memtype+0x216>
188f:	movzwl %si,%r11d
1893:	mov    %r11,%rsi
1896:	shl    $0x4,%rsi
189a:	add    %r11,%rsi
189d:	mov    %r8w,0x12aa(%rbx,%rsi,1)
18a6:	lea    (%rbx,%r9,1),%rsi
18aa:	add    $0x12a0,%rsi
18b1:	cmpb   $0x2,0x12ae(%rbx,%r9,1)
18ba:	jne    19c2 <map_pa_with_memtype+0x332>
18c0:	mov    %rdi,0x28(%rsp)
18c5:	mov    %rcx,0x10(%rsp)
18ca:	mov    %rsi,0x20(%rsp)
18cf:	mov    (%rsi),%rcx
18d2:	mov    %rcx,%rsi
18d5:	shr    $0x20,%rsi
18d9:	mov    %ecx,%edi
18db:	shr    $0x10,%edi
18de:	xor    %esi,%edi
18e0:	mov    %rcx,%r11
18e3:	shr    $0x30,%r11
18e7:	xor    %edi,%r11d
18ea:	and    $0x1ff,%r11d
18f1:	movzwl 0x34a0(%rbx,%r11,2),%edi
18fa:	cmp    $0xffff,%di
18fe:	je     19f8 <map_pa_with_memtype+0x368>
1904:	mov    %edx,0xc(%rsp)
1908:	mov    %r14,0x18(%rsp)
190d:	mov    0x12af(%rbx,%r9,1),%r8b
1915:	mov    0x12b0(%rbx,%r9,1),%dl
191d:	and    $0xfffffffffffff000,%rcx
1924:	mov    $0xffff,%r10w
1929:	jmp    1947 <map_pa_with_memtype+0x2b7>
192b:	nopl   0x0(%rax,%rax,1)
1930:	mov    %edi,%r10d
1933:	movzwl 0x12ac(%rbx,%rsi,1),%esi
193b:	mov    %esi,%edi
193d:	cmp    $0xffff,%si
1941:	je     19c7 <map_pa_with_memtype+0x337>
1947:	movzwl %di,%r14d
194b:	mov    %r14,%rsi
194e:	shl    $0x4,%rsi
1952:	add    %r14,%rsi
1955:	cmp    %rcx,0x12a0(%rbx,%rsi,1)
195d:	jne    1930 <map_pa_with_memtype+0x2a0>
195f:	cmp    %r8b,0x12af(%rbx,%rsi,1)
1967:	jne    1930 <map_pa_with_memtype+0x2a0>
1969:	cmp    %dl,0x12b0(%rbx,%rsi,1)
1970:	jne    1930 <map_pa_with_memtype+0x2a0>
1972:	lea    (%rbx,%rsi,1),%r8
1976:	add    $0x12ac,%r8
197d:	movzwl 0x12ac(%rbx,%rsi,1),%ecx
1985:	cmp    $0xffff,%r10w
198a:	je     1af5 <map_pa_with_memtype+0x465>
1990:	movzwl %r10w,%r14d
1994:	jmp    19d8 <map_pa_with_memtype+0x348>
1996:	mov    %r8w,0x38a0(%rbx)
199e:	cmp    %cx,0x38a2(%rbx)
19a5:	jne    1863 <map_pa_with_memtype+0x1d3>
19ab:	mov    %si,0x38a2(%rbx)
19b2:	cmp    $0xffff,%r8w
19b7:	jne    186a <map_pa_with_memtype+0x1da>
19bd:	jmpq   1880 <map_pa_with_memtype+0x1f0>
19c2:	xor    %r8d,%r8d
19c5:	jmp    1a2a <map_pa_with_memtype+0x39a>
19c7:	mov    %rbx,%r8
19ca:	add    $0x11129b,%r8
19d1:	movzwl 0x11129b(%rbx),%ecx
19d8:	mov    0xc(%rsp),%edx
19dc:	xor    %r10d,%r10d
19df:	mov    %r14,%rsi
19e2:	shl    $0x4,%rsi
19e6:	add    %r14,%rsi
19e9:	mov    %cx,0x12ac(%rbx,%rsi,1)
19f1:	mov    0x18(%rsp),%r14
19f6:	jmp    1a12 <map_pa_with_memtype+0x382>
19f8:	mov    %rbx,%r8
19fb:	add    $0x11129b,%r8
1a02:	movzwl 0x11129b(%rbx),%ecx
1a09:	mov    %cx,0x34a0(%rbx,%r11,2)
1a12:	mov    0x10(%rsp),%rcx
1a17:	mov    0x28(%rsp),%rdi
1a1c:	mov    0x20(%rsp),%rsi
1a21:	movw   $0xffff,(%r8)
1a27:	mov    $0x1,%r8b
1a2a:	movb   $0x1,0xe(%rsi)
1a2e:	mov    %r15,(%rsi)
1a31:	mov    %r13b,0x12af(%rbx,%r9,1)
1a39:	mov    %dl,0x12b0(%rbx,%r9,1)
1a41:	movzwl 0x34a0(%rbx,%r12,2),%esi
1a4a:	mov    %si,0x12ac(%rbx,%r9,1)
1a53:	mov    %cx,0x34a0(%rbx,%r12,2)
1a5c:	or     %rdi,%rax
1a5f:	movabs $0xffffffffff000,%rsi
1a69:	and    %rsi,%r14
1a6c:	mov    %r13b,%r10b
1a6f:	mov    %r13d,%ebx
1a72:	shl    $0x6,%bl
1a75:	movabs $0x8000000000000021,%rsi
1a7f:	test   %dl,%dl
1a81:	lea    0x98(%rsi),%rdi
1a88:	cmovne %rsi,%rdi
1a8c:	or     %r14,%rdi
1a8f:	lea    (%rdi,%r10,2),%rsi
1a93:	movzbl %bl,%edx
1a96:	or     %rdx,%rsi
1a99:	mov    0x30(%rsp),%rdx
1a9e:	mov    0x848(%rdx),%rdx
1aa5:	stac   
1aa8:	mov    %rsi,(%rdx,%rcx,8)
1aac:	clac   
1aaf:	test   %r8b,%r8b
1ab2:	je     1ab7 <map_pa_with_memtype+0x427>
1ab4:	invlpg (%rax)
1ab7:	lfence 
1aba:	lea    -0x28(%rbp),%rsp
1abe:	pop    %rbx
1abf:	pop    %r12
1ac1:	pop    %r13
1ac3:	pop    %r14
1ac5:	pop    %r15
1ac7:	pop    %rbp
1ac8:	retq   
1ac9:	mov    %r8w,0x38a0(%rbx)
1ad1:	cmp    %ax,0x38a2(%rbx)
1ad8:	jne    1771 <map_pa_with_memtype+0xe1>
1ade:	mov    %si,0x38a2(%rbx)
1ae5:	cmp    $0xffff,%r8w
1aea:	jne    1778 <map_pa_with_memtype+0xe8>
1af0:	jmpq   178e <map_pa_with_memtype+0xfe>
1af5:	mov    0x18(%rsp),%r14
1afa:	mov    0xc(%rsp),%edx
1afe:	xor    %r10d,%r10d
1b01:	jmpq   1a09 <map_pa_with_memtype+0x379>
1b06:	nopw   %cs:0x0(%rax,%rax,1)
1b10:	endbr64 
1b14:	push   %rbp
1b15:	mov    %rsp,%rbp
1b18:	and    $0xfffffffffffffff0,%rsp
1b1c:	mov    $0x1,%edx
1b21:	callq  1690 <map_pa_with_memtype>
1b26:	mov    %rbp,%rsp
1b29:	pop    %rbp
1b2a:	retq   
1b2b:	nopl   0x0(%rax,%rax,1)
1b30:	endbr64 
1b34:	push   %rbp
1b35:	mov    %rsp,%rbp
1b38:	and    $0xfffffffffffffff8,%rsp
1b3c:	mov    %gs:0x38a8,%rax
1b45:	mov    %gs:0x38b0,%rcx
1b4e:	sub    0x838(%rcx),%rdi
1b55:	shr    $0xc,%rdi
1b59:	movzwl %di,%ecx
1b5c:	cmp    $0x1ff,%ecx
1b62:	ja     1bd7 <free_la+0xa7>
1b64:	movzwl %di,%edx
1b67:	mov    %rdx,%rcx
1b6a:	shl    $0x4,%rcx
1b6e:	add    %rdx,%rcx
1b71:	mov    0x12ae(%rax,%rcx,1),%dl
1b78:	or     $0x2,%dl
1b7b:	cmp    $0x2,%dl
1b7e:	je     1bd7 <free_la+0xa7>
1b80:	lea    (%rax,%rcx,1),%rdx
1b84:	add    $0x12ae,%rdx
1b8b:	movb   $0x2,(%rdx)
1b8e:	movzwl 0x38a0(%rax),%r8d
1b96:	mov    %r8,%rsi
1b99:	shl    $0x4,%rsi
1b9d:	add    %r8,%rsi
1ba0:	cmp    $0xffff,%r8
1ba7:	lea    0x12a8(%rax,%rsi,1),%rsi
1baf:	lea    0x38a0(%rax),%rdx
1bb6:	cmove  %rdx,%rsi
1bba:	mov    %di,(%rsi)
1bbd:	mov    %r8w,0x12aa(%rax,%rcx,1)
1bc6:	movw   $0xffff,0x12a8(%rax,%rcx,1)
1bd0:	mov    %di,0x38a0(%rax)
1bd7:	mov    %rbp,%rsp
1bda:	pop    %rbp
1bdb:	retq   
1bdc:	nopl   0x0(%rax)
1be0:	endbr64 
1be4:	push   %rbp
1be5:	mov    %rsp,%rbp
1be8:	push   %rbx
1be9:	and    $0xfffffffffffffff0,%rsp
1bed:	sub    $0x20,%rsp
1bf1:	mov    %fs:0x28,%rax
1bfa:	mov    %rax,0x10(%rsp)
1bff:	rdgsbase %rbx
1c04:	cmpq   $0x0,0x38a8(%rbx)
1c0c:	je     1cd1 <pseamldr_dispatcher+0xf1>
1c12:	cmpq   $0x0,0x28(%rbx)
1c17:	je     1cef <pseamldr_dispatcher+0x10f>
1c1d:	cmpb   $0x0,0xb8(%rbx)
1c24:	je     1d3c <pseamldr_dispatcher+0x15c>
1c2a:	mov    0x30(%rbx),%rax
1c2e:	movabs $0x8000000000000001,%rcx
1c38:	cmp    %rcx,%rax
1c3b:	jg     1c5c <pseamldr_dispatcher+0x7c>
1c3d:	movabs $0x8000000000000000,%rdx
1c47:	cmp    %rdx,%rax
1c4a:	je     1c91 <pseamldr_dispatcher+0xb1>
1c4c:	cmp    %rcx,%rax
1c4f:	jne    1c85 <pseamldr_dispatcher+0xa5>
1c51:	mov    0x38(%rbx),%rdi
1c55:	callq  1f00 <seamldr_install>
1c5a:	jmp    1ca1 <pseamldr_dispatcher+0xc1>
1c5c:	movabs $0x8000000000000002,%rcx
1c66:	cmp    %rcx,%rax
1c69:	je     1c9c <pseamldr_dispatcher+0xbc>
1c6b:	movabs $0x8000000000000003,%rcx
1c75:	cmp    %rcx,%rax
1c78:	jne    1c85 <pseamldr_dispatcher+0xa5>
1c7a:	mov    0x38(%rbx),%rdi
1c7e:	callq  1e60 <seamldr_seaminfo>
1c83:	jmp    1ca1 <pseamldr_dispatcher+0xc1>
1c85:	movabs $0x8000000000000000,%rax
1c8f:	jmp    1ca1 <pseamldr_dispatcher+0xc1>
1c91:	mov    0x38(%rbx),%rdi
1c95:	callq  3220 <seamldr_info>
1c9a:	jmp    1ca1 <pseamldr_dispatcher+0xc1>
1c9c:	callq  3120 <seamldr_shutdown>
1ca1:	mov    %rax,0x30(%rbx)
1ca5:	callq  3364 <pseamldr_exit_point>
1caa:	mov    $0xf008,%edi
1caf:	xor    %esi,%esi
1cb1:	callq  10e0 <pseamldr_report_error_and_halt>
1cb6:	mov    %fs:0x28,%rax
1cbf:	cmp    0x10(%rsp),%rax
1cc4:	jne    1e1f <pseamldr_dispatcher+0x23f>
1cca:	lea    -0x8(%rbp),%rsp
1cce:	pop    %rbx
1ccf:	pop    %rbp
1cd0:	retq   
1cd1:	mov    %rbx,0x38a8(%rbx)
1cd8:	rdfsbase %rax
1cdd:	mov    %rax,0x38b0(%rbx)
1ce4:	cmpq   $0x0,0x28(%rbx)
1ce9:	jne    1c1d <pseamldr_dispatcher+0x3d>
1cef:	rdrand %rcx
1cf3:	pushfq 
1cf4:	pop    %rax
1cf5:	mov    %rcx,0x28(%rbx)
1cf9:	test   %rcx,%rcx
1cfc:	je     1e0a <pseamldr_dispatcher+0x22a>
1d02:	and    $0x1,%eax
1d05:	test   %rax,%rax
1d08:	je     1e0a <pseamldr_dispatcher+0x22a>
1d0e:	mov    $0x6c06,%eax
1d13:	vmwrite %rbx,%rax
1d16:	pushfq 
1d17:	pop    %rax
1d18:	test   $0x41,%al
1d1a:	je     1c1d <pseamldr_dispatcher+0x3d>
1d20:	mov    $0xf006,%edi
1d25:	mov    $0x6c06,%esi
1d2a:	callq  10e0 <pseamldr_report_error_and_halt>
1d2f:	cmpb   $0x0,0xb8(%rbx)
1d36:	jne    1c2a <pseamldr_dispatcher+0x4a>
1d3c:	lea    0xc(%rsp),%rdx
1d41:	lea    0x8(%rsp),%rcx
1d46:	lea    0x4(%rsp),%r8
1d4b:	mov    %rsp,%r9
1d4e:	mov    $0x80000008,%edi
1d53:	mov    $0x0,%esi
1d58:	callq  890 <ia32_safe_cpuid>
1d5d:	movzbl 0xc(%rsp),%eax
1d62:	mov    %rax,0xb9(%rbx)
1d69:	mov    $0x1400,%ecx
1d6e:	rdmsr  
1d70:	shl    $0x20,%rdx
1d74:	mov    %eax,%esi
1d76:	or     %rdx,%rsi
1d79:	movabs $0xffffffe000000,%rdi
1d83:	and    %rdi,%rsi
1d86:	mov    $0x1401,%ecx
1d8b:	rdmsr  
1d8d:	shl    $0x20,%rdx
1d91:	mov    %eax,%eax
1d93:	or     %rdx,%rax
1d96:	and    %rdi,%rax
1d99:	bsf    %rax,%rcx
1d9d:	mov    $0x1,%eax
1da2:	shl    %cl,%rax
1da5:	mov    %rsi,0xc1(%rbx)
1dac:	mov    %rax,0xc9(%rbx)
1db3:	mov    $0x87,%ecx
1db8:	rdmsr  
1dba:	add    $0x1,%eax
1dbd:	mov    %rax,0xd9(%rbx)
1dc4:	mov    $0x982,%ecx
1dc9:	rdmsr  
1dcb:	mov    0xb9(%rbx),%rax
1dd2:	and    $0xf,%edx
1dd5:	mov    %eax,%ecx
1dd7:	sub    %edx,%ecx
1dd9:	mov    $0xffffffffffffffff,%rdx
1de0:	shl    %cl,%rdx
1de3:	add    $0xff,%al
1de5:	mov    $0x2,%esi
1dea:	mov    %eax,%ecx
1dec:	shl    %cl,%rsi
1def:	add    %rdx,%rsi
1df2:	mov    %rsi,0xd1(%rbx)
1df9:	callq  15e0 <init_keyhole_state>
1dfe:	movb   $0x1,0xb8(%rbx)
1e05:	jmpq   1c2a <pseamldr_dispatcher+0x4a>
1e0a:	movabs $0x8000000000000000,%rax
1e14:	or     $0x10003,%rax
1e1a:	jmpq   1ca1 <pseamldr_dispatcher+0xc1>
1e1f:	callq  820 <__wrap___stack_chk_fail>
1e24:	nopw   %cs:0x0(%rax,%rax,1)
1e2e:	xchg   %ax,%ax
1e30:	endbr64 
1e34:	push   %rbp
1e35:	mov    %rsp,%rbp
1e38:	and    $0xfffffffffffffff0,%rsp
1e3c:	callq  3364 <pseamldr_exit_point>
1e41:	mov    $0xf008,%edi
1e46:	xor    %esi,%esi
1e48:	callq  10e0 <pseamldr_report_error_and_halt>
1e4d:	mov    %rbp,%rsp
1e50:	pop    %rbp
1e51:	retq   
1e52:	nopw   %cs:0x0(%rax,%rax,1)
1e5c:	nopl   0x0(%rax)
1e60:	endbr64 
1e64:	push   %rbp
1e65:	mov    %rsp,%rbp
1e68:	push   %rbx
1e69:	and    $0xfffffffffffffff0,%rsp
1e6d:	sub    $0x30,%rsp
1e71:	mov    %fs:0x28,%rax
1e7a:	mov    %rax,0x20(%rsp)
1e7f:	movq   $0x0,0x8(%rsp)
1e88:	lea    0x8(%rsp),%rcx
1e8d:	mov    $0x800,%esi
1e92:	mov    $0x1,%edx
1e97:	callq  9e0 <check_and_map_aligned_shared_hpa>
1e9c:	mov    %rax,%rbx
1e9f:	test   %rax,%rax
1ea2:	jne    1ec3 <seamldr_seaminfo+0x63>
1ea4:	mov    %gs:0x38b0,%rsi
1ead:	mov    0x8(%rsp),%rdi
1eb2:	mov    $0x800,%ecx
1eb7:	rep movsb %ds:(%rsi),%es:(%rdi)
1eb9:	mov    %rsi,0x18(%rsp)
1ebe:	mov    %rdi,0x10(%rsp)
1ec3:	mov    0x8(%rsp),%rdi
1ec8:	test   %rdi,%rdi
1ecb:	je     1ed2 <seamldr_seaminfo+0x72>
1ecd:	callq  1b30 <free_la>
1ed2:	mov    %fs:0x28,%rax
1edb:	cmp    0x20(%rsp),%rax
1ee0:	jne    1eec <seamldr_seaminfo+0x8c>
1ee2:	mov    %rbx,%rax
1ee5:	lea    -0x8(%rbp),%rsp
1ee9:	pop    %rbx
1eea:	pop    %rbp
1eeb:	retq   
1eec:	callq  820 <__wrap___stack_chk_fail>
1ef1:	nopw   %cs:0x0(%rax,%rax,1)
1efb:	nopl   0x0(%rax,%rax,1)
1f00:	endbr64 
1f04:	push   %rbp
1f05:	mov    %rsp,%rbp
1f08:	push   %r15
1f0a:	push   %r14
1f0c:	push   %r13
1f0e:	push   %r12
1f10:	push   %rbx
1f11:	and    $0xffffffffffffff00,%rsp
1f18:	sub    $0x1300,%rsp
1f1f:	mov    %rdi,%r14
1f22:	mov    %fs:0x28,%rax
1f2b:	mov    %rax,0x12c0(%rsp)
1f33:	movabs $0x8000000000020000,%r12
1f3d:	mov    %gs:0x38a8,%rbx
1f46:	mov    %gs:0x38b0,%r15
1f4f:	movq   $0x0,0x1e8(%rsp)
1f5b:	callq  8c0 <get_current_lpid>
1f60:	cmp    $0x3ff,%eax
1f65:	ja     2066 <seamldr_install+0x166>
1f6b:	lea    -0x1fffd(%r12),%r13
1f73:	cmpl   $0x0,0x128c(%rbx)
1f7a:	jne    2061 <seamldr_install+0x161>
1f80:	mov    %eax,%ecx
1f82:	mov    %r15,0xd8(%rsp)
1f8a:	mov    %eax,%r15d
1f8d:	mov    %r15,%rax
1f90:	shr    $0x3,%rax
1f94:	movzbl 0x1188(%rbx,%rax,1),%edx
1f9c:	and    $0x7,%cl
1f9f:	mov    $0x1,%esi
1fa4:	shl    %cl,%rsi
1fa7:	and    %esi,%edx
1fa9:	shr    %cl,%rdx
1fac:	or     %sil,0x1188(%rbx,%rax,1)
1fb4:	test   %rdx,%rdx
1fb7:	jne    2061 <seamldr_install+0x161>
1fbd:	mov    0x1208(%rbx),%eax
1fc3:	test   %eax,%eax
1fc5:	je     2089 <seamldr_install+0x189>
1fcb:	add    $0x1,%eax
1fce:	mov    %eax,0x1208(%rbx)
1fd4:	cmpb   $0x0,0x1298(%rbx)
1fdb:	je     2008 <seamldr_install+0x108>
1fdd:	mov    0xc1(%rbx),%rax
1fe4:	shl    $0xc,%r15
1fe8:	add    %r15,%rax
1feb:	add    $0x1000,%rax
1ff1:	mov    %rax,0x200(%rsp)
1ff9:	vmclear 0x200(%rsp)
2002:	mov    0x1208(%rbx),%eax
2008:	mov    0xd8(%rsp),%rcx
2010:	cmp    0x8(%rcx),%eax
2013:	jae    20cc <seamldr_install+0x1cc>
2019:	xor    %r15d,%r15d
201c:	xor    %r13d,%r13d
201f:	xor    %r14d,%r14d
2022:	mov    %r14,0x40(%rbx)
2026:	mov    0x1e8(%rsp),%rdi
202e:	test   %rdi,%rdi
2031:	jne    2075 <seamldr_install+0x175>
2033:	test   %r15,%r15
2036:	jne    207f <seamldr_install+0x17f>
2038:	mov    %fs:0x28,%rax
2041:	cmp    0x12c0(%rsp),%rax
2049:	jne    2601 <seamldr_install+0x701>
204f:	mov    %r13,%rax
2052:	lea    -0x28(%rbp),%rsp
2056:	pop    %rbx
2057:	pop    %r12
2059:	pop    %r13
205b:	pop    %r14
205d:	pop    %r15
205f:	pop    %rbp
2060:	retq   
2061:	xor    %r15d,%r15d
2064:	jmp    201f <seamldr_install+0x11f>
2066:	add    $0xffffffffffff0003,%r12
206d:	xor    %r15d,%r15d
2070:	mov    %r12,%r13
2073:	jmp    201f <seamldr_install+0x11f>
2075:	callq  1b30 <free_la>
207a:	test   %r15,%r15
207d:	je     2038 <seamldr_install+0x138>
207f:	mov    %r15,%rdi
2082:	callq  1b30 <free_la>
2087:	jmp    2038 <seamldr_install+0x138>
2089:	lea    0x1000(%rbx),%r13
2090:	mov    %r13,%rdi
2093:	callq  ac0 <seamextend_read>
2098:	mov    0x1080(%rbx),%al
209e:	mov    %al,0xc0(%rsp)
20a5:	movb   $0x0,0x1080(%rbx)
20ac:	mov    %r13,%rdi
20af:	callq  bb0 <seamextend_write>
20b4:	mov    0xc0(%rsp),%al
20bb:	mov    %al,0x1080(%rbx)
20c1:	mov    0x1208(%rbx),%eax
20c7:	jmpq   1fcb <seamldr_install+0xcb>
20cc:	mov    %rbx,0xc0(%rsp)
20d4:	add    $0x1188,%rbx
20db:	lea    0x1e8(%rsp),%rcx
20e3:	mov    $0x1000,%esi
20e8:	mov    %r14,%rdi
20eb:	xor    %edx,%edx
20ed:	callq  9e0 <check_and_map_aligned_shared_hpa>
20f2:	test   %rax,%rax
20f5:	jne    2427 <seamldr_install+0x527>
20fb:	mov    0x1e8(%rsp),%rsi
2103:	lea    0x200(%rsp),%rdi
210b:	mov    $0x1000,%ecx
2110:	rep movsb %ds:(%rsi),%es:(%rdi)
2112:	mov    %rsi,0xf0(%rsp)
211a:	mov    %rdi,0x1200(%rsp)
2122:	lea    -0x20000(%r12),%r13
212a:	cmpl   $0x0,0x200(%rsp)
2132:	jne    23fa <seamldr_install+0x4fa>
2138:	xor    %eax,%eax
213a:	mov    0xc0(%rsp),%r8
2142:	lea    0x8(%rax),%rcx
2146:	cmp    $0x69,%rcx
214a:	jae    2193 <seamldr_install+0x293>
214c:	cmpq   $0x0,0x210(%rsp,%rax,1)
2155:	mov    %rcx,%rax
2158:	je     2142 <seamldr_install+0x242>
215a:	xor    %r15d,%r15d
215d:	xor    %r14d,%r14d
2160:	mov    %r8,%rdi
2163:	add    $0x1000,%rdi
216a:	callq  bb0 <seamextend_write>
216f:	mov    $0x80,%esi
2174:	mov    %rbx,%rdi
2177:	callq  930 <basic_memset_to_zero>
217c:	mov    0xc0(%rsp),%rbx
2184:	movl   $0x0,0x1208(%rbx)
218e:	jmpq   2022 <seamldr_install+0x122>
2193:	cmp    $0x67,%rax
2197:	ja     21cf <seamldr_install+0x2cf>
2199:	add    $0x13,%rax
219d:	cmpb   $0x0,0x1fd(%rsp,%rax,1)
21a5:	jne    215a <seamldr_install+0x25a>
21a7:	cmpb   $0x0,0x1fe(%rsp,%rax,1)
21af:	jne    215a <seamldr_install+0x25a>
21b1:	cmpb   $0x0,0x1ff(%rsp,%rax,1)
21b9:	jne    215a <seamldr_install+0x25a>
21bb:	cmpb   $0x0,0x200(%rsp,%rax,1)
21c3:	jne    215a <seamldr_install+0x25a>
21c5:	add    $0x4,%rax
21c9:	cmp    $0x7b,%rax
21cd:	jne    219d <seamldr_install+0x29d>
21cf:	cmpl   $0x1,0x204(%rsp)
21d7:	ja     215a <seamldr_install+0x25a>
21d9:	cmpq   $0x1f0,0x278(%rsp)
21e5:	ja     23fa <seamldr_install+0x4fa>
21eb:	lfence 
21ee:	cmpq   $0x0,0x278(%rsp)
21f7:	je     222c <seamldr_install+0x32c>
21f9:	mov    $0x1,%r14d
21ff:	xor    %eax,%eax
2201:	mov    0x280(%rsp,%rax,8),%rdi
2209:	mov    $0x1000,%esi
220e:	callq  950 <shared_hpa_check_with_pwr_2_alignment>
2213:	test   %al,%al
2215:	je     23fa <seamldr_install+0x4fa>
221b:	mov    %r14d,%eax
221e:	add    $0x1,%r14d
2222:	cmp    %rax,0x278(%rsp)
222a:	ja     2201 <seamldr_install+0x301>
222c:	mov    0x208(%rsp),%rdi
2234:	mov    $0x1000,%esi
2239:	callq  950 <shared_hpa_check_with_pwr_2_alignment>
223e:	test   %al,%al
2240:	je     23fa <seamldr_install+0x4fa>
2246:	cmpl   $0x1,0x204(%rsp)
224e:	jne    2265 <seamldr_install+0x365>
2250:	mov    0xc0(%rsp),%rax
2258:	cmpb   $0x0,0x1080(%rax)
225f:	je     23fa <seamldr_install+0x4fa>
2265:	mov    0x208(%rsp),%rdi
226d:	xor    %r14d,%r14d
2270:	xor    %esi,%esi
2272:	callq  1b10 <map_pa>
2277:	mov    %rax,%rsi
227a:	mov    0xc0(%rsp),%r8
2282:	lea    0x800(%r8),%rax
2289:	mov    $0x800,%ecx
228e:	mov    %rsi,0xc8(%rsp)
2296:	mov    %rax,%rdi
2299:	rep movsb %ds:(%rsi),%es:(%rdi)
229b:	mov    %rsi,0xf0(%rsp)
22a3:	mov    %rdi,0x1200(%rsp)
22ab:	xor    %ecx,%ecx
22ad:	lea    0x8(%rcx),%rdx
22b1:	cmp    $0x59,%rdx
22b5:	jae    22d5 <seamldr_install+0x3d5>
22b7:	cmpq   $0x0,0x828(%r8,%rcx,1)
22c0:	mov    %rdx,%rcx
22c3:	je     22ad <seamldr_install+0x3ad>
22c5:	mov    %r12,%r13
22c8:	mov    0xc8(%rsp),%r15
22d0:	jmpq   2160 <seamldr_install+0x260>
22d5:	mov    %rbx,%r15
22d8:	cmp    $0x57,%rcx
22dc:	ja     2327 <seamldr_install+0x427>
22de:	xor    %r14d,%r14d
22e1:	cmpb   $0x0,0x828(%r8,%rcx,1)
22ea:	jne    240d <seamldr_install+0x50d>
22f0:	cmpb   $0x0,0x829(%r8,%rcx,1)
22f9:	jne    240d <seamldr_install+0x50d>
22ff:	cmpb   $0x0,0x82a(%r8,%rcx,1)
2308:	jne    240d <seamldr_install+0x50d>
230e:	cmpb   $0x0,0x82b(%r8,%rcx,1)
2317:	jne    240d <seamldr_install+0x50d>
231d:	add    $0x4,%rcx
2321:	cmp    $0x58,%rcx
2325:	jne    22e1 <seamldr_install+0x3e1>
2327:	cmpb   $0x0,0xbd2(%r8)
232f:	jne    23d5 <seamldr_install+0x4d5>
2335:	mov    0xc0(%rsp),%rcx
233d:	cmpb   $0x0,0xbd3(%rcx)
2344:	jne    23d5 <seamldr_install+0x4d5>
234a:	mov    0xc0(%rsp),%rcx
2352:	cmpb   $0x0,0xbd4(%rcx)
2359:	jne    23d5 <seamldr_install+0x4d5>
235b:	mov    0xc0(%rsp),%rcx
2363:	cmpb   $0x0,0xbd5(%rcx)
236a:	jne    23d5 <seamldr_install+0x4d5>
236c:	mov    0xc0(%rsp),%rcx
2374:	cmpb   $0x0,0xbd6(%rcx)
237b:	jne    23d5 <seamldr_install+0x4d5>
237d:	mov    0xc0(%rsp),%rcx
2385:	cmpb   $0x0,0xbd7(%rcx)
238c:	jne    23d5 <seamldr_install+0x4d5>
238e:	mov    0xc0(%rsp),%rcx
2396:	cmpb   $0x0,0xbdd(%rcx)
239d:	jne    23d5 <seamldr_install+0x4d5>
239f:	mov    0xc0(%rsp),%rcx
23a7:	cmpq   $0x0,0xbe8(%rcx)
23af:	jne    23d5 <seamldr_install+0x4d5>
23b1:	mov    0xc0(%rsp),%rcx
23b9:	cmpq   $0x0,0xbf0(%rcx)
23c1:	jne    23d5 <seamldr_install+0x4d5>
23c3:	mov    0xc0(%rsp),%rcx
23cb:	cmpq   $0x0,0xbf8(%rcx)
23d3:	je     243d <seamldr_install+0x53d>
23d5:	xor    %r14d,%r14d
23d8:	movabs $0x8000000000020000,%r13
23e2:	mov    %r15,%rbx
23e5:	mov    0xc8(%rsp),%r15
23ed:	mov    0xc0(%rsp),%r8
23f5:	jmpq   2160 <seamldr_install+0x260>
23fa:	xor    %r15d,%r15d
23fd:	xor    %r14d,%r14d
2400:	mov    0xc0(%rsp),%r8
2408:	jmpq   2160 <seamldr_install+0x260>
240d:	movabs $0x8000000000020000,%r13
2417:	mov    %r15,%rbx
241a:	mov    0xc8(%rsp),%r15
2422:	jmpq   2160 <seamldr_install+0x260>
2427:	mov    %rax,%r13
242a:	xor    %r14d,%r14d
242d:	xor    %r15d,%r15d
2430:	mov    0xc0(%rsp),%r8
2438:	jmpq   2160 <seamldr_install+0x260>
243d:	mov    $0x1,%cl
243f:	test   %cl,%cl
2441:	je     2599 <seamldr_install+0x699>
2447:	cmpl   $0x6,(%rax)
244a:	jne    23d5 <seamldr_install+0x4d5>
244c:	mov    0xc0(%rsp),%rax
2454:	cmpl   $0xe1,0x804(%rax)
245e:	jne    23d5 <seamldr_install+0x4d5>
2464:	mov    0xc0(%rsp),%rax
246c:	cmpl   $0x10000,0x808(%rax)
2476:	jne    23d5 <seamldr_install+0x4d5>
247c:	mov    0xc0(%rsp),%rax
2484:	cmpl   $0x60,0x81c(%rax)
248b:	jne    23d5 <seamldr_install+0x4d5>
2491:	mov    0xc0(%rsp),%rax
2499:	cmpl   $0x1,0x824(%rax)
24a0:	jne    23d5 <seamldr_install+0x4d5>
24a6:	mov    0xc0(%rsp),%rax
24ae:	cmpl   $0x60,0x820(%rax)
24b5:	jne    23d5 <seamldr_install+0x4d5>
24bb:	mov    0xc0(%rsp),%rax
24c3:	cmpl   $0x8086,0x810(%rax)
24cd:	jne    23d5 <seamldr_install+0x4d5>
24d3:	mov    0xc0(%rsp),%rax
24db:	testl  $0x7fffffff,0x80c(%rax)
24e5:	jne    23d5 <seamldr_install+0x4d5>
24eb:	mov    0xc0(%rsp),%rax
24f3:	cmpq   $0x0,0xbb6(%rax)
24fb:	jne    23d5 <seamldr_install+0x4d5>
2501:	mov    0xc0(%rsp),%rax
2509:	cmpl   $0x200,0x818(%rax)
2513:	jne    23d5 <seamldr_install+0x4d5>
2519:	mov    0xc0(%rsp),%rax
2521:	cmpl   $0xff,0xc00(%rax)
252b:	ja     23d5 <seamldr_install+0x4d5>
2531:	mov    0xc0(%rsp),%rax
2539:	cmpl   $0x10001,0xa00(%rax)
2543:	jne    23d5 <seamldr_install+0x4d5>
2549:	mov    0xc0(%rsp),%rcx
2551:	movzwl 0xbda(%rcx),%eax
2558:	cmp    0xbd8(%rcx),%ax
255f:	ja     23d5 <seamldr_install+0x4d5>
2565:	mov    0xc0(%rsp),%rax
256d:	mov    0xbe0(%rax),%eax
2573:	test   $0xfff,%eax
2578:	jne    23d5 <seamldr_install+0x4d5>
257e:	mov    0xc0(%rsp),%rcx
2586:	mov    0xbe4(%rcx),%ecx
258c:	test   %eax,%eax
258e:	je     2606 <seamldr_install+0x706>
2590:	test   %ecx,%ecx
2592:	jne    260e <seamldr_install+0x70e>
2594:	jmpq   23d5 <seamldr_install+0x4d5>
2599:	xor    %r14d,%r14d
259c:	xor    %ecx,%ecx
259e:	mov    0xc0(%rsp),%rdx
25a6:	cmpb   $0x0,0xc00(%rdx,%rcx,1)
25ae:	jne    23d8 <seamldr_install+0x4d8>
25b4:	mov    0xc0(%rsp),%rdx
25bc:	cmpb   $0x0,0xc01(%rdx,%rcx,1)
25c4:	jne    23d8 <seamldr_install+0x4d8>
25ca:	mov    0xc0(%rsp),%rdx
25d2:	cmpb   $0x0,0xc02(%rdx,%rcx,1)
25da:	jne    23d8 <seamldr_install+0x4d8>
25e0:	mov    0xc0(%rsp),%rdx
25e8:	cmpb   $0x0,0xc03(%rdx,%rcx,1)
25f0:	jne    23d8 <seamldr_install+0x4d8>
25f6:	add    $0x4,%rcx
25fa:	jne    259e <seamldr_install+0x69e>
25fc:	jmpq   2447 <seamldr_install+0x547>
2601:	callq  820 <__wrap___stack_chk_fail>
2606:	test   %ecx,%ecx
2608:	jne    23d5 <seamldr_install+0x4d5>
260e:	lfence 
2611:	mov    0xc0(%rsp),%rax
2619:	cmpl   $0x0,0x80c(%rax)
2620:	js     3079 <seamldr_install+0x1179>
2626:	cmpl   $0x1,0x204(%rsp)
262e:	jne    2664 <seamldr_install+0x764>
2630:	mov    0xc0(%rsp),%rcx
2638:	mov    0xbb5(%rcx),%al
263e:	cmp    0x1009(%rcx),%al
2644:	jne    300d <seamldr_install+0x110d>
264a:	mov    0xc0(%rsp),%rcx
2652:	mov    0xbb4(%rcx),%al
2658:	cmp    0x1008(%rcx),%al
265e:	jb     23d5 <seamldr_install+0x4d5>
2664:	mov    0x278(%rsp),%eax
266b:	shl    $0xc,%eax
266e:	mov    0xc0(%rsp),%rcx
2676:	mov    0xbe0(%rcx),%ecx
267c:	test   %rcx,%rcx
267f:	je     2691 <seamldr_install+0x791>
2681:	lea    -0x1000(%rax),%rdx
2688:	cmp    %rcx,%rdx
268b:	jb     23d5 <seamldr_install+0x4d5>
2691:	add    $0xfffffe00,%eax
2696:	mov    0xc0(%rsp),%rcx
269e:	cmp    %eax,0xbe4(%rcx)
26a4:	ja     23d5 <seamldr_install+0x4d5>
26aa:	mov    0xc0(%rsp),%rax
26b2:	mov    0xc00(%rax),%eax
26b8:	test   %rax,%rax
26bb:	je     270a <seamldr_install+0x80a>
26bd:	mov    0xd8(%rsp),%rcx
26c5:	mov    0xc(%rcx),%ecx
26c8:	test   %rcx,%rcx
26cb:	je     2723 <seamldr_install+0x823>
26cd:	xor    %edx,%edx
26cf:	mov    0xd8(%rsp),%rsi
26d7:	mov    0x10(%rsi,%rdx,4),%esi
26db:	xor    %edi,%edi
26dd:	mov    0xc0(%rsp),%rbx
26e5:	mov    0xc04(%rbx,%rdi,4),%ebx
26ec:	xor    %esi,%ebx
26ee:	cmp    $0xf,%ebx
26f1:	jbe    2701 <seamldr_install+0x801>
26f3:	add    $0x1,%rdi
26f7:	cmp    %rdi,%rax
26fa:	jne    26dd <seamldr_install+0x7dd>
26fc:	jmpq   2876 <seamldr_install+0x976>
2701:	add    $0x1,%rdx
2705:	cmp    %rcx,%rdx
2708:	jne    26cf <seamldr_install+0x7cf>
270a:	mov    0xc0(%rsp),%rcx
2712:	cmpl   $0x0,0x80c(%rcx)
2719:	js     2723 <seamldr_install+0x823>
271b:	test   %eax,%eax
271d:	je     23d5 <seamldr_install+0x4d5>
2723:	rdrand %rbx
2727:	pushfq 
2728:	pop    %rax
2729:	test   $0x1,%al
272b:	je     308d <seamldr_install+0x118d>
2731:	shl    $0x20,%rbx
2735:	movabs $0x7ffc00000000,%r14
273f:	and    %rbx,%r14
2742:	mov    0xc0(%rsp),%r12
274a:	cmpb   $0x0,0xbb5(%r12)
2753:	setne  0x1e0(%rsp)
275b:	callq  840 <get_num_addressable_lps_on_socket>
2760:	mov    0xd8(%rsp),%rdx
2768:	mov    0xc(%rdx),%ecx
276b:	imul   %rax,%rcx
276f:	mov    %rcx,0x1b8(%rsp)
2777:	mov    0x30(%rdx),%r11
277b:	mov    %r11,0xf0(%rsp)
2783:	movabs $0xffff8003ffff0000,%rax
278d:	or     %rbx,%rax
2790:	mov    %rax,0x108(%rsp)
2798:	movq   $0x1000,0xf8(%rsp)
27a4:	mov    %rcx,%rax
27a7:	shl    $0xc,%rax
27ab:	mov    %rax,%rdx
27ae:	mov    %rax,0xe0(%rsp)
27b6:	mov    %rax,0x100(%rsp)
27be:	mov    0x278(%rsp),%r10
27c6:	mov    %r10,%rax
27c9:	shl    $0xc,%rax
27cd:	mov    %rax,0x110(%rsp)
27d5:	movabs $0xffff800000000000,%r13
27df:	or     %r14,%r13
27e2:	mov    %r13,0x118(%rsp)
27ea:	lea    -0x200000(%r11),%rax
27f1:	mov    %rax,0x120(%rsp)
27f9:	movzbl 0xbc3(%r12),%esi
2802:	shl    $0xc,%rsi
2806:	add    $0x1000,%rsi
280d:	mov    %rsi,0x128(%rsp)
2815:	movzwl 0xbc6(%r12),%edi
281e:	shl    $0xc,%rdi
2822:	lea    0x1000(%rdi),%rdx
2829:	mov    %rdx,0x130(%rsp)
2831:	imul   %rcx,%rsi
2835:	lea    (%rdi,%rsi,1),%r8
2839:	add    $0x1000,%r8
2840:	mov    %r8,0x138(%rsp)
2848:	mov    0x1e0(%rsp),%dl
284f:	mov    %dl,0xd7(%rsp)
2856:	test   %dl,%dl
2858:	je     288f <seamldr_install+0x98f>
285a:	mov    0xc0(%rsp),%rdx
2862:	movzwl 0xbde(%rdx),%edi
2869:	shl    $0xc,%rdi
286d:	add    $0x1000,%rdi
2874:	jmp    2891 <seamldr_install+0x991>
2876:	movabs $0x8000000000020000,%r13
2880:	add    $0xffffffffffff0004,%r13
2887:	xor    %r14d,%r14d
288a:	jmpq   23e2 <seamldr_install+0x4e2>
288f:	xor    %edi,%edi
2891:	mov    %rdi,0x1c0(%rsp)
2899:	add    %rdi,%r8
289c:	mov    %r8,0x138(%rsp)
28a4:	movabs $0xffff800300000000,%rdx
28ae:	or     %rdx,%rbx
28b1:	mov    %rbx,0x140(%rsp)
28b9:	mov    0xc0(%rsp),%r12
28c1:	mov    0xc1(%r12),%rsi
28c9:	mov    0xe0(%rsp),%rdx
28d1:	mov    %rsi,0xe8(%rsp)
28d9:	add    %rsi,%rdx
28dc:	add    $0x1000,%rdx
28e3:	mov    %rdx,0x148(%rsp)
28eb:	movzbl 0xbc2(%r12),%r9d
28f4:	shl    $0xc,%r9
28f8:	lea    0x1000(%r9),%rdx
28ff:	mov    %rdx,0x150(%rsp)
2907:	movq   $0x1000,0x158(%rsp)
2913:	add    $0x2000,%r9
291a:	mov    %r9,0x160(%rsp)
2922:	imul   %rcx,%r9
2926:	mov    %r9,0x168(%rsp)
292e:	movabs $0xffff800100000000,%rdx
2938:	or     %r14,%rdx
293b:	mov    %rdx,0x170(%rsp)
2943:	sub    %r9,%rax
2946:	mov    %rax,0x178(%rsp)
294e:	movzwl 0xbc4(%r12),%edi
2957:	shl    $0xc,%rdi
295b:	add    $0x1000,%rdi
2962:	imul   %rcx,%rdi
2966:	mov    %rdi,0x180(%rsp)
296e:	movabs $0xffff800200000000,%rax
2978:	or     %r14,%rax
297b:	mov    %rax,0x188(%rsp)
2983:	mov    %rdi,%rax
2986:	shr    $0x9,%rax
298a:	lea    0xfff(%rax),%rcx
2991:	mov    %rcx,%rdx
2994:	and    $0xfffffffffffff000,%rdx
299b:	mov    %rdx,0x190(%rsp)
29a3:	movabs $0x100000000,%rdx
29ad:	or     %r14,%rdx
29b0:	mov    %rdx,0x198(%rsp)
29b8:	movabs $0xfffffffffffff,%rdx
29c2:	and    %r10,%rdx
29c5:	mov    %r10,%rsi
29c8:	shr    $0x6,%rsi
29cc:	movabs $0x3ffffffffff8,%rbx
29d6:	and    %rsi,%rbx
29d9:	shr    $0xf,%r10
29dd:	movabs $0x1ffffffff8,%rsi
29e7:	and    %r10,%rsi
29ea:	add    $0x1fff,%rbx
29f1:	and    $0xfffffffffffff000,%rbx
29f8:	lea    (%rbx,%rdx,8),%rdx
29fc:	add    $0xfff,%rdx
2a03:	mov    %r9,%rbx
2a06:	shr    $0x9,%rbx
2a0a:	and    $0xfffffffffffff000,%rdx
2a11:	add    %rsi,%rdx
2a14:	add    $0xfff,%rdx
2a1b:	mov    %r8,%rsi
2a1e:	shr    $0x15,%rsi
2a22:	or     $0xfff,%rdx
2a29:	lea    (%rdx,%rsi,8),%rdx
2a2d:	movabs $0x7fffffffffff000,%rsi
2a37:	and    %rdx,%rsi
2a3a:	mov    %r8,%rdx
2a3d:	shr    $0xc,%rdx
2a41:	lea    (%rsi,%rdx,8),%rdx
2a45:	add    $0xfff,%rdx
2a4c:	movabs $0xffffffffffff000,%rsi
2a56:	and    %rdx,%rsi
2a59:	mov    %r8,%rdx
2a5c:	shr    $0x1e,%rdx
2a60:	lea    (%rsi,%rdx,8),%rdx
2a64:	add    $0xfff,%rdx
2a6b:	mov    %r9,%rsi
2a6e:	shr    $0x12,%rsi
2a72:	and    $0xfffffffffffffff8,%rsi
2a76:	or     $0xfff,%rdx
2a7d:	add    %rbx,%rdx
2a80:	movabs $0x3ffffffffffff000,%rbx
2a8a:	and    %rdx,%rbx
2a8d:	mov    %r9,%rdx
2a90:	shr    $0x1b,%rdx
2a94:	and    $0xfffffffffffffff8,%rdx
2a98:	add    %rbx,%rsi
2a9b:	add    $0xfff,%rsi
2aa2:	movabs $0x8000000000020000,%rbx
2aac:	add    $0xfffffffffffdf000,%rbx
2ab3:	and    %rbx,%rsi
2ab6:	add    %rsi,%rdx
2ab9:	add    $0xfff,%rdx
2ac0:	and    %rbx,%rdx
2ac3:	add    %rdx,%rax
2ac6:	add    $0xfff,%rax
2acc:	mov    %rdi,%rdx
2acf:	shr    $0x12,%rdx
2ad3:	and    $0xfffffffffffffff8,%rdx
2ad7:	and    %rbx,%rax
2ada:	add    %rdx,%rax
2add:	add    $0xfff,%rax
2ae3:	shr    $0x1b,%rdi
2ae7:	and    $0xfffffffffffffff8,%rdi
2aeb:	and    %rbx,%rax
2aee:	add    %rdi,%rax
2af1:	add    $0xfff,%rax
2af7:	mov    %rcx,%rdx
2afa:	shr    $0x15,%rdx
2afe:	and    %rbx,%rax
2b01:	lea    (%rax,%rdx,8),%rax
2b05:	add    $0xfff,%rax
2b0b:	mov    %rcx,%rdx
2b0e:	shr    $0xc,%rdx
2b12:	and    %rbx,%rax
2b15:	lea    (%rax,%rdx,8),%rax
2b19:	add    $0xfff,%rax
2b1f:	shr    $0x1e,%rcx
2b23:	and    %rbx,%rax
2b26:	lea    (%rax,%rcx,8),%rax
2b2a:	add    $0x1fff,%rax
2b30:	and    %rbx,%rax
2b33:	mov    %rax,0x1a0(%rsp)
2b3b:	mov    0xbe0(%r12),%ecx
2b43:	test   %rcx,%rcx
2b46:	je     2b82 <seamldr_install+0xc82>
2b48:	mov    0xc0(%rsp),%rdx
2b50:	mov    0xbe4(%rdx),%edx
2b56:	test   %rdx,%rdx
2b59:	je     2b82 <seamldr_install+0xc82>
2b5b:	or     %r13,%rcx
2b5e:	mov    %rcx,0x1c8(%rsp)
2b66:	add    $0x800,%rcx
2b6d:	mov    %rcx,0x1d0(%rsp)
2b75:	or     %r13,%rdx
2b78:	mov    %rdx,0x1d8(%rsp)
2b80:	jmp    2b9a <seamldr_install+0xc9a>
2b82:	movq   $0x0,0x1c8(%rsp)
2b8e:	movq   $0x0,0x1d0(%rsp)
2b9a:	add    0xe0(%rsp),%r8
2ba2:	add    %r9,%r8
2ba5:	add    %r8,%rax
2ba8:	add    $0x201000,%rax
2bae:	sub    0xe8(%rsp),%r11
2bb6:	cmp    %rax,%r11
2bb9:	jae    2bd4 <seamldr_install+0xcd4>
2bbb:	movabs $0x8000000000020000,%r13
2bc5:	add    $0xffffffffffff0002,%r13
2bcc:	xor    %r14d,%r14d
2bcf:	jmpq   23e2 <seamldr_install+0x4e2>
2bd4:	cmpb   $0x0,0xd7(%rsp)
2bdc:	je     2c8c <seamldr_install+0xd8c>
2be2:	cmpl   $0x0,0x204(%rsp)
2bea:	je     2c8c <seamldr_install+0xd8c>
2bf0:	mov    0xc0(%rsp),%rax
2bf8:	cmpl   $0x0,0x129c(%rax)
2bff:	je     300d <seamldr_install+0x110d>
2c05:	mov    0xe0(%rsp),%rax
2c0d:	lea    0x1000(%rax),%rbx
2c14:	mov    0xd8(%rsp),%rax
2c1c:	mov    0x858(%rax),%rdi
2c23:	movabs $0x8000000000020000,%rax
2c2d:	lea    -0x1fffc(%rax),%r13
2c34:	cmpb   $0x0,(%rdi,%rbx,1)
2c38:	je     2c84 <seamldr_install+0xd84>
2c3a:	mov    0x4(%rdi,%rbx,1),%r14d
2c3f:	lea    0x8(%r14),%r12
2c43:	movzwl 0x86e(%rdi),%eax
2c4a:	shl    $0xc,%rax
2c4e:	add    $0x1000,%rax
2c54:	cmp    %rax,%r12
2c57:	ja     2c84 <seamldr_install+0xd84>
2c59:	movzwl 0x2(%rbx,%rdi,1),%eax
2c5e:	mov    0xc0(%rsp),%rcx
2c66:	cmp    0xbda(%rcx),%ax
2c6d:	jb     2c84 <seamldr_install+0xd84>
2c6f:	mov    0xc0(%rsp),%rcx
2c77:	cmp    0xbd8(%rcx),%ax
2c7e:	jbe    3026 <seamldr_install+0x1126>
2c84:	xor    %r14d,%r14d
2c87:	jmpq   23e2 <seamldr_install+0x4e2>
2c8c:	callq  f90 <get_num_of_remaining_updates>
2c91:	mov    0xc0(%rsp),%rcx
2c99:	mov    %eax,0x129c(%rcx)
2c9f:	mov    0xc0(%rsp),%rdi
2ca7:	movb   $0x1,0x1298(%rdi)
2cae:	lea    0xf0(%rsp),%rsi
2cb6:	callq  1120 <seam_module_memory_map>
2cbb:	test   %rax,%rax
2cbe:	jne    30a6 <seamldr_install+0x11a6>
2cc4:	mov    0xc0(%rsp),%rax
2ccc:	mov    0xc9(%rax),%r12
2cd3:	mov    0xd8(%rsp),%rax
2cdb:	add    0x858(%rax),%r12
2ce2:	sub    0x38(%rax),%r12
2ce6:	lea    -0x200000(%r12),%r13
2cee:	cmpq   $0x0,0x278(%rsp)
2cf7:	je     2d4f <seamldr_install+0xe4f>
2cf9:	xor    %ebx,%ebx
2cfb:	mov    %r13,%r14
2cfe:	mov    0x280(%rsp,%rbx,8),%rdi
2d06:	xor    %esi,%esi
2d08:	callq  1b10 <map_pa>
2d0d:	mov    $0x1000,%ecx
2d12:	mov    %rax,%rsi
2d15:	mov    %r14,%rdi
2d18:	rep movsb %ds:(%rsi),%es:(%rdi)
2d1a:	mov    %rsi,0x1200(%rsp)
2d22:	mov    %rdi,0x1f8(%rsp)
2d2a:	mov    %rax,%rdi
2d2d:	callq  1b30 <free_la>
2d32:	add    $0x1,%rbx
2d36:	mov    0x278(%rsp),%rsi
2d3e:	add    $0x1000,%r14
2d45:	cmp    %rsi,%rbx
2d48:	jb     2cfe <seamldr_install+0xdfe>
2d4a:	shl    $0xc,%esi
2d4d:	jmp    2d51 <seamldr_install+0xe51>
2d4f:	xor    %esi,%esi
2d51:	mov    0x118(%rsp),%rdx
2d59:	mov    %r13,%rdi
2d5c:	callq  fb0 <relocate_elf_image>
2d61:	test   %al,%al
2d63:	je     30ab <seamldr_install+0x11ab>
2d69:	mov    0xc0(%rsp),%rax
2d71:	mov    0xbe0(%rax),%ecx
2d77:	test   %ecx,%ecx
2d79:	je     2dda <seamldr_install+0xeda>
2d7b:	add    $0xffffffffffe00000,%r12
2d82:	xor    %eax,%eax
2d84:	mov    0x1d8(%rsp),%rdx
2d8c:	add    %rax,%rdx
2d8f:	mov    %ecx,%ecx
2d91:	lea    (%r12,%rax,1),%rsi
2d95:	mov    0x2(%rcx,%rsi,1),%edi
2d99:	shl    $0x10,%rdi
2d9d:	movzwl %dx,%ebx
2da0:	or     %rdi,%rbx
2da3:	mov    %edx,%edi
2da5:	and    $0xffff0000,%edi
2dab:	shl    $0x20,%rdi
2daf:	or     %rbx,%rdi
2db2:	shr    $0x20,%rdx
2db6:	mov    %edx,0x8(%rcx,%rsi,1)
2dba:	mov    %rdi,(%rcx,%rsi,1)
2dbe:	cmp    $0x1f0,%rax
2dc4:	je     2dda <seamldr_install+0xeda>
2dc6:	mov    0xc0(%rsp),%rcx
2dce:	mov    0xbe0(%rcx),%ecx
2dd4:	add    $0x10,%rax
2dd8:	jmp    2d84 <seamldr_install+0xe84>
2dda:	mov    0xd8(%rsp),%r12
2de2:	mov    0x858(%r12),%rax
2dea:	mov    $0x800,%ecx
2def:	mov    %r12,%rsi
2df2:	mov    %rax,%rdi
2df5:	rep movsb %ds:(%rsi),%es:(%rdi)
2df7:	mov    %rsi,0x1200(%rsp)
2dff:	mov    %rdi,0x1f8(%rsp)
2e07:	mov    0x118(%rsp),%rcx
2e0f:	mov    %rcx,0x808(%rax)
2e16:	mov    0x110(%rsp),%rcx
2e1e:	mov    %rcx,0x810(%rax)
2e25:	mov    0x140(%rsp),%rcx
2e2d:	mov    %rcx,0x818(%rax)
2e34:	mov    0x138(%rsp),%rcx
2e3c:	mov    %rcx,0x820(%rax)
2e43:	mov    0x170(%rsp),%rcx
2e4b:	mov    %rcx,0x828(%rax)
2e52:	mov    0x168(%rsp),%rcx
2e5a:	mov    %rcx,0x830(%rax)
2e61:	mov    0x188(%rsp),%rcx
2e69:	mov    %rcx,0x838(%rax)
2e70:	mov    0x180(%rsp),%rcx
2e78:	mov    %rcx,0x840(%rax)
2e7f:	mov    0x198(%rsp),%rcx
2e87:	mov    %rcx,0x848(%rax)
2e8e:	mov    0x190(%rsp),%rcx
2e96:	mov    %rcx,0x850(%rax)
2e9d:	mov    0x150(%rsp),%rcx
2ea5:	shr    $0xc,%rcx
2ea9:	add    $0xffffffffffffffff,%rcx
2ead:	mov    %rcx,0x858(%rax)
2eb4:	mov    0x128(%rsp),%rcx
2ebc:	shr    $0xc,%rcx
2ec0:	add    $0xffffffffffffffff,%rcx
2ec4:	mov    %rcx,0x860(%rax)
2ecb:	mov    $0x1000,%edi
2ed0:	add    0x858(%r12),%rdi
2ed8:	mov    0xc0(%rsp),%rbx
2ee0:	mov    0xbbe(%rbx),%edx
2ee6:	lea    0xf0(%rsp),%rsi
2eee:	callq  590 <setup_seam_vmcs>
2ef3:	lea    0x1000(%rbx),%rsi
2efa:	lea    0x1200(%rsp),%r14
2f02:	mov    $0x88,%ecx
2f07:	mov    %r14,%rdi
2f0a:	rep movsb %ds:(%rsi),%es:(%rdi)
2f0c:	mov    %rsi,0x1f8(%rsp)
2f14:	mov    %rdi,0x1f0(%rsp)
2f1c:	movzwl 0xbb4(%rbx),%eax
2f23:	mov    %ax,0x1208(%rsp)
2f2b:	lea    0x1218(%rsp),%rdi
2f33:	mov    %rbx,%rsi
2f36:	add    $0xb84,%rsi
2f3d:	mov    $0x30,%ecx
2f42:	rep movsb %ds:(%rsi),%es:(%rdi)
2f44:	mov    %rsi,0x1f8(%rsp)
2f4c:	mov    %rdi,0x1f0(%rsp)
2f54:	lea    0x1248(%rsp),%rdi
2f5c:	mov    $0x30,%esi
2f61:	callq  930 <basic_memset_to_zero>
2f66:	movq   $0x0,0x1278(%rsp)
2f72:	movb   $0x0,0x1280(%rsp)
2f7a:	movq   $0x1ff,0x1200(%rsp)
2f86:	mov    %r14,%rdi
2f89:	callq  bb0 <seamextend_write>
2f8e:	movb   $0x1,0x1280(%rsp)
2f96:	mov    %r14,%rdi
2f99:	callq  bb0 <seamextend_write>
2f9e:	mov    0x858(%r12),%rax
2fa6:	movzwl 0xbd8(%rbx),%ecx
2fad:	mov    %cx,0x868(%rax)
2fb4:	movzwl 0xbda(%rbx),%ecx
2fbb:	mov    %cx,0x86a(%rax)
2fc2:	mov    0xbdc(%rbx),%cl
2fc8:	mov    %cl,0x86c(%rax)
2fce:	movzwl 0xbde(%rbx),%ecx
2fd5:	mov    %cx,0x86e(%rax)
2fdc:	addl   $0xffffffff,0x129c(%rbx)
2fe3:	mov    $0x80,%esi
2fe8:	mov    %r15,%rdi
2feb:	callq  930 <basic_memset_to_zero>
2ff0:	movl   $0x0,0x1208(%rbx)
2ffa:	xor    %r13d,%r13d
2ffd:	xor    %r14d,%r14d
3000:	mov    0xc8(%rsp),%r15
3008:	jmpq   2022 <seamldr_install+0x122>
300d:	movabs $0x8000000000020000,%r13
3017:	add    $0xfffffffffffe0003,%r13
301e:	xor    %r14d,%r14d
3021:	jmpq   23e2 <seamldr_install+0x4e2>
3026:	mov    %rbx,%rsi
3029:	callq  930 <basic_memset_to_zero>
302e:	mov    0xf0(%rsp),%rsi
3036:	mov    0xe0(%rsp),%rax
303e:	add    %r14,%rax
3041:	sub    %rax,%rsi
3044:	mov    0xc0(%rsp),%rax
304c:	sub    0xc1(%rax),%rsi
3053:	add    $0xffffffffffffeff8,%rsi
305a:	add    %rbx,%r12
305d:	mov    0xd8(%rsp),%rax
3065:	add    0x858(%rax),%r12
306c:	mov    %r12,%rdi
306f:	callq  930 <basic_memset_to_zero>
3074:	jmpq   2c9f <seamldr_install+0xd9f>
3079:	mov    $0x503,%ecx
307e:	rdmsr  
3080:	test   $0x2,%al
3082:	je     23d5 <seamldr_install+0x4d5>
3088:	jmpq   2626 <seamldr_install+0x726>
308d:	movabs $0x8000000000020000,%r13
3097:	add    $0x10001,%r13
309e:	xor    %r14d,%r14d
30a1:	jmpq   23e2 <seamldr_install+0x4e2>
30a6:	mov    %rax,%r13
30a9:	jmp    30bc <seamldr_install+0x11bc>
30ab:	movabs $0x8000000000020000,%r13
30b5:	add    $0xfffffffffffe0000,%r13
30bc:	mov    0xc0(%rsp),%rbx
30c4:	movw   $0x0,0x1008(%rbx)
30cd:	lea    0x1018(%rbx),%rdi
30d4:	mov    $0x30,%esi
30d9:	callq  930 <basic_memset_to_zero>
30de:	lea    0x1048(%rbx),%rdi
30e5:	mov    $0x30,%esi
30ea:	callq  930 <basic_memset_to_zero>
30ef:	mov    %rbx,%r8
30f2:	movq   $0x0,0x1078(%rbx)
30fd:	movb   $0x0,0x1080(%rbx)
3104:	movq   $0x0,0x1000(%rbx)
310f:	mov    $0x1,%r14d
3115:	jmpq   2417 <seamldr_install+0x517>
311a:	nopw   0x0(%rax,%rax,1)
3120:	endbr64 
3124:	push   %rbp
3125:	mov    %rsp,%rbp
3128:	push   %r15
312a:	push   %r14
312c:	push   %r13
312e:	push   %r12
3130:	push   %rbx
3131:	and    $0xfffffffffffffff0,%rsp
3135:	sub    $0x10,%rsp
3139:	movabs $0x8000000000000003,%r14
3143:	mov    %gs:0x38a8,%rbx
314c:	mov    %gs:0x38b0,%r13
3155:	callq  8c0 <get_current_lpid>
315a:	cmp    $0x3ff,%eax
315f:	ja     31c1 <seamldr_shutdown+0xa1>
3161:	mov    %eax,%r15d
3164:	mov    %eax,%eax
3166:	shr    $0x3,%rax
316a:	movzbl 0x120c(%rbx,%rax,1),%edx
3172:	mov    %r15d,%ecx
3175:	and    $0x7,%cl
3178:	mov    $0x1,%esi
317d:	shl    %cl,%rsi
3180:	and    %esi,%edx
3182:	shr    %cl,%rdx
3185:	or     %sil,0x120c(%rbx,%rax,1)
318d:	mov    0x128c(%rbx),%eax
3193:	test   %rdx,%rdx
3196:	jne    31a1 <seamldr_shutdown+0x81>
3198:	add    $0x1,%eax
319b:	mov    %eax,0x128c(%rbx)
31a1:	cmp    $0x1,%eax
31a4:	je     31ca <seamldr_shutdown+0xaa>
31a6:	cmp    0x8(%r13),%eax
31aa:	jae    31f4 <seamldr_shutdown+0xd4>
31ac:	xor    %r14d,%r14d
31af:	mov    %r14,%rax
31b2:	lea    -0x28(%rbp),%rsp
31b6:	pop    %rbx
31b7:	pop    %r12
31b9:	pop    %r13
31bb:	pop    %r14
31bd:	pop    %r15
31bf:	pop    %rbp
31c0:	retq   
31c1:	or     $0x10000,%r14
31c8:	jmp    31af <seamldr_shutdown+0x8f>
31ca:	lea    0x1000(%rbx),%r12
31d1:	mov    %r12,%rdi
31d4:	callq  ac0 <seamextend_read>
31d9:	movb   $0x0,0x1080(%rbx)
31e0:	mov    %r12,%rdi
31e3:	callq  bb0 <seamextend_write>
31e8:	mov    0x128c(%rbx),%eax
31ee:	cmp    0x8(%r13),%eax
31f2:	jb     31ac <seamldr_shutdown+0x8c>
31f4:	cmp    0x860(%r13),%r15d
31fb:	jne    31af <seamldr_shutdown+0x8f>
31fd:	add    $0x1000,%rbx
3204:	mov    $0x88,%esi
3209:	mov    %rbx,%rdi
320c:	callq  930 <basic_memset_to_zero>
3211:	mov    %rbx,%rdi
3214:	callq  bb0 <seamextend_write>
3219:	jmp    31ac <seamldr_shutdown+0x8c>
321b:	nopl   0x0(%rax,%rax,1)
3220:	endbr64 
3224:	push   %rbp
3225:	mov    %rsp,%rbp
3228:	push   %r14
322a:	push   %rbx
322b:	and    $0xffffffffffffff00,%rsp
3232:	sub    $0x200,%rsp
3239:	mov    %fs:0x28,%rax
3242:	mov    %rax,0x1d8(%rsp)
324a:	movq   $0x0,0xe8(%rsp)
3256:	lea    0xe8(%rsp),%rcx
325e:	mov    $0x100,%esi
3263:	mov    $0x1,%edx
3268:	callq  9e0 <check_and_map_aligned_shared_hpa>
326d:	mov    %rax,%r14
3270:	test   %rax,%rax
3273:	jne    3343 <seamldr_info+0x123>
3279:	mov    0xe8(%rsp),%rdi
3281:	mov    $0x100,%esi
3286:	callq  930 <basic_memset_to_zero>
328b:	mov    0xe8(%rsp),%rax
3293:	movl   $0x0,(%rax)
3299:	movabs $0x134d87d00008086,%rcx
32a3:	mov    %rcx,0x8(%rax)
32a7:	movl   $0x0,0x10(%rax)
32ae:	movw   $0x1,0x14(%rax)
32b4:	mov    %gs:0x38b0,%rcx
32bd:	mov    0x860(%rcx),%ecx
32c3:	mov    %ecx,0x18(%rax)
32c6:	lea    0x100(%rsp),%rbx
32ce:	mov    %rbx,%rdi
32d1:	callq  ac0 <seamextend_read>
32d6:	mov    0xe8(%rsp),%rdi
32de:	add    $0x20,%rdi
32e2:	mov    $0x88,%ecx
32e7:	mov    %rbx,%rsi
32ea:	rep movsb %ds:(%rsi),%es:(%rdi)
32ec:	mov    %rsi,0xf8(%rsp)
32f4:	mov    %rdi,0xf0(%rsp)
32fc:	mov    %gs:0x38a8,%rbx
3305:	mov    0x129c(%rbx),%eax
330b:	test   %eax,%eax
330d:	je     3352 <seamldr_info+0x132>
330f:	mov    0xe8(%rsp),%rdi
3317:	mov    %eax,0x1c(%rdi)
331a:	test   %rdi,%rdi
331d:	je     3324 <seamldr_info+0x104>
331f:	callq  1b30 <free_la>
3324:	mov    %fs:0x28,%rax
332d:	cmp    0x1d8(%rsp),%rax
3335:	jne    335f <seamldr_info+0x13f>
3337:	mov    %r14,%rax
333a:	lea    -0x10(%rbp),%rsp
333e:	pop    %rbx
333f:	pop    %r14
3341:	pop    %rbp
3342:	retq   
3343:	mov    0xe8(%rsp),%rdi
334b:	test   %rdi,%rdi
334e:	jne    331f <seamldr_info+0xff>
3350:	jmp    3324 <seamldr_info+0x104>
3352:	callq  f90 <get_num_of_remaining_updates>
3357:	mov    %eax,0x129c(%rbx)
335d:	jmp    330f <seamldr_info+0xef>
335f:	callq  820 <__wrap___stack_chk_fail>
3364:	mov    %gs:0x30,%rax
336d:	mov    %gs:0x38,%rcx
3376:	mov    %gs:0x40,%rdx
337f:	mov    %gs:0x48,%rbx
3388:	mov    %gs:0x50,%rsp
3391:	mov    %gs:0x58,%rbp
339a:	mov    %gs:0x60,%rsi
33a3:	mov    %gs:0x68,%rdi
33ac:	mov    %gs:0x70,%r8
33b5:	mov    %gs:0x78,%r9
33be:	mov    %gs:0x80,%r10
33c7:	mov    %gs:0x88,%r11
33d0:	mov    %gs:0x90,%r12
33d9:	mov    %gs:0x98,%r13
33e2:	mov    %gs:0xa0,%r14
33eb:	mov    %gs:0xa8,%r15
33f4:	data16 (bad) 
33f7:	int    $0xf
33f9:	or     -0x70(%rsi),%esp
33fc:	mov    %rax,%gs:0x30
3405:	mov    %rcx,%gs:0x38
340e:	mov    %rdx,%gs:0x40
3417:	mov    %rbx,%gs:0x48
3420:	mov    %rsp,%gs:0x50
3429:	mov    %rbp,%gs:0x58
3432:	mov    %rsi,%gs:0x60
343b:	mov    %rdi,%gs:0x68
3444:	mov    %r8,%gs:0x70
344d:	mov    %r9,%gs:0x78
3456:	mov    %r10,%gs:0x80
345f:	mov    %r11,%gs:0x88
3468:	mov    %r12,%gs:0x90
3471:	mov    %r13,%gs:0x98
347a:	mov    %r14,%gs:0xa0
3483:	mov    %r15,%gs:0xa8
348c:	xor    %rax,%rax
348f:	xor    %rcx,%rcx
3492:	xor    %rdx,%rdx
3495:	xor    %rbx,%rbx
3498:	xor    %rbp,%rbp
349b:	xor    %rsi,%rsi
349e:	xor    %rdi,%rdi
34a1:	xor    %r8,%r8
34a4:	xor    %r9,%r9
34a7:	xor    %r10,%r10
34aa:	xor    %r11,%r11
34ad:	xor    %r12,%r12
34b0:	xor    %r13,%r13
34b3:	xor    %r14,%r14
34b6:	xor    %r15,%r15
34b9:	lfence 
34bc:	mov    $0x20,%rcx
34c3:	callq  34cb <pseamldr_entry_point+0xcf>
34c8:	lfence 
34cb:	jmp    34ce <pseamldr_entry_point+0xd2>
34cd:	nop
34ce:	jmp    34d1 <pseamldr_entry_point+0xd5>
34d0:	nop
34d1:	jmp    34d4 <pseamldr_entry_point+0xd8>
34d3:	nop
34d4:	jmp    34d7 <pseamldr_entry_point+0xdb>
34d6:	nop
34d7:	dec    %rcx
34da:	jne    34c3 <pseamldr_entry_point+0xc7>
34dc:	add    $0x100,%rsp
34e3:	lfence 
34e6:	callq  1be0 <pseamldr_dispatcher>
34eb:	ud2    
34ed:	nopw   %cs:0x0(%rax,%rax,1)
34f7:	nopw   0x0(%rax,%rax,1)
3500:	endbr64 
3504:	test   %rsi,%rsi
3507:	je     3533 <ippsBigNumGetSize+0x33>
3509:	lea    -0x1(%rdi),%ecx
350c:	mov    $0xfffffff1,%eax
3511:	cmp    $0x1ff,%ecx
3517:	ja     3532 <ippsBigNumGetSize+0x32>
3519:	mov    %edi,%eax
351b:	inc    %eax
351d:	shr    $0x1f,%eax
3520:	lea    0x1(%rdi,%rax,1),%eax
3524:	and    $0xfffffffe,%eax
3527:	lea    0x37(,%rax,8),%eax
352e:	mov    %eax,(%rsi)
3530:	xor    %eax,%eax
3532:	retq   
3533:	mov    $0xfffffff8,%eax
3538:	retq   
3539:	nopl   0x0(%rax)
3540:	endbr64 
3544:	lea    -0x1(%rdi),%ecx
3547:	mov    $0xfffffff1,%eax
354c:	cmp    $0x1ff,%ecx
3552:	ja     37ec <ippsBigNumInit+0x2ac>
3558:	test   %rsi,%rsi
355b:	je     35b7 <ippsBigNumInit+0x77>
355d:	push   %rbx
355e:	mov    %edi,%eax
3560:	inc    %eax
3562:	shr    $0x1f,%eax
3565:	lea    0x1(%rdi,%rax,1),%r11d
356a:	sar    %r11d
356d:	movabs $0x100000001,%rax
3577:	mov    %rax,0x4(%rsi)
357b:	mov    %r11d,0xc(%rsi)
357f:	lea    0x20(%rsi),%r9
3583:	neg    %r9d
3586:	and    $0x7,%r9d
358a:	lea    0x20(%rsi,%r9,1),%r10
358f:	mov    %r10,0x10(%rsi)
3593:	lea    0x0(,%r11,8),%eax
359b:	movslq %eax,%r8
359e:	lea    0x8(%r8,%r10,1),%rax
35a3:	mov    %rax,0x18(%rsi)
35a7:	inc    %r11d
35aa:	cmp    $0x3,%r11d
35ae:	ja     35bd <ippsBigNumInit+0x7d>
35b0:	xor    %eax,%eax
35b2:	jmpq   36b0 <ippsBigNumInit+0x170>
35b7:	mov    $0xfffffff8,%eax
35bc:	retq   
35bd:	mov    %r11d,%eax
35c0:	and    $0xfffffffc,%eax
35c3:	lea    -0x4(%rax),%rdx
35c7:	mov    %rdx,%rcx
35ca:	shr    $0x2,%rcx
35ce:	inc    %rcx
35d1:	mov    %ecx,%edi
35d3:	and    $0x7,%edi
35d6:	cmp    $0x1c,%rdx
35da:	jae    35ec <ippsBigNumInit+0xac>
35dc:	xor    %edx,%edx
35de:	test   %rdi,%rdi
35e1:	jne    3673 <ippsBigNumInit+0x133>
35e7:	jmpq   36a0 <ippsBigNumInit+0x160>
35ec:	sub    %rdi,%rcx
35ef:	lea    0x110(%rsi,%r9,1),%rbx
35f7:	xor    %edx,%edx
35f9:	xorps  %xmm0,%xmm0
35fc:	nopl   0x0(%rax)
3600:	movups %xmm0,-0xf0(%rbx,%rdx,8)
3608:	movups %xmm0,-0xe0(%rbx,%rdx,8)
3610:	movups %xmm0,-0xd0(%rbx,%rdx,8)
3618:	movups %xmm0,-0xc0(%rbx,%rdx,8)
3620:	movups %xmm0,-0xb0(%rbx,%rdx,8)
3628:	movups %xmm0,-0xa0(%rbx,%rdx,8)
3630:	movups %xmm0,-0x90(%rbx,%rdx,8)
3638:	movups %xmm0,-0x80(%rbx,%rdx,8)
363d:	movups %xmm0,-0x70(%rbx,%rdx,8)
3642:	movups %xmm0,-0x60(%rbx,%rdx,8)
3647:	movups %xmm0,-0x50(%rbx,%rdx,8)
364c:	movups %xmm0,-0x40(%rbx,%rdx,8)
3651:	movups %xmm0,-0x30(%rbx,%rdx,8)
3656:	movups %xmm0,-0x20(%rbx,%rdx,8)
365b:	movups %xmm0,-0x10(%rbx,%rdx,8)
3660:	movups %xmm0,(%rbx,%rdx,8)
3664:	add    $0x20,%rdx
3668:	add    $0xfffffffffffffff8,%rcx
366c:	jne    3600 <ippsBigNumInit+0xc0>
366e:	test   %rdi,%rdi
3671:	je     36a0 <ippsBigNumInit+0x160>
3673:	lea    (%rsi,%rdx,8),%rcx
3677:	lea    0x30(%r9,%rcx,1),%rcx
367c:	neg    %rdi
367f:	xorps  %xmm0,%xmm0
3682:	nopw   %cs:0x0(%rax,%rax,1)
368c:	nopl   0x0(%rax)
3690:	movups %xmm0,-0x10(%rcx)
3694:	movups %xmm0,(%rcx)
3697:	add    $0x20,%rcx
369b:	inc    %rdi
369e:	jne    3690 <ippsBigNumInit+0x150>
36a0:	cmp    %r11,%rax
36a3:	je     36c0 <ippsBigNumInit+0x180>
36a5:	nopw   %cs:0x0(%rax,%rax,1)
36af:	nop
36b0:	movq   $0x0,(%r10,%rax,8)
36b8:	inc    %rax
36bb:	cmp    %rax,%r11
36be:	jne    36b0 <ippsBigNumInit+0x170>
36c0:	add    $0x8,%r8
36c4:	cmp    $0x3,%r11d
36c8:	ja     36d1 <ippsBigNumInit+0x191>
36ca:	xor    %edi,%edi
36cc:	jmpq   37c5 <ippsBigNumInit+0x285>
36d1:	mov    %r11d,%edi
36d4:	and    $0xfffffffc,%edi
36d7:	lea    -0x4(%rdi),%rdx
36db:	mov    %rdx,%rcx
36de:	shr    $0x2,%rcx
36e2:	inc    %rcx
36e5:	mov    %ecx,%eax
36e7:	and    $0x7,%eax
36ea:	cmp    $0x1c,%rdx
36ee:	jae    3700 <ippsBigNumInit+0x1c0>
36f0:	xor    %edx,%edx
36f2:	test   %rax,%rax
36f5:	jne    3793 <ippsBigNumInit+0x253>
36fb:	jmpq   37c0 <ippsBigNumInit+0x280>
3700:	sub    %rax,%rcx
3703:	lea    (%r8,%r9,1),%rdx
3707:	lea    0x110(%rsi,%rdx,1),%rbx
370f:	xor    %edx,%edx
3711:	xorps  %xmm0,%xmm0
3714:	nopw   %cs:0x0(%rax,%rax,1)
371e:	xchg   %ax,%ax
3720:	movups %xmm0,-0xf0(%rbx,%rdx,8)
3728:	movups %xmm0,-0xe0(%rbx,%rdx,8)
3730:	movups %xmm0,-0xd0(%rbx,%rdx,8)
3738:	movups %xmm0,-0xc0(%rbx,%rdx,8)
3740:	movups %xmm0,-0xb0(%rbx,%rdx,8)
3748:	movups %xmm0,-0xa0(%rbx,%rdx,8)
3750:	movups %xmm0,-0x90(%rbx,%rdx,8)
3758:	movups %xmm0,-0x80(%rbx,%rdx,8)
375d:	movups %xmm0,-0x70(%rbx,%rdx,8)
3762:	movups %xmm0,-0x60(%rbx,%rdx,8)
3767:	movups %xmm0,-0x50(%rbx,%rdx,8)
376c:	movups %xmm0,-0x40(%rbx,%rdx,8)
3771:	movups %xmm0,-0x30(%rbx,%rdx,8)
3776:	movups %xmm0,-0x20(%rbx,%rdx,8)
377b:	movups %xmm0,-0x10(%rbx,%rdx,8)
3780:	movups %xmm0,(%rbx,%rdx,8)
3784:	add    $0x20,%rdx
3788:	add    $0xfffffffffffffff8,%rcx
378c:	jne    3720 <ippsBigNumInit+0x1e0>
378e:	test   %rax,%rax
3791:	je     37c0 <ippsBigNumInit+0x280>
3793:	lea    (%rsi,%rdx,8),%rcx
3797:	lea    (%r8,%r9,1),%rdx
379b:	lea    0x30(%rcx,%rdx,1),%rcx
37a0:	neg    %rax
37a3:	xorps  %xmm0,%xmm0
37a6:	nopw   %cs:0x0(%rax,%rax,1)
37b0:	movups %xmm0,-0x10(%rcx)
37b4:	movups %xmm0,(%rcx)
37b7:	add    $0x20,%rcx
37bb:	inc    %rax
37be:	jne    37b0 <ippsBigNumInit+0x270>
37c0:	cmp    %r11,%rdi
37c3:	je     37e0 <ippsBigNumInit+0x2a0>
37c5:	add    %r9,%r8
37c8:	lea    0x20(%rsi,%r8,1),%rax
37cd:	nopl   (%rax)
37d0:	movq   $0x0,(%rax,%rdi,8)
37d8:	inc    %rdi
37db:	cmp    %rdi,%r11
37de:	jne    37d0 <ippsBigNumInit+0x290>
37e0:	mov    %esi,%eax
37e2:	xor    $0x4249474e,%eax
37e7:	mov    %eax,(%rsi)
37e9:	xor    %eax,%eax
37eb:	pop    %rbx
37ec:	retq   
37ed:	nopw   %cs:0x0(%rax,%rax,1)
37f7:	nopw   0x0(%rax,%rax,1)
3800:	endbr64 
3804:	push   %rbx
3805:	mov    $0xfffffff8,%eax
380a:	test   %rdi,%rdi
380d:	je     3891 <ippsSetOctString_BN+0x91>
3813:	mov    %rdx,%rbx
3816:	test   %rdx,%rdx
3819:	je     3891 <ippsSetOctString_BN+0x91>
381b:	mov    (%rbx),%ecx
381d:	xor    %ebx,%ecx
381f:	mov    $0xfffffff3,%eax
3824:	cmp    $0x4249474e,%ecx
382a:	jne    3891 <ippsSetOctString_BN+0x91>
382c:	mov    %esi,%edx
382e:	test   %esi,%esi
3830:	js     3852 <ippsSetOctString_BN+0x52>
3832:	mov    %rdi,%rsi
3835:	test   %edx,%edx
3837:	je     384c <ippsSetOctString_BN+0x4c>
3839:	nopl   0x0(%rax)
3840:	cmpb   $0x0,(%rsi)
3843:	jne    3859 <ippsSetOctString_BN+0x59>
3845:	inc    %rsi
3848:	dec    %edx
384a:	jne    3840 <ippsSetOctString_BN+0x40>
384c:	xor    %edx,%edx
384e:	xor    %ecx,%ecx
3850:	jmp    385b <ippsSetOctString_BN+0x5b>
3852:	mov    $0xfffffff1,%eax
3857:	pop    %rbx
3858:	retq   
3859:	mov    $0x1,%cl
385b:	mov    0xc(%rbx),%edi
385e:	shl    $0x3,%edi
3861:	mov    $0xfffffffa,%eax
3866:	cmp    %edx,%edi
3868:	jl     3891 <ippsSetOctString_BN+0x91>
386a:	mov    0x10(%rbx),%rdi
386e:	test   %cl,%cl
3870:	je     3879 <ippsSetOctString_BN+0x79>
3872:	callq  38a0 <cpFromOctStr_BNU>
3877:	jmp    3885 <ippsSetOctString_BN+0x85>
3879:	movq   $0x0,(%rdi)
3880:	mov    $0x1,%eax
3885:	mov    %eax,0x8(%rbx)
3888:	movl   $0x1,0x4(%rbx)
388f:	xor    %eax,%eax
3891:	pop    %rbx
3892:	retq   
3893:	nopw   %cs:0x0(%rax,%rax,1)
389d:	nopl   (%rax)
38a0:	endbr64 
38a4:	push   %rbx
38a5:	xor    %eax,%eax
38a7:	cmp    $0x8,%edx
38aa:	jl     3942 <cpFromOctStr_BNU+0xa2>
38b0:	movslq %edx,%r8
38b3:	lea    -0x8(%rdx),%ecx
38b6:	shr    $0x3,%ecx
38b9:	lea    0x1(%rcx),%eax
38bc:	lea    -0x1(%r8,%rsi,1),%r9
38c1:	neg    %ecx
38c3:	movslq %ecx,%r8
38c6:	dec    %r8
38c9:	xor    %r11d,%r11d
38cc:	nopl   0x0(%rax)
38d0:	movzbl -0x7(%r9,%r11,8),%r10d
38d6:	shl    $0x38,%r10
38da:	movzbl -0x6(%r9,%r11,8),%ecx
38e0:	shl    $0x30,%rcx
38e4:	or     %r10,%rcx
38e7:	movzbl -0x5(%r9,%r11,8),%r10d
38ed:	shl    $0x28,%r10
38f1:	or     %rcx,%r10
38f4:	movzbl -0x4(%r9,%r11,8),%ecx
38fa:	shl    $0x20,%rcx
38fe:	or     %r10,%rcx
3901:	movzbl -0x3(%r9,%r11,8),%r10d
3907:	shl    $0x18,%r10
390b:	or     %rcx,%r10
390e:	movzbl -0x2(%r9,%r11,8),%ebx
3914:	shl    $0x10,%rbx
3918:	or     %r10,%rbx
391b:	movzbl -0x1(%r9,%r11,8),%ecx
3921:	shl    $0x8,%rcx
3925:	or     %rbx,%rcx
3928:	movzbl (%r9,%r11,8),%ebx
392d:	add    %rcx,%rbx
3930:	mov    %rbx,(%rdi)
3933:	add    $0x8,%rdi
3937:	dec    %r11
393a:	add    $0xfffffff8,%edx
393d:	cmp    %r11d,%r8d
3940:	jne    38d0 <cpFromOctStr_BNU+0x30>
3942:	test   %edx,%edx
3944:	je     39d9 <cpFromOctStr_BNU+0x139>
394a:	test   %edx,%edx
394c:	jle    3966 <cpFromOctStr_BNU+0xc6>
394e:	lea    -0x1(%rdx),%ecx
3951:	mov    %edx,%r8d
3954:	and    $0x3,%r8d
3958:	cmp    $0x3,%ecx
395b:	jae    396a <cpFromOctStr_BNU+0xca>
395d:	xor    %ecx,%ecx
395f:	test   %r8d,%r8d
3962:	jne    39ba <cpFromOctStr_BNU+0x11a>
3964:	jmp    39d4 <cpFromOctStr_BNU+0x134>
3966:	xor    %ecx,%ecx
3968:	jmp    39d4 <cpFromOctStr_BNU+0x134>
396a:	mov    %r8d,%r9d
396d:	sub    %edx,%r9d
3970:	xor    %ecx,%ecx
3972:	nopw   %cs:0x0(%rax,%rax,1)
397c:	nopl   0x0(%rax)
3980:	movzbl (%rsi),%ebx
3983:	shl    $0x8,%rcx
3987:	or     %rbx,%rcx
398a:	movzbl 0x1(%rsi),%ebx
398e:	shl    $0x8,%rcx
3992:	or     %rbx,%rcx
3995:	movzbl 0x2(%rsi),%ebx
3999:	shl    $0x8,%rcx
399d:	or     %rbx,%rcx
39a0:	movzbl 0x3(%rsi),%ebx
39a4:	add    $0x4,%rsi
39a8:	shl    $0x8,%rcx
39ac:	or     %rbx,%rcx
39af:	add    $0x4,%r9d
39b3:	jne    3980 <cpFromOctStr_BNU+0xe0>
39b5:	test   %r8d,%r8d
39b8:	je     39d4 <cpFromOctStr_BNU+0x134>
39ba:	and    $0x3,%edx
39bd:	xor    %r8d,%r8d
39c0:	movzbl (%rsi,%r8,1),%ebx
39c5:	shl    $0x8,%rcx
39c9:	or     %rbx,%rcx
39cc:	inc    %r8
39cf:	cmp    %r8d,%edx
39d2:	jne    39c0 <cpFromOctStr_BNU+0x120>
39d4:	mov    %rcx,(%rdi)
39d7:	inc    %eax
39d9:	pop    %rbx
39da:	retq   
39db:	nopl   0x0(%rax,%rax,1)
39e0:	endbr64 
39e4:	push   %rbp
39e5:	push   %r15
39e7:	push   %r14
39e9:	push   %r13
39eb:	push   %r12
39ed:	push   %rbx
39ee:	sub    $0x48,%rsp
39f2:	mov    $0xfffffff8,%ebx
39f7:	test   %rdx,%rdx
39fa:	je     3a6f <ippsHashMessage_rmf+0x8f>
39fc:	mov    %rcx,%r12
39ff:	test   %rcx,%rcx
3a02:	je     3a6f <ippsHashMessage_rmf+0x8f>
3a04:	mov    %esi,%ebp
3a06:	test   %esi,%esi
3a08:	js     3a6a <ippsHashMessage_rmf+0x8a>
3a0a:	mov    %rdx,%r14
3a0d:	mov    %rdi,%r15
3a10:	test   %rdi,%rdi
3a13:	jne    3a19 <ippsHashMessage_rmf+0x39>
3a15:	test   %ebp,%ebp
3a17:	jne    3a6f <ippsHashMessage_rmf+0x8f>
3a19:	movslq 0x8(%r12),%rbx
3a1e:	neg    %rbx
3a21:	movslq %ebp,%r13
3a24:	and    %r13,%rbx
3a27:	sub    %ebx,%ebp
3a29:	mov    %rsp,%rdi
3a2c:	callq  *0x10(%r12)
3a31:	test   %ebx,%ebx
3a33:	je     3a45 <ippsHashMessage_rmf+0x65>
3a35:	mov    %rsp,%rdi
3a38:	mov    %r15,%rsi
3a3b:	mov    %ebx,%edx
3a3d:	callq  *0x18(%r12)
3a42:	add    %rbx,%r15
3a45:	xor    %ebx,%ebx
3a47:	mov    %rsp,%rdi
3a4a:	mov    %r15,%rsi
3a4d:	mov    %ebp,%edx
3a4f:	mov    %r13,%rcx
3a52:	xor    %r8d,%r8d
3a55:	mov    %r12,%r9
3a58:	callq  9900 <cpFinalize_rmf>
3a5d:	mov    %r14,%rdi
3a60:	mov    %rsp,%rsi
3a63:	callq  *0x20(%r12)
3a68:	jmp    3a6f <ippsHashMessage_rmf+0x8f>
3a6a:	mov    $0xfffffff1,%ebx
3a6f:	mov    %ebx,%eax
3a71:	add    $0x48,%rsp
3a75:	pop    %rbx
3a76:	pop    %r12
3a78:	pop    %r13
3a7a:	pop    %r14
3a7c:	pop    %r15
3a7e:	pop    %rbp
3a7f:	retq   
3a80:	endbr64 
3a84:	test   %rdi,%rdi
3a87:	je     3a92 <ippsHashMethodGetSize+0x12>
3a89:	movl   $0x30,(%rdi)
3a8f:	xor    %eax,%eax
3a91:	retq   
3a92:	mov    $0xfffffff8,%eax
3a97:	retq   
3a98:	nopl   0x0(%rax,%rax,1)
3aa0:	endbr64 
3aa4:	test   %rdi,%rdi
3aa7:	je     3ae2 <ippsHashMethodSet_SHA384+0x42>
3aa9:	movaps 0xb620(%rip),%xmm0        # f0d0 <SHA512_256_fixPS+0x6f0>
3ab0:	movups %xmm0,(%rdi)
3ab3:	lea    0x46(%rip),%rax        # 3b00 <sha512_384_hashInit>
3aba:	mov    %rax,0x10(%rdi)
3abe:	lea    0x7b(%rip),%rax        # 3b40 <sha512_hashUpdate>
3ac5:	mov    %rax,0x18(%rdi)
3ac9:	lea    0x90(%rip),%rax        # 3b60 <sha512_384_hashOctString>
3ad0:	mov    %rax,0x20(%rdi)
3ad4:	lea    0x225(%rip),%rax        # 3d00 <sha512_msgRep>
3adb:	mov    %rax,0x28(%rdi)
3adf:	xor    %eax,%eax
3ae1:	retq   
3ae2:	mov    $0xfffffff8,%eax
3ae7:	retq   
3ae8:	nopw   %cs:0x0(%rax,%rax,1)
3af2:	nopw   %cs:0x0(%rax,%rax,1)
3afc:	nopl   0x0(%rax)
3b00:	endbr64 
3b04:	movaps 0xb5d5(%rip),%xmm0        # f0e0 <SHA512_256_fixPS+0x700>
3b0b:	movups %xmm0,(%rdi)
3b0e:	movaps 0xb5db(%rip),%xmm0        # f0f0 <SHA512_256_fixPS+0x710>
3b15:	movups %xmm0,0x10(%rdi)
3b19:	movaps 0xb5e0(%rip),%xmm0        # f100 <SHA512_256_fixPS+0x720>
3b20:	movups %xmm0,0x20(%rdi)
3b24:	movaps 0xb5e5(%rip),%xmm0        # f110 <SHA512_256_fixPS+0x730>
3b2b:	movups %xmm0,0x30(%rdi)
3b2f:	retq   
3b30:	nopw   %cs:0x0(%rax,%rax,1)
3b3a:	nopw   0x0(%rax,%rax,1)
3b40:	endbr64 
3b44:	lea    0xab45(%rip),%rcx        # e690 <sha512_cnt>
3b4b:	jmpq   4c70 <UpdateSHA512>
3b50:	nopw   %cs:0x0(%rax,%rax,1)
3b5a:	nopw   0x0(%rax,%rax,1)
3b60:	endbr64 
3b64:	mov    (%rsi),%rcx
3b67:	mov    %rcx,%r9
3b6a:	shr    $0x20,%r9
3b6e:	mov    %rcx,%r8
3b71:	shr    $0x38,%r8
3b75:	mov    %rcx,%rdx
3b78:	shr    $0x18,%rdx
3b7c:	and    $0xff0000,%edx
3b82:	or     %r8,%rdx
3b85:	mov    %rcx,%rax
3b88:	shr    $0x28,%rax
3b8c:	shl    $0x18,%r9d
3b90:	or     %r9d,%eax
3b93:	and    $0xff00ff00,%eax
3b98:	or     %rdx,%rax
3b9b:	bswap  %ecx
3b9d:	shl    $0x20,%rcx
3ba1:	or     %rax,%rcx
3ba4:	mov    %rcx,(%rdi)
3ba7:	mov    0x8(%rsi),%rcx
3bab:	mov    %rcx,%r9
3bae:	shr    $0x20,%r9
3bb2:	mov    %rcx,%r8
3bb5:	shr    $0x38,%r8
3bb9:	mov    %rcx,%rdx
3bbc:	shr    $0x18,%rdx
3bc0:	and    $0xff0000,%edx
3bc6:	or     %r8,%rdx
3bc9:	mov    %rcx,%rax
3bcc:	shr    $0x28,%rax
3bd0:	shl    $0x18,%r9d
3bd4:	or     %r9d,%eax
3bd7:	and    $0xff00ff00,%eax
3bdc:	or     %rdx,%rax
3bdf:	bswap  %ecx
3be1:	shl    $0x20,%rcx
3be5:	or     %rax,%rcx
3be8:	mov    %rcx,0x8(%rdi)
3bec:	mov    0x10(%rsi),%rcx
3bf0:	mov    %rcx,%r9
3bf3:	shr    $0x20,%r9
3bf7:	mov    %rcx,%r8
3bfa:	shr    $0x38,%r8
3bfe:	mov    %rcx,%rdx
3c01:	shr    $0x18,%rdx
3c05:	and    $0xff0000,%edx
3c0b:	or     %r8,%rdx
3c0e:	mov    %rcx,%rax
3c11:	shr    $0x28,%rax
3c15:	shl    $0x18,%r9d
3c19:	or     %r9d,%eax
3c1c:	and    $0xff00ff00,%eax
3c21:	or     %rdx,%rax
3c24:	bswap  %ecx
3c26:	shl    $0x20,%rcx
3c2a:	or     %rax,%rcx
3c2d:	mov    %rcx,0x10(%rdi)
3c31:	mov    0x18(%rsi),%rcx
3c35:	mov    %rcx,%r9
3c38:	shr    $0x20,%r9
3c3c:	mov    %rcx,%r8
3c3f:	shr    $0x38,%r8
3c43:	mov    %rcx,%rdx
3c46:	shr    $0x18,%rdx
3c4a:	and    $0xff0000,%edx
3c50:	or     %r8,%rdx
3c53:	mov    %rcx,%rax
3c56:	shr    $0x28,%rax
3c5a:	shl    $0x18,%r9d
3c5e:	or     %r9d,%eax
3c61:	and    $0xff00ff00,%eax
3c66:	or     %rdx,%rax
3c69:	bswap  %ecx
3c6b:	shl    $0x20,%rcx
3c6f:	or     %rax,%rcx
3c72:	mov    %rcx,0x18(%rdi)
3c76:	mov    0x20(%rsi),%rcx
3c7a:	mov    %rcx,%r9
3c7d:	shr    $0x20,%r9
3c81:	mov    %rcx,%r8
3c84:	shr    $0x38,%r8
3c88:	mov    %rcx,%rdx
3c8b:	shr    $0x18,%rdx
3c8f:	and    $0xff0000,%edx
3c95:	or     %r8,%rdx
3c98:	mov    %rcx,%rax
3c9b:	shr    $0x28,%rax
3c9f:	shl    $0x18,%r9d
3ca3:	or     %r9d,%eax
3ca6:	and    $0xff00ff00,%eax
3cab:	or     %rdx,%rax
3cae:	bswap  %ecx
3cb0:	shl    $0x20,%rcx
3cb4:	or     %rax,%rcx
3cb7:	mov    %rcx,0x20(%rdi)
3cbb:	mov    0x28(%rsi),%rax
3cbf:	mov    %rax,%rcx
3cc2:	shr    $0x20,%rcx
3cc6:	mov    %rax,%rdx
3cc9:	shr    $0x38,%rdx
3ccd:	mov    %rax,%rsi
3cd0:	shr    $0x18,%rsi
3cd4:	and    $0xff0000,%esi
3cda:	or     %rdx,%rsi
3cdd:	mov    %rax,%rdx
3ce0:	shr    $0x28,%rdx
3ce4:	shl    $0x18,%ecx
3ce7:	or     %ecx,%edx
3ce9:	and    $0xff00ff00,%edx
3cef:	or     %rsi,%rdx
3cf2:	bswap  %eax
3cf4:	shl    $0x20,%rax
3cf8:	or     %rdx,%rax
3cfb:	mov    %rax,0x28(%rdi)
3cff:	retq   
3d00:	endbr64 
3d04:	lea    0x0(,%rdx,8),%ecx
3d0b:	mov    %rsi,%rax
3d0e:	movq   %rsi,%xmm1
3d13:	movq   %rdx,%xmm0
3d18:	punpcklqdq %xmm1,%xmm0
3d1c:	movdqa %xmm0,%xmm1
3d20:	psrlq  $0x15,%xmm1
3d25:	pand   0xb3f3(%rip),%xmm1        # f120 <SHA512_256_fixPS+0x740>
3d2d:	movdqa %xmm0,%xmm2
3d31:	psrlq  $0x35,%xmm2
3d36:	por    %xmm1,%xmm2
3d3a:	pand   0xb3ee(%rip),%xmm2        # f130 <SHA512_256_fixPS+0x750>
3d42:	shr    $0x3c,%rax
3d46:	movdqa %xmm0,%xmm1
3d4a:	psrlq  $0x25,%xmm1
3d4f:	pand   0xb3e9(%rip),%xmm1        # f140 <SHA512_256_fixPS+0x760>
3d57:	or     %ecx,%eax
3d59:	psrlq  $0x5,%xmm0
3d5e:	pand   0xb3ea(%rip),%xmm0        # f150 <SHA512_256_fixPS+0x770>
3d66:	bswap  %eax
3d68:	por    %xmm1,%xmm0
3d6c:	mov    %esi,%ecx
3d6e:	rol    $0xb,%ecx
3d71:	and    $0xff00ff,%ecx
3d77:	rol    $0x1b,%esi
3d7a:	and    $0xf800ff00,%esi
3d80:	or     %ecx,%esi
3d82:	movd   %eax,%xmm1
3d86:	pinsrd $0x2,%esi,%xmm1
3d8c:	por    %xmm2,%xmm0
3d90:	psllq  $0x20,%xmm1
3d95:	pblendw $0x33,%xmm0,%xmm1
3d9b:	movdqu %xmm1,(%rdi)
3d9f:	retq   
3da0:	endbr64 
3da4:	push   %r15
3da6:	push   %r14
3da8:	push   %rbx
3da9:	mov    $0xfffffff8,%eax
3dae:	test   %rsi,%rsi
3db1:	je     3e18 <ippsRSA_GetBufferSizePublicKey+0x78>
3db3:	mov    (%rsi),%ecx
3db5:	xor    %esi,%ecx
3db7:	mov    $0xfffffff3,%eax
3dbc:	cmp    $0x52534130,%ecx
3dc2:	jne    3e18 <ippsRSA_GetBufferSizePublicKey+0x78>
3dc4:	mov    0xc(%rsi),%ebx
3dc7:	test   %ebx,%ebx
3dc9:	jle    3e1e <ippsRSA_GetBufferSizePublicKey+0x7e>
3dcb:	mov    %rdi,%r14
3dce:	mov    $0xfffffff8,%eax
3dd3:	test   %rdi,%rdi
3dd6:	je     3e18 <ippsRSA_GetBufferSizePublicKey+0x78>
3dd8:	lea    0x3f(%rbx),%eax
3ddb:	sar    $0x1f,%eax
3dde:	shr    $0x1a,%eax
3de1:	lea    0x3f(%rbx,%rax,1),%r15d
3de6:	sar    $0x6,%r15d
3dea:	callq  3ec0 <gsMethod_RSA_gpr_public>
3def:	cmp    %ebx,(%rax)
3df1:	jg     3dfb <ippsRSA_GetBufferSizePublicKey+0x5b>
3df3:	mov    %rax,%rcx
3df6:	cmp    %ebx,0x4(%rax)
3df9:	jge    3e03 <ippsRSA_GetBufferSizePublicKey+0x63>
3dfb:	callq  3ec0 <gsMethod_RSA_gpr_public>
3e00:	mov    %rax,%rcx
3e03:	mov    %ebx,%edi
3e05:	callq  *0x8(%rcx)
3e08:	lea    (%rax,%r15,4),%eax
3e0c:	lea    0x28(,%rax,8),%eax
3e13:	mov    %eax,(%r14)
3e16:	xor    %eax,%eax
3e18:	pop    %rbx
3e19:	pop    %r14
3e1b:	pop    %r15
3e1d:	retq   
3e1e:	mov    $0xfffffc0b,%eax
3e23:	pop    %rbx
3e24:	pop    %r14
3e26:	pop    %r15
3e28:	retq   
3e29:	nopw   %cs:0x0(%rax,%rax,1)
3e33:	nopw   %cs:0x0(%rax,%rax,1)
3e3d:	nopl   (%rax)
3e40:	endbr64 
3e44:	test   %rdx,%rdx
3e47:	je     3ea6 <ippsRSA_GetSizePublicKey+0x66>
3e49:	lea    -0x8(%rdi),%ecx
3e4c:	mov    $0xfffffff2,%eax
3e51:	cmp    $0x3ff8,%ecx
3e57:	ja     3ea5 <ippsRSA_GetSizePublicKey+0x65>
3e59:	mov    $0xfffffffb,%eax
3e5e:	test   %esi,%esi
3e60:	jle    3ea5 <ippsRSA_GetSizePublicKey+0x65>
3e62:	cmp    %edi,%esi
3e64:	jg     3ea5 <ippsRSA_GetSizePublicKey+0x65>
3e66:	push   %r14
3e68:	push   %rbx
3e69:	push   %rax
3e6a:	mov    %rdx,%rbx
3e6d:	mov    %esi,%eax
3e6f:	add    $0x3f,%eax
3e72:	sar    $0x1f,%eax
3e75:	shr    $0x1a,%eax
3e78:	lea    0x3f(%rsi,%rax,1),%r14d
3e7d:	sar    $0x6,%r14d
3e81:	add    $0x1f,%edi
3e84:	sar    $0x5,%edi
3e87:	lea    0x4(%rsp),%rsi
3e8c:	callq  4140 <rsaMontExpGetSize>
3e91:	mov    0x4(%rsp),%eax
3e95:	lea    0x2f(%rax,%r14,8),%eax
3e9a:	mov    %eax,(%rbx)
3e9c:	xor    %eax,%eax
3e9e:	add    $0x8,%rsp
3ea2:	pop    %rbx
3ea3:	pop    %r14
3ea5:	retq   
3ea6:	mov    $0xfffffff8,%eax
3eab:	retq   
3eac:	nopw   %cs:0x0(%rax,%rax,1)
3eb6:	nopw   %cs:0x0(%rax,%rax,1)
3ec0:	endbr64 
3ec4:	lea    0xd13d(%rip),%rax        # 11008 <gsMethod_RSA_gpr_public.m>
3ecb:	retq   
3ecc:	nopw   %cs:0x0(%rax,%rax,1)
3ed6:	nopw   %cs:0x0(%rax,%rax,1)
3ee0:	endbr64 
3ee4:	push   %rbp
3ee5:	push   %r15
3ee7:	push   %r14
3ee9:	push   %r13
3eeb:	push   %r12
3eed:	push   %rbx
3eee:	sub    $0x18,%rsp
3ef2:	test   %rdx,%rdx
3ef5:	je     3fe3 <ippsRSA_InitPublicKey+0x103>
3efb:	lea    -0x8(%rdi),%eax
3efe:	mov    $0xfffffff2,%ebp
3f03:	cmp    $0x3ff8,%eax
3f08:	ja     3fe8 <ippsRSA_InitPublicKey+0x108>
3f0e:	mov    %esi,%ebx
3f10:	mov    $0xfffffffb,%ebp
3f15:	test   %esi,%esi
3f17:	jle    3fe8 <ippsRSA_InitPublicKey+0x108>
3f1d:	cmp    %edi,%ebx
3f1f:	jg     3fe8 <ippsRSA_InitPublicKey+0x108>
3f25:	mov    %ecx,%r15d
3f28:	mov    %rdx,%r12
3f2b:	lea    0x3f(%rbx),%eax
3f2e:	sar    $0x1f,%eax
3f31:	shr    $0x1a,%eax
3f34:	lea    0x3f(%rbx,%rax,1),%r14d
3f39:	sar    $0x6,%r14d
3f3d:	lea    0x1f(%rdi),%r13d
3f41:	sar    $0x5,%r13d
3f45:	lea    0x4(%rsp),%rsi
3f4a:	mov    %rdi,0x8(%rsp)
3f4f:	mov    %r13d,%edi
3f52:	callq  4140 <rsaMontExpGetSize>
3f57:	mov    0x8(%rsp),%rcx
3f5c:	mov    0x4(%rsp),%eax
3f60:	lea    0x2f(%rax,%r14,8),%eax
3f65:	mov    $0xfffffff7,%ebp
3f6a:	cmp    %r15d,%eax
3f6d:	jg     3fe8 <ippsRSA_InitPublicKey+0x108>
3f6f:	lea    0x0(,%r14,8),%ebp
3f77:	mov    %r12d,%eax
3f7a:	xor    $0x52534130,%eax
3f7f:	mov    %eax,(%r12)
3f83:	mov    %ecx,0x4(%r12)
3f88:	mov    %ebx,0x8(%r12)
3f8d:	movq   $0x0,0xc(%r12)
3f96:	lea    0x14(%rsp),%rsi
3f9b:	mov    %r13d,%edi
3f9e:	callq  4140 <rsaMontExpGetSize>
3fa3:	lea    0x28(%r12),%r9
3fa8:	neg    %r9d
3fab:	and    $0x7,%r9d
3faf:	lea    0x28(%r12,%r9,1),%rax
3fb4:	mov    %rax,0x18(%r12)
3fb9:	movslq %ebp,%rcx
3fbc:	lea    0x28(%r12,%rcx,1),%r15
3fc1:	mov    %r15,0x20(%r12)
3fc6:	movslq %r14d,%rcx
3fc9:	test   %rcx,%rcx
3fcc:	mov    $0x1,%r8d
3fd2:	cmovg  %rcx,%r8
3fd6:	cmp    $0x4,%r8
3fda:	jae    3ff9 <ippsRSA_InitPublicKey+0x119>
3fdc:	xor    %edx,%edx
3fde:	jmpq   4100 <ippsRSA_InitPublicKey+0x220>
3fe3:	mov    $0xfffffff8,%ebp
3fe8:	mov    %ebp,%eax
3fea:	add    $0x18,%rsp
3fee:	pop    %rbx
3fef:	pop    %r12
3ff1:	pop    %r13
3ff3:	pop    %r14
3ff5:	pop    %r15
3ff7:	pop    %rbp
3ff8:	retq   
3ff9:	movabs $0x7ffffffffffffffc,%rdx
4003:	and    %r8,%rdx
4006:	lea    -0x4(%rdx),%rsi
400a:	mov    %rsi,%rbx
400d:	shr    $0x2,%rbx
4011:	inc    %rbx
4014:	mov    %ebx,%edi
4016:	and    $0x7,%edi
4019:	cmp    $0x1c,%rsi
401d:	jae    402f <ippsRSA_InitPublicKey+0x14f>
401f:	xor    %ebx,%ebx
4021:	test   %rdi,%rdi
4024:	jne    40c3 <ippsRSA_InitPublicKey+0x1e3>
402a:	jmpq   40f0 <ippsRSA_InitPublicKey+0x210>
402f:	lea    0x118(%r12,%r9,1),%rsi
4037:	mov    %rdi,%rbp
403a:	sub    %rbx,%rbp
403d:	xor    %ebx,%ebx
403f:	xorps  %xmm0,%xmm0
4042:	nopw   %cs:0x0(%rax,%rax,1)
404c:	nopl   0x0(%rax)
4050:	movups %xmm0,-0xf0(%rsi,%rbx,8)
4058:	movups %xmm0,-0xe0(%rsi,%rbx,8)
4060:	movups %xmm0,-0xd0(%rsi,%rbx,8)
4068:	movups %xmm0,-0xc0(%rsi,%rbx,8)
4070:	movups %xmm0,-0xb0(%rsi,%rbx,8)
4078:	movups %xmm0,-0xa0(%rsi,%rbx,8)
4080:	movups %xmm0,-0x90(%rsi,%rbx,8)
4088:	movups %xmm0,-0x80(%rsi,%rbx,8)
408d:	movups %xmm0,-0x70(%rsi,%rbx,8)
4092:	movups %xmm0,-0x60(%rsi,%rbx,8)
4097:	movups %xmm0,-0x50(%rsi,%rbx,8)
409c:	movups %xmm0,-0x40(%rsi,%rbx,8)
40a1:	movups %xmm0,-0x30(%rsi,%rbx,8)
40a6:	movups %xmm0,-0x20(%rsi,%rbx,8)
40ab:	movups %xmm0,-0x10(%rsi,%rbx,8)
40b0:	movups %xmm0,(%rsi,%rbx,8)
40b4:	add    $0x20,%rbx
40b8:	add    $0x8,%rbp
40bc:	jne    4050 <ippsRSA_InitPublicKey+0x170>
40be:	test   %rdi,%rdi
40c1:	je     40f0 <ippsRSA_InitPublicKey+0x210>
40c3:	lea    (%r12,%rbx,8),%rsi
40c7:	lea    0x38(%r9,%rsi,1),%rsi
40cc:	neg    %rdi
40cf:	xorps  %xmm0,%xmm0
40d2:	nopw   %cs:0x0(%rax,%rax,1)
40dc:	nopl   0x0(%rax)
40e0:	movups %xmm0,-0x10(%rsi)
40e4:	movups %xmm0,(%rsi)
40e7:	add    $0x20,%rsi
40eb:	inc    %rdi
40ee:	jne    40e0 <ippsRSA_InitPublicKey+0x200>
40f0:	cmp    %rdx,%r8
40f3:	je     4110 <ippsRSA_InitPublicKey+0x230>
40f5:	nopw   %cs:0x0(%rax,%rax,1)
40ff:	nop
4100:	movq   $0x0,(%rax,%rdx,8)
4108:	inc    %rdx
410b:	cmp    %rcx,%rdx
410e:	jl     4100 <ippsRSA_InitPublicKey+0x220>
4110:	callq  8bc0 <gsModArithRSA>
4115:	xor    %ebp,%ebp
4117:	mov    %r15,%rdi
411a:	xor    %esi,%esi
411c:	mov    0x8(%rsp),%rdx
4121:	mov    $0x2,%ecx
4126:	mov    %rax,%r8
4129:	callq  83c0 <gsModEngineInit>
412e:	jmpq   3fe8 <ippsRSA_InitPublicKey+0x108>
4133:	nopw   %cs:0x0(%rax,%rax,1)
413d:	nopl   (%rax)
4140:	endbr64 
4144:	push   %rbx
4145:	sub    $0x10,%rsp
4149:	mov    %rsi,%rbx
414c:	movl   $0x0,0xc(%rsp)
4154:	shl    $0x5,%edi
4157:	lea    0xc(%rsp),%rdx
415c:	mov    $0x2,%esi
4161:	callq  8380 <gsModEngineGetSize>
4166:	mov    0xc(%rsp),%eax
416a:	mov    %eax,(%rbx)
416c:	add    $0x10,%rsp
4170:	pop    %rbx
4171:	retq   
4172:	nopw   %cs:0x0(%rax,%rax,1)
417c:	nopl   0x0(%rax)
4180:	endbr64 
4184:	push   %rbp
4185:	push   %r15
4187:	push   %r14
4189:	push   %r13
418b:	push   %r12
418d:	push   %rbx
418e:	push   %rax
418f:	mov    $0xfffffff8,%ebp
4194:	test   %rdx,%rdx
4197:	je     420c <ippsRSA_SetPublicKey+0x8c>
4199:	mov    %rdx,%rbx
419c:	mov    (%rdx),%eax
419e:	xor    %ebx,%eax
41a0:	cmp    $0x52534130,%eax
41a5:	jne    4207 <ippsRSA_SetPublicKey+0x87>
41a7:	mov    %rdi,%r15
41aa:	test   %rdi,%rdi
41ad:	je     420c <ippsRSA_SetPublicKey+0x8c>
41af:	mov    (%r15),%eax
41b2:	xor    %r15d,%eax
41b5:	cmp    $0x4249474e,%eax
41ba:	jne    4207 <ippsRSA_SetPublicKey+0x87>
41bc:	mov    %rsi,%r14
41bf:	movslq 0x8(%r15),%rax
41c3:	cmp    $0x1,%rax
41c7:	jne    41d7 <ippsRSA_SetPublicKey+0x57>
41c9:	mov    0x10(%r15),%rcx
41cd:	cmpq   $0x0,(%rcx)
41d1:	je     42c7 <ippsRSA_SetPublicKey+0x147>
41d7:	cmpl   $0x1,0x4(%r15)
41dc:	jne    42c7 <ippsRSA_SetPublicKey+0x147>
41e2:	mov    %eax,%r12d
41e5:	shl    $0x6,%r12d
41e9:	mov    0x10(%r15),%rcx
41ed:	mov    -0x8(%rcx,%rax,8),%rdi
41f2:	callq  97c0 <cpNLZ_BNU>
41f7:	sub    %eax,%r12d
41fa:	cmp    0x4(%rbx),%r12d
41fe:	jle    421d <ippsRSA_SetPublicKey+0x9d>
4200:	mov    $0xfffffffa,%ebp
4205:	jmp    420c <ippsRSA_SetPublicKey+0x8c>
4207:	mov    $0xfffffff3,%ebp
420c:	mov    %ebp,%eax
420e:	add    $0x8,%rsp
4212:	pop    %rbx
4213:	pop    %r12
4215:	pop    %r13
4217:	pop    %r14
4219:	pop    %r15
421b:	pop    %rbp
421c:	retq   
421d:	test   %r14,%r14
4220:	je     420c <ippsRSA_SetPublicKey+0x8c>
4222:	mov    (%r14),%eax
4225:	xor    %r14d,%eax
4228:	mov    $0xfffffff3,%ebp
422d:	cmp    $0x4249474e,%eax
4232:	jne    420c <ippsRSA_SetPublicKey+0x8c>
4234:	movslq 0x8(%r14),%rax
4238:	cmp    $0x1,%rax
423c:	jne    4248 <ippsRSA_SetPublicKey+0xc8>
423e:	mov    0x10(%r14),%rcx
4242:	cmpq   $0x0,(%rcx)
4246:	je     42c7 <ippsRSA_SetPublicKey+0x147>
4248:	cmpl   $0x1,0x4(%r14)
424d:	mov    $0xfffffff5,%ebp
4252:	jne    420c <ippsRSA_SetPublicKey+0x8c>
4254:	mov    %eax,%r12d
4257:	shl    $0x6,%r12d
425b:	mov    0x10(%r14),%rcx
425f:	mov    -0x8(%rcx,%rax,8),%rdi
4264:	callq  97c0 <cpNLZ_BNU>
4269:	sub    %eax,%r12d
426c:	mov    0x8(%rbx),%r8d
4270:	mov    $0xfffffffa,%ebp
4275:	cmp    %r8d,%r12d
4278:	jg     420c <ippsRSA_SetPublicKey+0x8c>
427a:	movq   $0x0,0xc(%rbx)
4282:	movslq 0x8(%r14),%r9
4286:	test   %r9,%r9
4289:	jle    42d1 <ippsRSA_SetPublicKey+0x151>
428b:	mov    0x10(%r14),%rsi
428f:	mov    0x18(%rbx),%rdi
4293:	cmp    $0x3,%r9d
4297:	jbe    42b3 <ippsRSA_SetPublicKey+0x133>
4299:	lea    (%rsi,%r9,8),%rax
429d:	cmp    %rax,%rdi
42a0:	jae    4333 <ippsRSA_SetPublicKey+0x1b3>
42a6:	lea    (%rdi,%r9,8),%rax
42aa:	cmp    %rax,%rsi
42ad:	jae    4333 <ippsRSA_SetPublicKey+0x1b3>
42b3:	xor    %ecx,%ecx
42b5:	mov    (%rsi,%rcx,8),%rax
42b9:	mov    %rax,(%rdi,%rcx,8)
42bd:	inc    %rcx
42c0:	cmp    %r9,%rcx
42c3:	jl     42b5 <ippsRSA_SetPublicKey+0x135>
42c5:	jmp    42d3 <ippsRSA_SetPublicKey+0x153>
42c7:	mov    $0xfffffff5,%ebp
42cc:	jmpq   420c <ippsRSA_SetPublicKey+0x8c>
42d1:	xor    %ecx,%ecx
42d3:	mov    %r8d,%eax
42d6:	add    $0x3f,%eax
42d9:	sar    $0x1f,%eax
42dc:	shr    $0x1a,%eax
42df:	lea    0x3f(%r8,%rax,1),%eax
42e4:	sar    $0x6,%eax
42e7:	cmp    %eax,%ecx
42e9:	jge    43e0 <ippsRSA_SetPublicKey+0x260>
42ef:	mov    0x18(%rbx),%r10
42f3:	mov    %ecx,%ecx
42f5:	mov    %eax,%edx
42f7:	mov    %rdx,%r9
42fa:	sub    %rcx,%r9
42fd:	cmp    $0x3,%r9
4301:	jbe    43d0 <ippsRSA_SetPublicKey+0x250>
4307:	mov    %r9,%r8
430a:	and    $0xfffffffffffffffc,%r8
430e:	lea    -0x4(%r8),%rax
4312:	mov    %rax,%rbp
4315:	shr    $0x2,%rbp
4319:	inc    %rbp
431c:	mov    %ebp,%edi
431e:	and    $0x3,%edi
4321:	cmp    $0xc,%rax
4325:	jae    4367 <ippsRSA_SetPublicKey+0x1e7>
4327:	xor    %esi,%esi
4329:	test   %rdi,%rdi
432c:	jne    43aa <ippsRSA_SetPublicKey+0x22a>
432e:	jmpq   43c8 <ippsRSA_SetPublicKey+0x248>
4333:	mov    %r9,%rcx
4336:	and    $0xfffffffffffffffc,%rcx
433a:	lea    -0x4(%rcx),%rbp
433e:	mov    %rbp,%rax
4341:	shr    $0x2,%rax
4345:	inc    %rax
4348:	mov    %eax,%edx
434a:	and    $0x3,%edx
434d:	cmp    $0xc,%rbp
4351:	jae    4456 <ippsRSA_SetPublicKey+0x2d6>
4357:	xor    %eax,%eax
4359:	test   %rdx,%rdx
435c:	jne    44bb <ippsRSA_SetPublicKey+0x33b>
4362:	jmpq   44e1 <ippsRSA_SetPublicKey+0x361>
4367:	sub    %rdi,%rbp
436a:	lea    0x70(%r10,%rcx,8),%rax
436f:	xor    %esi,%esi
4371:	xorps  %xmm0,%xmm0
4374:	movups %xmm0,-0x70(%rax,%rsi,8)
4379:	movups %xmm0,-0x60(%rax,%rsi,8)
437e:	movups %xmm0,-0x50(%rax,%rsi,8)
4383:	movups %xmm0,-0x40(%rax,%rsi,8)
4388:	movups %xmm0,-0x30(%rax,%rsi,8)
438d:	movups %xmm0,-0x20(%rax,%rsi,8)
4392:	movups %xmm0,-0x10(%rax,%rsi,8)
4397:	movups %xmm0,(%rax,%rsi,8)
439b:	add    $0x10,%rsi
439f:	add    $0xfffffffffffffffc,%rbp
43a3:	jne    4374 <ippsRSA_SetPublicKey+0x1f4>
43a5:	test   %rdi,%rdi
43a8:	je     43c8 <ippsRSA_SetPublicKey+0x248>
43aa:	add    %rcx,%rsi
43ad:	lea    0x10(%r10,%rsi,8),%rax
43b2:	neg    %rdi
43b5:	xorps  %xmm0,%xmm0
43b8:	movups %xmm0,-0x10(%rax)
43bc:	movups %xmm0,(%rax)
43bf:	add    $0x20,%rax
43c3:	inc    %rdi
43c6:	jne    43b8 <ippsRSA_SetPublicKey+0x238>
43c8:	cmp    %r8,%r9
43cb:	je     43e0 <ippsRSA_SetPublicKey+0x260>
43cd:	add    %r8,%rcx
43d0:	movq   $0x0,(%r10,%rcx,8)
43d8:	inc    %rcx
43db:	cmp    %rcx,%rdx
43de:	jne    43d0 <ippsRSA_SetPublicKey+0x250>
43e0:	mov    0x20(%rbx),%r12
43e4:	mov    0x10(%r15),%r13
43e8:	movslq 0x8(%r15),%rax
43ec:	mov    -0x8(%r13,%rax,8),%rdi
43f1:	mov    %eax,%ebp
43f3:	shl    $0x6,%ebp
43f6:	callq  97c0 <cpNLZ_BNU>
43fb:	sub    %eax,%ebp
43fd:	callq  8bc0 <gsModArithRSA>
4402:	mov    %r12,%rdi
4405:	mov    %r13,%rsi
4408:	mov    %ebp,%edx
440a:	mov    $0x2,%ecx
440f:	mov    %rax,%r8
4412:	callq  83c0 <gsModEngineInit>
4417:	movslq 0x8(%r15),%rax
441b:	mov    0x10(%r15),%rcx
441f:	mov    -0x8(%rcx,%rax,8),%rdi
4424:	mov    %eax,%ebp
4426:	shl    $0x6,%ebp
4429:	callq  97c0 <cpNLZ_BNU>
442e:	sub    %eax,%ebp
4430:	mov    %ebp,0xc(%rbx)
4433:	movslq 0x8(%r14),%rax
4437:	mov    0x10(%r14),%rcx
443b:	mov    -0x8(%rcx,%rax,8),%rdi
4440:	mov    %eax,%ebp
4442:	shl    $0x6,%ebp
4445:	callq  97c0 <cpNLZ_BNU>
444a:	sub    %eax,%ebp
444c:	mov    %ebp,0x10(%rbx)
444f:	xor    %ebp,%ebp
4451:	jmpq   420c <ippsRSA_SetPublicKey+0x8c>
4456:	mov    %rdx,%rbp
4459:	sub    %rax,%rbp
445c:	xor    %eax,%eax
445e:	movups (%rsi,%rax,8),%xmm0
4462:	movups 0x10(%rsi,%rax,8),%xmm1
4467:	movups %xmm0,(%rdi,%rax,8)
446b:	movups %xmm1,0x10(%rdi,%rax,8)
4470:	movups 0x20(%rsi,%rax,8),%xmm0
4475:	movups 0x30(%rsi,%rax,8),%xmm1
447a:	movups %xmm0,0x20(%rdi,%rax,8)
447f:	movups %xmm1,0x30(%rdi,%rax,8)
4484:	movups 0x40(%rsi,%rax,8),%xmm0
4489:	movups 0x50(%rsi,%rax,8),%xmm1
448e:	movups %xmm0,0x40(%rdi,%rax,8)
4493:	movups %xmm1,0x50(%rdi,%rax,8)
4498:	movups 0x60(%rsi,%rax,8),%xmm0
449d:	movups 0x70(%rsi,%rax,8),%xmm1
44a2:	movups %xmm0,0x60(%rdi,%rax,8)
44a7:	movups %xmm1,0x70(%rdi,%rax,8)
44ac:	add    $0x10,%rax
44b0:	add    $0x4,%rbp
44b4:	jne    445e <ippsRSA_SetPublicKey+0x2de>
44b6:	test   %rdx,%rdx
44b9:	je     44e1 <ippsRSA_SetPublicKey+0x361>
44bb:	lea    0x10(,%rax,8),%rax
44c3:	neg    %rdx
44c6:	movups -0x10(%rsi,%rax,1),%xmm0
44cb:	movups (%rsi,%rax,1),%xmm1
44cf:	movups %xmm0,-0x10(%rdi,%rax,1)
44d4:	movups %xmm1,(%rdi,%rax,1)
44d8:	add    $0x20,%rax
44dc:	inc    %rdx
44df:	jne    44c6 <ippsRSA_SetPublicKey+0x346>
44e1:	cmp    %r9,%rcx
44e4:	jne    42b5 <ippsRSA_SetPublicKey+0x135>
44ea:	jmpq   42d3 <ippsRSA_SetPublicKey+0x153>
44ef:	nopw   %cs:0x0(%rax,%rax,1)
44f9:	nopl   0x0(%rax)
4500:	endbr64 
4504:	push   %rbp
4505:	push   %r15
4507:	push   %r14
4509:	push   %r13
450b:	push   %r12
450d:	push   %rbx
450e:	sub    $0xb8,%rsp
4515:	mov    %fs:0x28,%rax
451e:	mov    %rax,0xb0(%rsp)
4526:	test   %r9,%r9
4529:	je     4732 <ippsRSAVerify_PKCS1v15_rmf+0x232>
452f:	mov    %r8,%rbp
4532:	test   %r8,%r8
4535:	je     4718 <ippsRSAVerify_PKCS1v15_rmf+0x218>
453b:	mov    0xf0(%rsp),%r14
4543:	test   %r14,%r14
4546:	je     4718 <ippsRSAVerify_PKCS1v15_rmf+0x218>
454c:	mov    %rcx,%r12
454f:	mov    0x0(%rbp),%ecx
4552:	xor    %ebp,%ecx
4554:	mov    $0xfffffff3,%eax
4559:	cmp    $0x52534130,%ecx
455f:	jne    4737 <ippsRSAVerify_PKCS1v15_rmf+0x237>
4565:	cmpl   $0x0,0xc(%rbp)
4569:	jle    475c <ippsRSAVerify_PKCS1v15_rmf+0x25c>
456f:	mov    %r9,%rbx
4572:	mov    (%r9),%ecx
4575:	mov    $0xfffffff2,%eax
457a:	test   %ecx,%ecx
457c:	je     4737 <ippsRSAVerify_PKCS1v15_rmf+0x237>
4582:	cmp    $0x7,%ecx
4585:	je     4737 <ippsRSAVerify_PKCS1v15_rmf+0x237>
458b:	test   %rdi,%rdi
458e:	je     4718 <ippsRSAVerify_PKCS1v15_rmf+0x218>
4594:	mov    %rdx,%r13
4597:	mov    $0xfffffff8,%eax
459c:	test   %rdx,%rdx
459f:	je     4737 <ippsRSAVerify_PKCS1v15_rmf+0x237>
45a5:	test   %r12,%r12
45a8:	je     4737 <ippsRSAVerify_PKCS1v15_rmf+0x237>
45ae:	test   %esi,%esi
45b0:	js     4779 <ippsRSAVerify_PKCS1v15_rmf+0x279>
45b6:	movl   $0x0,(%r12)
45be:	lea    0x70(%rsp),%rdx
45c3:	mov    %rbx,%rcx
45c6:	callq  39e0 <ippsHashMessage_rmf>
45cb:	mov    (%rbx),%eax
45cd:	mov    0x4(%rbx),%ecx
45d0:	mov    %rcx,0x48(%rsp)
45d5:	mov    %rax,0x38(%rsp)
45da:	mov    %rax,%rdi
45dd:	shl    $0x4,%rdi
45e1:	mov    %r14d,%eax
45e4:	neg    %eax
45e6:	and    $0x7,%eax
45e9:	add    %r14,%rax
45ec:	mov    0xc(%rbp),%ebx
45ef:	lea    0x3f(%rbx),%ecx
45f2:	sar    $0x1f,%ecx
45f5:	shr    $0x1a,%ecx
45f8:	lea    0x3f(%rbx,%rcx,1),%ecx
45fc:	sar    $0x6,%ecx
45ff:	movslq %ecx,%rcx
4602:	lea    0x8(%rax,%rcx,8),%rdx
4607:	lea    0x8(%rsp),%rsi
460c:	xor    $0x4249474e,%esi
4612:	mov    %esi,0x8(%rsp)
4616:	movabs $0x100000001,%r8
4620:	mov    %r8,0xc(%rsp)
4625:	mov    %ecx,0x14(%rsp)
4629:	mov    %rax,0x18(%rsp)
462e:	mov    %rdx,0x20(%rsp)
4633:	lea    0x50(%rsp),%r14
4638:	mov    %r14d,%edx
463b:	xor    $0x4249474e,%edx
4641:	mov    %edx,0x50(%rsp)
4645:	lea    0xca34(%rip),%rsi        # 11080 <pksc15_salt>
464c:	mov    %r8,0x54(%rsp)
4651:	lea    (%rcx,%rcx,1),%edx
4654:	movslq %edx,%rdx
4657:	lea    0x10(%rax,%rdx,8),%rax
465c:	mov    %ecx,0x5c(%rsp)
4660:	lea    0x8(%rax,%rcx,8),%rcx
4665:	mov    %rax,0x60(%rsp)
466a:	mov    %rcx,0x68(%rsp)
466f:	mov    %rdi,0x28(%rsp)
4674:	mov    0x8(%rdi,%rsi,1),%ecx
4678:	mov    %rcx,0x40(%rsp)
467d:	lea    0x10(%rax,%rdx,8),%r15
4682:	mov    %rbx,0x30(%rsp)
4687:	lea    0x7(%rbx),%eax
468a:	sar    $0x3,%eax
468d:	mov    %r13,%rdi
4690:	mov    %eax,%r13d
4693:	mov    %eax,%esi
4695:	mov    %r14,%rdx
4698:	callq  3800 <ippsSetOctString_BN>
469d:	lea    0x8(%rsp),%rbx
46a2:	mov    %rbx,%rdi
46a5:	mov    %r14,%rsi
46a8:	mov    0x48(%rsp),%r14
46ad:	mov    %rbp,%rdx
46b0:	mov    %r15,%rcx
46b3:	callq  a9e0 <gsRSApub_cipher>
46b8:	mov    0x20(%rsp),%rdi
46bd:	mov    %r13d,%esi
46c0:	mov    %rbx,%rdx
46c3:	callq  92c0 <ippsGetOctString_BN>
46c8:	mov    0x40(%rsp),%r8
46cd:	lea    0xb(%r8,%r14,1),%ecx
46d2:	mov    $0xfffffffa,%eax
46d7:	mov    %r13d,0x4(%rsp)
46dc:	cmp    %r13d,%ecx
46df:	jg     4737 <ippsRSAVerify_PKCS1v15_rmf+0x237>
46e1:	mov    0x18(%rsp),%rcx
46e6:	lea    (%r8,%r14,1),%eax
46ea:	mov    0x4(%rsp),%esi
46ee:	mov    %esi,%edx
46f0:	sub    %eax,%edx
46f2:	add    $0xfffffffd,%edx
46f5:	mov    %esi,%r11d
46f8:	mov    0x30(%rsp),%r15
46fd:	test   %r15d,%r15d
4700:	jle    488d <ippsRSAVerify_PKCS1v15_rmf+0x38d>
4706:	cmpl   $0x20,0x4(%rsp)
470b:	jae    4793 <ippsRSAVerify_PKCS1v15_rmf+0x293>
4711:	xor    %esi,%esi
4713:	jmpq   4881 <ippsRSAVerify_PKCS1v15_rmf+0x381>
4718:	mov    $0xfffffff8,%eax
471d:	mov    %fs:0x28,%rcx
4726:	cmp    0xb0(%rsp),%rcx
472e:	je     474a <ippsRSAVerify_PKCS1v15_rmf+0x24a>
4730:	jmp    4774 <ippsRSAVerify_PKCS1v15_rmf+0x274>
4732:	mov    $0xfffffff8,%eax
4737:	mov    %fs:0x28,%rcx
4740:	cmp    0xb0(%rsp),%rcx
4748:	jne    4774 <ippsRSAVerify_PKCS1v15_rmf+0x274>
474a:	add    $0xb8,%rsp
4751:	pop    %rbx
4752:	pop    %r12
4754:	pop    %r13
4756:	pop    %r14
4758:	pop    %r15
475a:	pop    %rbp
475b:	retq   
475c:	mov    $0xfffffc0b,%eax
4761:	mov    %fs:0x28,%rcx
476a:	cmp    0xb0(%rsp),%rcx
4772:	je     474a <ippsRSAVerify_PKCS1v15_rmf+0x24a>
4774:	callq  820 <__wrap___stack_chk_fail>
4779:	mov    $0xfffffff1,%eax
477e:	mov    %fs:0x28,%rcx
4787:	cmp    0xb0(%rsp),%rcx
478f:	je     474a <ippsRSAVerify_PKCS1v15_rmf+0x24a>
4791:	jmp    4774 <ippsRSAVerify_PKCS1v15_rmf+0x274>
4793:	mov    %r11d,%esi
4796:	and    $0xffffffe0,%esi
4799:	lea    -0x20(%rsi),%rdi
479d:	mov    %rdi,%rax
47a0:	shr    $0x5,%rax
47a4:	inc    %rax
47a7:	mov    %eax,%ebx
47a9:	and    $0x7,%ebx
47ac:	cmp    $0xe0,%rdi
47b3:	jae    47c5 <ippsRSAVerify_PKCS1v15_rmf+0x2c5>
47b5:	xor    %ebp,%ebp
47b7:	test   %rbx,%rbx
47ba:	jne    485e <ippsRSAVerify_PKCS1v15_rmf+0x35e>
47c0:	jmpq   487c <ippsRSAVerify_PKCS1v15_rmf+0x37c>
47c5:	mov    %rbx,%rdi
47c8:	sub    %rax,%rdi
47cb:	xor    %ebp,%ebp
47cd:	pcmpeqd %xmm0,%xmm0
47d1:	movdqu %xmm0,(%rcx,%rbp,1)
47d6:	movdqu %xmm0,0x10(%rcx,%rbp,1)
47dc:	movdqu %xmm0,0x20(%rcx,%rbp,1)
47e2:	movdqu %xmm0,0x30(%rcx,%rbp,1)
47e8:	movdqu %xmm0,0x40(%rcx,%rbp,1)
47ee:	movdqu %xmm0,0x50(%rcx,%rbp,1)
47f4:	movdqu %xmm0,0x60(%rcx,%rbp,1)
47fa:	movdqu %xmm0,0x70(%rcx,%rbp,1)
4800:	movdqu %xmm0,0x80(%rcx,%rbp,1)
4809:	movdqu %xmm0,0x90(%rcx,%rbp,1)
4812:	movdqu %xmm0,0xa0(%rcx,%rbp,1)
481b:	movdqu %xmm0,0xb0(%rcx,%rbp,1)
4824:	movdqu %xmm0,0xc0(%rcx,%rbp,1)
482d:	movdqu %xmm0,0xd0(%rcx,%rbp,1)
4836:	movdqu %xmm0,0xe0(%rcx,%rbp,1)
483f:	movdqu %xmm0,0xf0(%rcx,%rbp,1)
4848:	add    $0x100,%rbp
484f:	add    $0x8,%rdi
4853:	jne    47d1 <ippsRSAVerify_PKCS1v15_rmf+0x2d1>
4859:	test   %rbx,%rbx
485c:	je     487c <ippsRSAVerify_PKCS1v15_rmf+0x37c>
485e:	lea    0x10(%rbp,%rcx,1),%rax
4863:	neg    %rbx
4866:	pcmpeqd %xmm0,%xmm0
486a:	movdqu %xmm0,-0x10(%rax)
486f:	movdqu %xmm0,(%rax)
4873:	add    $0x20,%rax
4877:	inc    %rbx
487a:	jne    486a <ippsRSAVerify_PKCS1v15_rmf+0x36a>
487c:	cmp    %r11,%rsi
487f:	je     488d <ippsRSAVerify_PKCS1v15_rmf+0x38d>
4881:	movb   $0xff,(%rcx,%rsi,1)
4885:	inc    %rsi
4888:	cmp    %rsi,%r11
488b:	jne    4881 <ippsRSAVerify_PKCS1v15_rmf+0x381>
488d:	movw   $0x100,(%rcx)
4892:	movslq %edx,%r10
4895:	movb   $0x0,0x2(%rcx,%r10,1)
489b:	mov    0x38(%rsp),%rax
48a0:	test   %eax,%eax
48a2:	je     4934 <ippsRSAVerify_PKCS1v15_rmf+0x434>
48a8:	cmp    $0x7,%eax
48ab:	je     4934 <ippsRSAVerify_PKCS1v15_rmf+0x434>
48b1:	mov    0x28(%rsp),%rax
48b6:	lea    0xc7c3(%rip),%rdx        # 11080 <pksc15_salt>
48bd:	mov    (%rax,%rdx,1),%rsi
48c1:	lea    -0x1(%r8),%rax
48c5:	mov    %r8d,%edi
48c8:	and    $0x3,%edi
48cb:	cmp    $0x3,%rax
48cf:	jae    48da <ippsRSAVerify_PKCS1v15_rmf+0x3da>
48d1:	xor    %eax,%eax
48d3:	test   %rdi,%rdi
48d6:	jne    4917 <ippsRSAVerify_PKCS1v15_rmf+0x417>
48d8:	jmp    4934 <ippsRSAVerify_PKCS1v15_rmf+0x434>
48da:	lea    0x6(%r10,%rcx,1),%rdx
48df:	mov    %r8,%rbp
48e2:	sub    %rdi,%rbp
48e5:	xor    %eax,%eax
48e7:	movzbl (%rsi,%rax,1),%ebx
48eb:	mov    %bl,-0x3(%rdx,%rax,1)
48ef:	movzbl 0x1(%rsi,%rax,1),%ebx
48f4:	mov    %bl,-0x2(%rdx,%rax,1)
48f8:	movzbl 0x2(%rsi,%rax,1),%ebx
48fd:	mov    %bl,-0x1(%rdx,%rax,1)
4901:	movzbl 0x3(%rsi,%rax,1),%ebx
4906:	mov    %bl,(%rdx,%rax,1)
4909:	add    $0x4,%rax
490d:	cmp    %rax,%rbp
4910:	jne    48e7 <ippsRSAVerify_PKCS1v15_rmf+0x3e7>
4912:	test   %rdi,%rdi
4915:	je     4934 <ippsRSAVerify_PKCS1v15_rmf+0x434>
4917:	lea    (%rax,%r10,1),%rdx
491b:	lea    0x3(%rcx,%rdx,1),%rdx
4920:	add    %rax,%rsi
4923:	xor    %eax,%eax
4925:	movzbl (%rsi,%rax,1),%ebx
4929:	mov    %bl,(%rdx,%rax,1)
492c:	inc    %rax
492f:	cmp    %rax,%rdi
4932:	jne    4925 <ippsRSAVerify_PKCS1v15_rmf+0x425>
4934:	test   %r14d,%r14d
4937:	jle    4abe <ippsRSAVerify_PKCS1v15_rmf+0x5be>
493d:	lea    0x3(%rcx,%r10,1),%rbp
4942:	movslq %r8d,%r9
4945:	add    %r9,%rbp
4948:	cmp    $0x20,%r14d
494c:	jb     496f <ippsRSAVerify_PKCS1v15_rmf+0x46f>
494e:	lea    (%r9,%r10,1),%r8
4952:	lea    0x70(%rsp,%r14,1),%rax
4957:	cmp    %rax,%rbp
495a:	jae    49d7 <ippsRSAVerify_PKCS1v15_rmf+0x4d7>
495c:	lea    (%r8,%r14,1),%rax
4960:	lea    0x3(%rcx,%rax,1),%rax
4965:	lea    0x70(%rsp),%rdx
496a:	cmp    %rax,%rdx
496d:	jae    49d7 <ippsRSAVerify_PKCS1v15_rmf+0x4d7>
496f:	xor    %edi,%edi
4971:	mov    %rdi,%rax
4974:	not    %rax
4977:	add    %r14,%rax
497a:	mov    %r14,%rdx
497d:	and    $0x3,%rdx
4981:	je     4994 <ippsRSAVerify_PKCS1v15_rmf+0x494>
4983:	movzbl 0x70(%rsp,%rdi,1),%ebx
4988:	mov    %bl,0x0(%rbp,%rdi,1)
498c:	inc    %rdi
498f:	dec    %rdx
4992:	jne    4983 <ippsRSAVerify_PKCS1v15_rmf+0x483>
4994:	cmp    $0x3,%rax
4998:	jb     4abe <ippsRSAVerify_PKCS1v15_rmf+0x5be>
499e:	add    %r10,%r9
49a1:	lea    0x6(%rcx,%r9,1),%rax
49a6:	movzbl 0x70(%rsp,%rdi,1),%ecx
49ab:	mov    %cl,-0x3(%rax,%rdi,1)
49af:	movzbl 0x71(%rsp,%rdi,1),%ecx
49b4:	mov    %cl,-0x2(%rax,%rdi,1)
49b8:	movzbl 0x72(%rsp,%rdi,1),%ecx
49bd:	mov    %cl,-0x1(%rax,%rdi,1)
49c1:	movzbl 0x73(%rsp,%rdi,1),%ecx
49c6:	mov    %cl,(%rax,%rdi,1)
49c9:	add    $0x4,%rdi
49cd:	cmp    %rdi,%r14
49d0:	jne    49a6 <ippsRSAVerify_PKCS1v15_rmf+0x4a6>
49d2:	jmpq   4abe <ippsRSAVerify_PKCS1v15_rmf+0x5be>
49d7:	mov    %r14d,%edi
49da:	and    $0xffffffe0,%edi
49dd:	lea    -0x20(%rdi),%rdx
49e1:	mov    %rdx,%rsi
49e4:	shr    $0x5,%rsi
49e8:	inc    %rsi
49eb:	mov    %esi,%eax
49ed:	and    $0x3,%eax
49f0:	cmp    $0x60,%rdx
49f4:	jae    4a06 <ippsRSAVerify_PKCS1v15_rmf+0x506>
49f6:	xor    %esi,%esi
49f8:	test   %rax,%rax
49fb:	jne    4a8a <ippsRSAVerify_PKCS1v15_rmf+0x58a>
4a01:	jmpq   4ab5 <ippsRSAVerify_PKCS1v15_rmf+0x5b5>
4a06:	lea    0x73(%rcx,%r8,1),%rdx
4a0b:	mov    %rax,%rbx
4a0e:	sub    %rsi,%rbx
4a11:	xor    %esi,%esi
4a13:	movaps 0x70(%rsp,%rsi,1),%xmm0
4a18:	movaps 0x80(%rsp,%rsi,1),%xmm1
4a20:	movups %xmm0,-0x70(%rdx,%rsi,1)
4a25:	movups %xmm1,-0x60(%rdx,%rsi,1)
4a2a:	movaps 0x90(%rsp,%rsi,1),%xmm0
4a32:	movaps 0xa0(%rsp,%rsi,1),%xmm1
4a3a:	movups %xmm0,-0x50(%rdx,%rsi,1)
4a3f:	movups %xmm1,-0x40(%rdx,%rsi,1)
4a44:	movaps 0xb0(%rsp,%rsi,1),%xmm0
4a4c:	movaps 0xc0(%rsp,%rsi,1),%xmm1
4a54:	movups %xmm0,-0x30(%rdx,%rsi,1)
4a59:	movups %xmm1,-0x20(%rdx,%rsi,1)
4a5e:	movdqa 0xd0(%rsp,%rsi,1),%xmm0
4a67:	movdqa 0xe0(%rsp,%rsi,1),%xmm1
4a70:	movdqu %xmm0,-0x10(%rdx,%rsi,1)
4a76:	movdqu %xmm1,(%rdx,%rsi,1)
4a7b:	sub    $0xffffffffffffff80,%rsi
4a7f:	add    $0x4,%rbx
4a83:	jne    4a13 <ippsRSAVerify_PKCS1v15_rmf+0x513>
4a85:	test   %rax,%rax
4a88:	je     4ab5 <ippsRSAVerify_PKCS1v15_rmf+0x5b5>
4a8a:	lea    0x13(%rcx,%r8,1),%rdx
4a8f:	neg    %rax
4a92:	movdqa 0x70(%rsp,%rsi,1),%xmm0
4a98:	movdqa 0x80(%rsp,%rsi,1),%xmm1
4aa1:	movdqu %xmm0,-0x10(%rdx,%rsi,1)
4aa7:	movdqu %xmm1,(%rdx,%rsi,1)
4aac:	add    $0x20,%rsi
4ab0:	inc    %rax
4ab3:	jne    4a92 <ippsRSAVerify_PKCS1v15_rmf+0x592>
4ab5:	cmp    %r14,%rdi
4ab8:	jne    4971 <ippsRSAVerify_PKCS1v15_rmf+0x471>
4abe:	test   %r15d,%r15d
4ac1:	jle    4add <ippsRSAVerify_PKCS1v15_rmf+0x5dd>
4ac3:	mov    0x18(%rsp),%rcx
4ac8:	mov    0x20(%rsp),%rdx
4acd:	cmpl   $0x8,0x4(%rsp)
4ad2:	jae    4ae7 <ippsRSAVerify_PKCS1v15_rmf+0x5e7>
4ad4:	xor    %esi,%esi
4ad6:	xor    %eax,%eax
4ad8:	jmpq   4c23 <ippsRSAVerify_PKCS1v15_rmf+0x723>
4add:	mov    $0x1,%ecx
4ae2:	jmpq   4c3e <ippsRSAVerify_PKCS1v15_rmf+0x73e>
4ae7:	mov    %r11d,%esi
4aea:	and    $0xfffffff8,%esi
4aed:	lea    -0x8(%rsi),%rdi
4af1:	mov    %rdi,%rax
4af4:	shr    $0x3,%rax
4af8:	inc    %rax
4afb:	mov    %eax,%ebx
4afd:	and    $0x1,%ebx
4b00:	test   %rdi,%rdi
4b03:	je     4baf <ippsRSAVerify_PKCS1v15_rmf+0x6af>
4b09:	mov    %rbx,%rbp
4b0c:	sub    %rax,%rbp
4b0f:	pxor   %xmm0,%xmm0
4b13:	xor    %edi,%edi
4b15:	movdqa 0xa643(%rip),%xmm2        # f160 <SHA512_256_fixPS+0x780>
4b1d:	pxor   %xmm1,%xmm1
4b21:	pmovzxbd (%rdx,%rdi,1),%xmm3
4b27:	pmovzxbd 0x4(%rdx,%rdi,1),%xmm4
4b2e:	pmovzxbd (%rcx,%rdi,1),%xmm5
4b34:	pxor   %xmm3,%xmm5
4b38:	pmovzxbd 0x4(%rcx,%rdi,1),%xmm3
4b3f:	pxor   %xmm4,%xmm3
4b43:	pshufb %xmm2,%xmm5
4b48:	pmovzxbd %xmm5,%xmm4
4b4d:	por    %xmm0,%xmm4
4b51:	pshufb %xmm2,%xmm3
4b56:	pmovzxbd %xmm3,%xmm3
4b5b:	por    %xmm1,%xmm3
4b5f:	pmovzxbd 0x8(%rdx,%rdi,1),%xmm0
4b66:	pmovzxbd 0xc(%rdx,%rdi,1),%xmm1
4b6d:	pmovzxbd 0x8(%rcx,%rdi,1),%xmm5
4b74:	pxor   %xmm0,%xmm5
4b78:	pmovzxbd 0xc(%rcx,%rdi,1),%xmm6
4b7f:	pxor   %xmm1,%xmm6
4b83:	pshufb %xmm2,%xmm5
4b88:	pmovzxbd %xmm5,%xmm0
4b8d:	por    %xmm4,%xmm0
4b91:	pshufb %xmm2,%xmm6
4b96:	pmovzxbd %xmm6,%xmm1
4b9b:	por    %xmm3,%xmm1
4b9f:	add    $0x10,%rdi
4ba3:	add    $0x2,%rbp
4ba7:	jne    4b21 <ippsRSAVerify_PKCS1v15_rmf+0x621>
4bad:	jmp    4bb9 <ippsRSAVerify_PKCS1v15_rmf+0x6b9>
4baf:	pxor   %xmm0,%xmm0
4bb3:	xor    %edi,%edi
4bb5:	pxor   %xmm1,%xmm1
4bb9:	test   %rbx,%rbx
4bbc:	je     4c04 <ippsRSAVerify_PKCS1v15_rmf+0x704>
4bbe:	pmovzxbd 0x4(%rcx,%rdi,1),%xmm2
4bc5:	pmovzxbd 0x4(%rdx,%rdi,1),%xmm3
4bcc:	pxor   %xmm2,%xmm3
4bd0:	movdqa 0xa588(%rip),%xmm2        # f160 <SHA512_256_fixPS+0x780>
4bd8:	pshufb %xmm2,%xmm3
4bdd:	pmovzxbd %xmm3,%xmm3
4be2:	por    %xmm3,%xmm1
4be6:	pmovzxbd (%rcx,%rdi,1),%xmm3
4bec:	pmovzxbd (%rdx,%rdi,1),%xmm4
4bf2:	pxor   %xmm3,%xmm4
4bf6:	pshufb %xmm2,%xmm4
4bfb:	pmovzxbd %xmm4,%xmm2
4c00:	por    %xmm2,%xmm0
4c04:	por    %xmm1,%xmm0
4c08:	pshufd $0x4e,%xmm0,%xmm1
4c0d:	por    %xmm0,%xmm1
4c11:	pshufd $0xe5,%xmm1,%xmm0
4c16:	por    %xmm1,%xmm0
4c1a:	movd   %xmm0,%eax
4c1e:	cmp    %r11,%rsi
4c21:	je     4c37 <ippsRSAVerify_PKCS1v15_rmf+0x737>
4c23:	movzbl (%rcx,%rsi,1),%ebx
4c27:	xor    (%rdx,%rsi,1),%bl
4c2a:	movzbl %bl,%edi
4c2d:	or     %edi,%eax
4c2f:	inc    %rsi
4c32:	cmp    %rsi,%r11
4c35:	jne    4c23 <ippsRSAVerify_PKCS1v15_rmf+0x723>
4c37:	xor    %ecx,%ecx
4c39:	test   %eax,%eax
4c3b:	sete   %cl
4c3e:	mov    %ecx,(%r12)
4c42:	xor    %eax,%eax
4c44:	mov    %fs:0x28,%rcx
4c4d:	cmp    0xb0(%rsp),%rcx
4c55:	je     474a <ippsRSAVerify_PKCS1v15_rmf+0x24a>
4c5b:	jmpq   4774 <ippsRSAVerify_PKCS1v15_rmf+0x274>
4c60:	(bad)  
4c61:	(bad)  
4c62:	add    $0x1020304,%eax
4c67:	add    %cl,(%rdi)
4c69:	(bad)  
4c6a:	or     $0x90a0b0c,%eax
4c6f:	.byte 0x8
4c70:	endbr64 
4c74:	push   %rbx
4c75:	push   %r12
4c77:	push   %r13
4c79:	push   %r14
4c7b:	push   %r15
4c7d:	push   %rbp
4c7e:	sub    $0x98,%rsp
4c85:	movslq %edx,%rdx
4c88:	mov    %rdx,0x80(%rsp)
4c90:	mov    %rcx,%rbp
4c93:	nopl   0x0(%rax,%rax,1)
4c9b:	nopl   0x0(%rax,%rax,1)
4ca0:	movdqu -0x48(%rip),%xmm4        # 4c60 <pByteSwp>
4ca8:	movdqu (%rsi),%xmm0
4cac:	pshufb %xmm4,%xmm0
4cb1:	movdqa %xmm0,(%rsp)
4cb6:	movdqu 0x10(%rsi),%xmm1
4cbb:	pshufb %xmm4,%xmm1
4cc0:	movdqa %xmm1,0x10(%rsp)
4cc6:	movdqu 0x20(%rsi),%xmm2
4ccb:	pshufb %xmm4,%xmm2
4cd0:	movdqa %xmm2,0x20(%rsp)
4cd6:	movdqu 0x30(%rsi),%xmm3
4cdb:	pshufb %xmm4,%xmm3
4ce0:	movdqa %xmm3,0x30(%rsp)
4ce6:	movdqu 0x40(%rsi),%xmm0
4ceb:	pshufb %xmm4,%xmm0
4cf0:	movdqa %xmm0,0x40(%rsp)
4cf6:	movdqu 0x50(%rsi),%xmm1
4cfb:	pshufb %xmm4,%xmm1
4d00:	movdqa %xmm1,0x50(%rsp)
4d06:	movdqu 0x60(%rsi),%xmm2
4d0b:	pshufb %xmm4,%xmm2
4d10:	movdqa %xmm2,0x60(%rsp)
4d16:	movdqu 0x70(%rsi),%xmm3
4d1b:	pshufb %xmm4,%xmm3
4d20:	movdqa %xmm3,0x70(%rsp)
4d26:	mov    (%rdi),%r8
4d29:	mov    0x8(%rdi),%r9
4d2d:	mov    0x10(%rdi),%r10
4d31:	mov    0x18(%rdi),%r11
4d35:	mov    0x20(%rdi),%r12
4d39:	mov    0x28(%rdi),%r13
4d3d:	mov    0x30(%rdi),%r14
4d41:	mov    0x38(%rdi),%r15
4d45:	add    0x0(%rbp),%r15
4d49:	add    (%rsp),%r15
4d4d:	mov    %r12,%rcx
4d50:	mov    %r12,%rdx
4d53:	ror    $0xe,%rcx
4d57:	mov    %r12,%rbx
4d5a:	push   %r12
4d5c:	not    %rdx
4d5f:	ror    $0x12,%r12
4d63:	and    %r13,%rbx
4d66:	and    %r14,%rdx
4d69:	xor    %r12,%rcx
4d6c:	ror    $0x17,%r12
4d70:	xor    %rbx,%rdx
4d73:	xor    %r12,%rcx
4d76:	pop    %r12
4d78:	lea    (%rcx,%rdx,1),%rbx
4d7c:	add    %rbx,%r15
4d7f:	add    %r15,%r11
4d82:	mov    %r8,%rcx
4d85:	mov    %r8,%rdx
4d88:	ror    $0x1c,%rcx
4d8c:	mov    %r8,%rbx
4d8f:	push   %r8
4d91:	xor    %r9,%rdx
4d94:	ror    $0x22,%r8
4d98:	and    %r9,%rbx
4d9b:	and    %r10,%rdx
4d9e:	xor    %r8,%rcx
4da1:	ror    $0x5,%r8
4da5:	xor    %rbx,%rdx
4da8:	xor    %r8,%rcx
4dab:	pop    %r8
4dad:	lea    (%rcx,%rdx,1),%rbx
4db1:	add    %rbx,%r15
4db4:	mov    0x8(%rsp),%rax
4db9:	mov    0x70(%rsp),%rbx
4dbe:	shr    $0x7,%rax
4dc2:	shr    $0x6,%rbx
4dc6:	mov    0x8(%rsp),%rcx
4dcb:	mov    0x70(%rsp),%rdx
4dd0:	ror    %rcx
4dd3:	ror    $0x13,%rdx
4dd7:	xor    %rcx,%rax
4dda:	xor    %rdx,%rbx
4ddd:	ror    $0x7,%rcx
4de1:	ror    $0x2a,%rdx
4de5:	xor    %rcx,%rax
4de8:	xor    %rdx,%rbx
4deb:	add    (%rsp),%rax
4def:	add    0x48(%rsp),%rbx
4df4:	add    %rbx,%rax
4df7:	mov    %rax,(%rsp)
4dfb:	add    0x8(%rbp),%r14
4dff:	add    0x8(%rsp),%r14
4e04:	mov    %r11,%rcx
4e07:	mov    %r11,%rdx
4e0a:	ror    $0xe,%rcx
4e0e:	mov    %r11,%rbx
4e11:	push   %r11
4e13:	not    %rdx
4e16:	ror    $0x12,%r11
4e1a:	and    %r12,%rbx
4e1d:	and    %r13,%rdx
4e20:	xor    %r11,%rcx
4e23:	ror    $0x17,%r11
4e27:	xor    %rbx,%rdx
4e2a:	xor    %r11,%rcx
4e2d:	pop    %r11
4e2f:	lea    (%rcx,%rdx,1),%rbx
4e33:	add    %rbx,%r14
4e36:	add    %r14,%r10
4e39:	mov    %r15,%rcx
4e3c:	mov    %r15,%rdx
4e3f:	ror    $0x1c,%rcx
4e43:	mov    %r15,%rbx
4e46:	push   %r15
4e48:	xor    %r8,%rdx
4e4b:	ror    $0x22,%r15
4e4f:	and    %r8,%rbx
4e52:	and    %r9,%rdx
4e55:	xor    %r15,%rcx
4e58:	ror    $0x5,%r15
4e5c:	xor    %rbx,%rdx
4e5f:	xor    %r15,%rcx
4e62:	pop    %r15
4e64:	lea    (%rcx,%rdx,1),%rbx
4e68:	add    %rbx,%r14
4e6b:	mov    0x10(%rsp),%rax
4e70:	mov    0x78(%rsp),%rbx
4e75:	shr    $0x7,%rax
4e79:	shr    $0x6,%rbx
4e7d:	mov    0x10(%rsp),%rcx
4e82:	mov    0x78(%rsp),%rdx
4e87:	ror    %rcx
4e8a:	ror    $0x13,%rdx
4e8e:	xor    %rcx,%rax
4e91:	xor    %rdx,%rbx
4e94:	ror    $0x7,%rcx
4e98:	ror    $0x2a,%rdx
4e9c:	xor    %rcx,%rax
4e9f:	xor    %rdx,%rbx
4ea2:	add    0x8(%rsp),%rax
4ea7:	add    0x50(%rsp),%rbx
4eac:	add    %rbx,%rax
4eaf:	mov    %rax,0x8(%rsp)
4eb4:	add    0x10(%rbp),%r13
4eb8:	add    0x10(%rsp),%r13
4ebd:	mov    %r10,%rcx
4ec0:	mov    %r10,%rdx
4ec3:	ror    $0xe,%rcx
4ec7:	mov    %r10,%rbx
4eca:	push   %r10
4ecc:	not    %rdx
4ecf:	ror    $0x12,%r10
4ed3:	and    %r11,%rbx
4ed6:	and    %r12,%rdx
4ed9:	xor    %r10,%rcx
4edc:	ror    $0x17,%r10
4ee0:	xor    %rbx,%rdx
4ee3:	xor    %r10,%rcx
4ee6:	pop    %r10
4ee8:	lea    (%rcx,%rdx,1),%rbx
4eec:	add    %rbx,%r13
4eef:	add    %r13,%r9
4ef2:	mov    %r14,%rcx
4ef5:	mov    %r14,%rdx
4ef8:	ror    $0x1c,%rcx
4efc:	mov    %r14,%rbx
4eff:	push   %r14
4f01:	xor    %r15,%rdx
4f04:	ror    $0x22,%r14
4f08:	and    %r15,%rbx
4f0b:	and    %r8,%rdx
4f0e:	xor    %r14,%rcx
4f11:	ror    $0x5,%r14
4f15:	xor    %rbx,%rdx
4f18:	xor    %r14,%rcx
4f1b:	pop    %r14
4f1d:	lea    (%rcx,%rdx,1),%rbx
4f21:	add    %rbx,%r13
4f24:	mov    0x18(%rsp),%rax
4f29:	mov    (%rsp),%rbx
4f2d:	shr    $0x7,%rax
4f31:	shr    $0x6,%rbx
4f35:	mov    0x18(%rsp),%rcx
4f3a:	mov    (%rsp),%rdx
4f3e:	ror    %rcx
4f41:	ror    $0x13,%rdx
4f45:	xor    %rcx,%rax
4f48:	xor    %rdx,%rbx
4f4b:	ror    $0x7,%rcx
4f4f:	ror    $0x2a,%rdx
4f53:	xor    %rcx,%rax
4f56:	xor    %rdx,%rbx
4f59:	add    0x10(%rsp),%rax
4f5e:	add    0x58(%rsp),%rbx
4f63:	add    %rbx,%rax
4f66:	mov    %rax,0x10(%rsp)
4f6b:	add    0x18(%rbp),%r12
4f6f:	add    0x18(%rsp),%r12
4f74:	mov    %r9,%rcx
4f77:	mov    %r9,%rdx
4f7a:	ror    $0xe,%rcx
4f7e:	mov    %r9,%rbx
4f81:	push   %r9
4f83:	not    %rdx
4f86:	ror    $0x12,%r9
4f8a:	and    %r10,%rbx
4f8d:	and    %r11,%rdx
4f90:	xor    %r9,%rcx
4f93:	ror    $0x17,%r9
4f97:	xor    %rbx,%rdx
4f9a:	xor    %r9,%rcx
4f9d:	pop    %r9
4f9f:	lea    (%rcx,%rdx,1),%rbx
4fa3:	add    %rbx,%r12
4fa6:	add    %r12,%r8
4fa9:	mov    %r13,%rcx
4fac:	mov    %r13,%rdx
4faf:	ror    $0x1c,%rcx
4fb3:	mov    %r13,%rbx
4fb6:	push   %r13
4fb8:	xor    %r14,%rdx
4fbb:	ror    $0x22,%r13
4fbf:	and    %r14,%rbx
4fc2:	and    %r15,%rdx
4fc5:	xor    %r13,%rcx
4fc8:	ror    $0x5,%r13
4fcc:	xor    %rbx,%rdx
4fcf:	xor    %r13,%rcx
4fd2:	pop    %r13
4fd4:	lea    (%rcx,%rdx,1),%rbx
4fd8:	add    %rbx,%r12
4fdb:	mov    0x20(%rsp),%rax
4fe0:	mov    0x8(%rsp),%rbx
4fe5:	shr    $0x7,%rax
4fe9:	shr    $0x6,%rbx
4fed:	mov    0x20(%rsp),%rcx
4ff2:	mov    0x8(%rsp),%rdx
4ff7:	ror    %rcx
4ffa:	ror    $0x13,%rdx
4ffe:	xor    %rcx,%rax
5001:	xor    %rdx,%rbx
5004:	ror    $0x7,%rcx
5008:	ror    $0x2a,%rdx
500c:	xor    %rcx,%rax
500f:	xor    %rdx,%rbx
5012:	add    0x18(%rsp),%rax
5017:	add    0x60(%rsp),%rbx
501c:	add    %rbx,%rax
501f:	mov    %rax,0x18(%rsp)
5024:	add    0x20(%rbp),%r11
5028:	add    0x20(%rsp),%r11
502d:	mov    %r8,%rcx
5030:	mov    %r8,%rdx
5033:	ror    $0xe,%rcx
5037:	mov    %r8,%rbx
503a:	push   %r8
503c:	not    %rdx
503f:	ror    $0x12,%r8
5043:	and    %r9,%rbx
5046:	and    %r10,%rdx
5049:	xor    %r8,%rcx
504c:	ror    $0x17,%r8
5050:	xor    %rbx,%rdx
5053:	xor    %r8,%rcx
5056:	pop    %r8
5058:	lea    (%rcx,%rdx,1),%rbx
505c:	add    %rbx,%r11
505f:	add    %r11,%r15
5062:	mov    %r12,%rcx
5065:	mov    %r12,%rdx
5068:	ror    $0x1c,%rcx
506c:	mov    %r12,%rbx
506f:	push   %r12
5071:	xor    %r13,%rdx
5074:	ror    $0x22,%r12
5078:	and    %r13,%rbx
507b:	and    %r14,%rdx
507e:	xor    %r12,%rcx
5081:	ror    $0x5,%r12
5085:	xor    %rbx,%rdx
5088:	xor    %r12,%rcx
508b:	pop    %r12
508d:	lea    (%rcx,%rdx,1),%rbx
5091:	add    %rbx,%r11
5094:	mov    0x28(%rsp),%rax
5099:	mov    0x10(%rsp),%rbx
509e:	shr    $0x7,%rax
50a2:	shr    $0x6,%rbx
50a6:	mov    0x28(%rsp),%rcx
50ab:	mov    0x10(%rsp),%rdx
50b0:	ror    %rcx
50b3:	ror    $0x13,%rdx
50b7:	xor    %rcx,%rax
50ba:	xor    %rdx,%rbx
50bd:	ror    $0x7,%rcx
50c1:	ror    $0x2a,%rdx
50c5:	xor    %rcx,%rax
50c8:	xor    %rdx,%rbx
50cb:	add    0x20(%rsp),%rax
50d0:	add    0x68(%rsp),%rbx
50d5:	add    %rbx,%rax
50d8:	mov    %rax,0x20(%rsp)
50dd:	add    0x28(%rbp),%r10
50e1:	add    0x28(%rsp),%r10
50e6:	mov    %r15,%rcx
50e9:	mov    %r15,%rdx
50ec:	ror    $0xe,%rcx
50f0:	mov    %r15,%rbx
50f3:	push   %r15
50f5:	not    %rdx
50f8:	ror    $0x12,%r15
50fc:	and    %r8,%rbx
50ff:	and    %r9,%rdx
5102:	xor    %r15,%rcx
5105:	ror    $0x17,%r15
5109:	xor    %rbx,%rdx
510c:	xor    %r15,%rcx
510f:	pop    %r15
5111:	lea    (%rcx,%rdx,1),%rbx
5115:	add    %rbx,%r10
5118:	add    %r10,%r14
511b:	mov    %r11,%rcx
511e:	mov    %r11,%rdx
5121:	ror    $0x1c,%rcx
5125:	mov    %r11,%rbx
5128:	push   %r11
512a:	xor    %r12,%rdx
512d:	ror    $0x22,%r11
5131:	and    %r12,%rbx
5134:	and    %r13,%rdx
5137:	xor    %r11,%rcx
513a:	ror    $0x5,%r11
513e:	xor    %rbx,%rdx
5141:	xor    %r11,%rcx
5144:	pop    %r11
5146:	lea    (%rcx,%rdx,1),%rbx
514a:	add    %rbx,%r10
514d:	mov    0x30(%rsp),%rax
5152:	mov    0x18(%rsp),%rbx
5157:	shr    $0x7,%rax
515b:	shr    $0x6,%rbx
515f:	mov    0x30(%rsp),%rcx
5164:	mov    0x18(%rsp),%rdx
5169:	ror    %rcx
516c:	ror    $0x13,%rdx
5170:	xor    %rcx,%rax
5173:	xor    %rdx,%rbx
5176:	ror    $0x7,%rcx
517a:	ror    $0x2a,%rdx
517e:	xor    %rcx,%rax
5181:	xor    %rdx,%rbx
5184:	add    0x28(%rsp),%rax
5189:	add    0x70(%rsp),%rbx
518e:	add    %rbx,%rax
5191:	mov    %rax,0x28(%rsp)
5196:	add    0x30(%rbp),%r9
519a:	add    0x30(%rsp),%r9
519f:	mov    %r14,%rcx
51a2:	mov    %r14,%rdx
51a5:	ror    $0xe,%rcx
51a9:	mov    %r14,%rbx
51ac:	push   %r14
51ae:	not    %rdx
51b1:	ror    $0x12,%r14
51b5:	and    %r15,%rbx
51b8:	and    %r8,%rdx
51bb:	xor    %r14,%rcx
51be:	ror    $0x17,%r14
51c2:	xor    %rbx,%rdx
51c5:	xor    %r14,%rcx
51c8:	pop    %r14
51ca:	lea    (%rcx,%rdx,1),%rbx
51ce:	add    %rbx,%r9
51d1:	add    %r9,%r13
51d4:	mov    %r10,%rcx
51d7:	mov    %r10,%rdx
51da:	ror    $0x1c,%rcx
51de:	mov    %r10,%rbx
51e1:	push   %r10
51e3:	xor    %r11,%rdx
51e6:	ror    $0x22,%r10
51ea:	and    %r11,%rbx
51ed:	and    %r12,%rdx
51f0:	xor    %r10,%rcx
51f3:	ror    $0x5,%r10
51f7:	xor    %rbx,%rdx
51fa:	xor    %r10,%rcx
51fd:	pop    %r10
51ff:	lea    (%rcx,%rdx,1),%rbx
5203:	add    %rbx,%r9
5206:	mov    0x38(%rsp),%rax
520b:	mov    0x20(%rsp),%rbx
5210:	shr    $0x7,%rax
5214:	shr    $0x6,%rbx
5218:	mov    0x38(%rsp),%rcx
521d:	mov    0x20(%rsp),%rdx
5222:	ror    %rcx
5225:	ror    $0x13,%rdx
5229:	xor    %rcx,%rax
522c:	xor    %rdx,%rbx
522f:	ror    $0x7,%rcx
5233:	ror    $0x2a,%rdx
5237:	xor    %rcx,%rax
523a:	xor    %rdx,%rbx
523d:	add    0x30(%rsp),%rax
5242:	add    0x78(%rsp),%rbx
5247:	add    %rbx,%rax
524a:	mov    %rax,0x30(%rsp)
524f:	add    0x38(%rbp),%r8
5253:	add    0x38(%rsp),%r8
5258:	mov    %r13,%rcx
525b:	mov    %r13,%rdx
525e:	ror    $0xe,%rcx
5262:	mov    %r13,%rbx
5265:	push   %r13
5267:	not    %rdx
526a:	ror    $0x12,%r13
526e:	and    %r14,%rbx
5271:	and    %r15,%rdx
5274:	xor    %r13,%rcx
5277:	ror    $0x17,%r13
527b:	xor    %rbx,%rdx
527e:	xor    %r13,%rcx
5281:	pop    %r13
5283:	lea    (%rcx,%rdx,1),%rbx
5287:	add    %rbx,%r8
528a:	add    %r8,%r12
528d:	mov    %r9,%rcx
5290:	mov    %r9,%rdx
5293:	ror    $0x1c,%rcx
5297:	mov    %r9,%rbx
529a:	push   %r9
529c:	xor    %r10,%rdx
529f:	ror    $0x22,%r9
52a3:	and    %r10,%rbx
52a6:	and    %r11,%rdx
52a9:	xor    %r9,%rcx
52ac:	ror    $0x5,%r9
52b0:	xor    %rbx,%rdx
52b3:	xor    %r9,%rcx
52b6:	pop    %r9
52b8:	lea    (%rcx,%rdx,1),%rbx
52bc:	add    %rbx,%r8
52bf:	mov    0x40(%rsp),%rax
52c4:	mov    0x28(%rsp),%rbx
52c9:	shr    $0x7,%rax
52cd:	shr    $0x6,%rbx
52d1:	mov    0x40(%rsp),%rcx
52d6:	mov    0x28(%rsp),%rdx
52db:	ror    %rcx
52de:	ror    $0x13,%rdx
52e2:	xor    %rcx,%rax
52e5:	xor    %rdx,%rbx
52e8:	ror    $0x7,%rcx
52ec:	ror    $0x2a,%rdx
52f0:	xor    %rcx,%rax
52f3:	xor    %rdx,%rbx
52f6:	add    0x38(%rsp),%rax
52fb:	add    (%rsp),%rbx
52ff:	add    %rbx,%rax
5302:	mov    %rax,0x38(%rsp)
5307:	add    0x40(%rbp),%r15
530b:	add    0x40(%rsp),%r15
5310:	mov    %r12,%rcx
5313:	mov    %r12,%rdx
5316:	ror    $0xe,%rcx
531a:	mov    %r12,%rbx
531d:	push   %r12
531f:	not    %rdx
5322:	ror    $0x12,%r12
5326:	and    %r13,%rbx
5329:	and    %r14,%rdx
532c:	xor    %r12,%rcx
532f:	ror    $0x17,%r12
5333:	xor    %rbx,%rdx
5336:	xor    %r12,%rcx
5339:	pop    %r12
533b:	lea    (%rcx,%rdx,1),%rbx
533f:	add    %rbx,%r15
5342:	add    %r15,%r11
5345:	mov    %r8,%rcx
5348:	mov    %r8,%rdx
534b:	ror    $0x1c,%rcx
534f:	mov    %r8,%rbx
5352:	push   %r8
5354:	xor    %r9,%rdx
5357:	ror    $0x22,%r8
535b:	and    %r9,%rbx
535e:	and    %r10,%rdx
5361:	xor    %r8,%rcx
5364:	ror    $0x5,%r8
5368:	xor    %rbx,%rdx
536b:	xor    %r8,%rcx
536e:	pop    %r8
5370:	lea    (%rcx,%rdx,1),%rbx
5374:	add    %rbx,%r15
5377:	mov    0x48(%rsp),%rax
537c:	mov    0x30(%rsp),%rbx
5381:	shr    $0x7,%rax
5385:	shr    $0x6,%rbx
5389:	mov    0x48(%rsp),%rcx
538e:	mov    0x30(%rsp),%rdx
5393:	ror    %rcx
5396:	ror    $0x13,%rdx
539a:	xor    %rcx,%rax
539d:	xor    %rdx,%rbx
53a0:	ror    $0x7,%rcx
53a4:	ror    $0x2a,%rdx
53a8:	xor    %rcx,%rax
53ab:	xor    %rdx,%rbx
53ae:	add    0x40(%rsp),%rax
53b3:	add    0x8(%rsp),%rbx
53b8:	add    %rbx,%rax
53bb:	mov    %rax,0x40(%rsp)
53c0:	add    0x48(%rbp),%r14
53c4:	add    0x48(%rsp),%r14
53c9:	mov    %r11,%rcx
53cc:	mov    %r11,%rdx
53cf:	ror    $0xe,%rcx
53d3:	mov    %r11,%rbx
53d6:	push   %r11
53d8:	not    %rdx
53db:	ror    $0x12,%r11
53df:	and    %r12,%rbx
53e2:	and    %r13,%rdx
53e5:	xor    %r11,%rcx
53e8:	ror    $0x17,%r11
53ec:	xor    %rbx,%rdx
53ef:	xor    %r11,%rcx
53f2:	pop    %r11
53f4:	lea    (%rcx,%rdx,1),%rbx
53f8:	add    %rbx,%r14
53fb:	add    %r14,%r10
53fe:	mov    %r15,%rcx
5401:	mov    %r15,%rdx
5404:	ror    $0x1c,%rcx
5408:	mov    %r15,%rbx
540b:	push   %r15
540d:	xor    %r8,%rdx
5410:	ror    $0x22,%r15
5414:	and    %r8,%rbx
5417:	and    %r9,%rdx
541a:	xor    %r15,%rcx
541d:	ror    $0x5,%r15
5421:	xor    %rbx,%rdx
5424:	xor    %r15,%rcx
5427:	pop    %r15
5429:	lea    (%rcx,%rdx,1),%rbx
542d:	add    %rbx,%r14
5430:	mov    0x50(%rsp),%rax
5435:	mov    0x38(%rsp),%rbx
543a:	shr    $0x7,%rax
543e:	shr    $0x6,%rbx
5442:	mov    0x50(%rsp),%rcx
5447:	mov    0x38(%rsp),%rdx
544c:	ror    %rcx
544f:	ror    $0x13,%rdx
5453:	xor    %rcx,%rax
5456:	xor    %rdx,%rbx
5459:	ror    $0x7,%rcx
545d:	ror    $0x2a,%rdx
5461:	xor    %rcx,%rax
5464:	xor    %rdx,%rbx
5467:	add    0x48(%rsp),%rax
546c:	add    0x10(%rsp),%rbx
5471:	add    %rbx,%rax
5474:	mov    %rax,0x48(%rsp)
5479:	add    0x50(%rbp),%r13
547d:	add    0x50(%rsp),%r13
5482:	mov    %r10,%rcx
5485:	mov    %r10,%rdx
5488:	ror    $0xe,%rcx
548c:	mov    %r10,%rbx
548f:	push   %r10
5491:	not    %rdx
5494:	ror    $0x12,%r10
5498:	and    %r11,%rbx
549b:	and    %r12,%rdx
549e:	xor    %r10,%rcx
54a1:	ror    $0x17,%r10
54a5:	xor    %rbx,%rdx
54a8:	xor    %r10,%rcx
54ab:	pop    %r10
54ad:	lea    (%rcx,%rdx,1),%rbx
54b1:	add    %rbx,%r13
54b4:	add    %r13,%r9
54b7:	mov    %r14,%rcx
54ba:	mov    %r14,%rdx
54bd:	ror    $0x1c,%rcx
54c1:	mov    %r14,%rbx
54c4:	push   %r14
54c6:	xor    %r15,%rdx
54c9:	ror    $0x22,%r14
54cd:	and    %r15,%rbx
54d0:	and    %r8,%rdx
54d3:	xor    %r14,%rcx
54d6:	ror    $0x5,%r14
54da:	xor    %rbx,%rdx
54dd:	xor    %r14,%rcx
54e0:	pop    %r14
54e2:	lea    (%rcx,%rdx,1),%rbx
54e6:	add    %rbx,%r13
54e9:	mov    0x58(%rsp),%rax
54ee:	mov    0x40(%rsp),%rbx
54f3:	shr    $0x7,%rax
54f7:	shr    $0x6,%rbx
54fb:	mov    0x58(%rsp),%rcx
5500:	mov    0x40(%rsp),%rdx
5505:	ror    %rcx
5508:	ror    $0x13,%rdx
550c:	xor    %rcx,%rax
550f:	xor    %rdx,%rbx
5512:	ror    $0x7,%rcx
5516:	ror    $0x2a,%rdx
551a:	xor    %rcx,%rax
551d:	xor    %rdx,%rbx
5520:	add    0x50(%rsp),%rax
5525:	add    0x18(%rsp),%rbx
552a:	add    %rbx,%rax
552d:	mov    %rax,0x50(%rsp)
5532:	add    0x58(%rbp),%r12
5536:	add    0x58(%rsp),%r12
553b:	mov    %r9,%rcx
553e:	mov    %r9,%rdx
5541:	ror    $0xe,%rcx
5545:	mov    %r9,%rbx
5548:	push   %r9
554a:	not    %rdx
554d:	ror    $0x12,%r9
5551:	and    %r10,%rbx
5554:	and    %r11,%rdx
5557:	xor    %r9,%rcx
555a:	ror    $0x17,%r9
555e:	xor    %rbx,%rdx
5561:	xor    %r9,%rcx
5564:	pop    %r9
5566:	lea    (%rcx,%rdx,1),%rbx
556a:	add    %rbx,%r12
556d:	add    %r12,%r8
5570:	mov    %r13,%rcx
5573:	mov    %r13,%rdx
5576:	ror    $0x1c,%rcx
557a:	mov    %r13,%rbx
557d:	push   %r13
557f:	xor    %r14,%rdx
5582:	ror    $0x22,%r13
5586:	and    %r14,%rbx
5589:	and    %r15,%rdx
558c:	xor    %r13,%rcx
558f:	ror    $0x5,%r13
5593:	xor    %rbx,%rdx
5596:	xor    %r13,%rcx
5599:	pop    %r13
559b:	lea    (%rcx,%rdx,1),%rbx
559f:	add    %rbx,%r12
55a2:	mov    0x60(%rsp),%rax
55a7:	mov    0x48(%rsp),%rbx
55ac:	shr    $0x7,%rax
55b0:	shr    $0x6,%rbx
55b4:	mov    0x60(%rsp),%rcx
55b9:	mov    0x48(%rsp),%rdx
55be:	ror    %rcx
55c1:	ror    $0x13,%rdx
55c5:	xor    %rcx,%rax
55c8:	xor    %rdx,%rbx
55cb:	ror    $0x7,%rcx
55cf:	ror    $0x2a,%rdx
55d3:	xor    %rcx,%rax
55d6:	xor    %rdx,%rbx
55d9:	add    0x58(%rsp),%rax
55de:	add    0x20(%rsp),%rbx
55e3:	add    %rbx,%rax
55e6:	mov    %rax,0x58(%rsp)
55eb:	add    0x60(%rbp),%r11
55ef:	add    0x60(%rsp),%r11
55f4:	mov    %r8,%rcx
55f7:	mov    %r8,%rdx
55fa:	ror    $0xe,%rcx
55fe:	mov    %r8,%rbx
5601:	push   %r8
5603:	not    %rdx
5606:	ror    $0x12,%r8
560a:	and    %r9,%rbx
560d:	and    %r10,%rdx
5610:	xor    %r8,%rcx
5613:	ror    $0x17,%r8
5617:	xor    %rbx,%rdx
561a:	xor    %r8,%rcx
561d:	pop    %r8
561f:	lea    (%rcx,%rdx,1),%rbx
5623:	add    %rbx,%r11
5626:	add    %r11,%r15
5629:	mov    %r12,%rcx
562c:	mov    %r12,%rdx
562f:	ror    $0x1c,%rcx
5633:	mov    %r12,%rbx
5636:	push   %r12
5638:	xor    %r13,%rdx
563b:	ror    $0x22,%r12
563f:	and    %r13,%rbx
5642:	and    %r14,%rdx
5645:	xor    %r12,%rcx
5648:	ror    $0x5,%r12
564c:	xor    %rbx,%rdx
564f:	xor    %r12,%rcx
5652:	pop    %r12
5654:	lea    (%rcx,%rdx,1),%rbx
5658:	add    %rbx,%r11
565b:	mov    0x68(%rsp),%rax
5660:	mov    0x50(%rsp),%rbx
5665:	shr    $0x7,%rax
5669:	shr    $0x6,%rbx
566d:	mov    0x68(%rsp),%rcx
5672:	mov    0x50(%rsp),%rdx
5677:	ror    %rcx
567a:	ror    $0x13,%rdx
567e:	xor    %rcx,%rax
5681:	xor    %rdx,%rbx
5684:	ror    $0x7,%rcx
5688:	ror    $0x2a,%rdx
568c:	xor    %rcx,%rax
568f:	xor    %rdx,%rbx
5692:	add    0x60(%rsp),%rax
5697:	add    0x28(%rsp),%rbx
569c:	add    %rbx,%rax
569f:	mov    %rax,0x60(%rsp)
56a4:	add    0x68(%rbp),%r10
56a8:	add    0x68(%rsp),%r10
56ad:	mov    %r15,%rcx
56b0:	mov    %r15,%rdx
56b3:	ror    $0xe,%rcx
56b7:	mov    %r15,%rbx
56ba:	push   %r15
56bc:	not    %rdx
56bf:	ror    $0x12,%r15
56c3:	and    %r8,%rbx
56c6:	and    %r9,%rdx
56c9:	xor    %r15,%rcx
56cc:	ror    $0x17,%r15
56d0:	xor    %rbx,%rdx
56d3:	xor    %r15,%rcx
56d6:	pop    %r15
56d8:	lea    (%rcx,%rdx,1),%rbx
56dc:	add    %rbx,%r10
56df:	add    %r10,%r14
56e2:	mov    %r11,%rcx
56e5:	mov    %r11,%rdx
56e8:	ror    $0x1c,%rcx
56ec:	mov    %r11,%rbx
56ef:	push   %r11
56f1:	xor    %r12,%rdx
56f4:	ror    $0x22,%r11
56f8:	and    %r12,%rbx
56fb:	and    %r13,%rdx
56fe:	xor    %r11,%rcx
5701:	ror    $0x5,%r11
5705:	xor    %rbx,%rdx
5708:	xor    %r11,%rcx
570b:	pop    %r11
570d:	lea    (%rcx,%rdx,1),%rbx
5711:	add    %rbx,%r10
5714:	mov    0x70(%rsp),%rax
5719:	mov    0x58(%rsp),%rbx
571e:	shr    $0x7,%rax
5722:	shr    $0x6,%rbx
5726:	mov    0x70(%rsp),%rcx
572b:	mov    0x58(%rsp),%rdx
5730:	ror    %rcx
5733:	ror    $0x13,%rdx
5737:	xor    %rcx,%rax
573a:	xor    %rdx,%rbx
573d:	ror    $0x7,%rcx
5741:	ror    $0x2a,%rdx
5745:	xor    %rcx,%rax
5748:	xor    %rdx,%rbx
574b:	add    0x68(%rsp),%rax
5750:	add    0x30(%rsp),%rbx
5755:	add    %rbx,%rax
5758:	mov    %rax,0x68(%rsp)
575d:	add    0x70(%rbp),%r9
5761:	add    0x70(%rsp),%r9
5766:	mov    %r14,%rcx
5769:	mov    %r14,%rdx
576c:	ror    $0xe,%rcx
5770:	mov    %r14,%rbx
5773:	push   %r14
5775:	not    %rdx
5778:	ror    $0x12,%r14
577c:	and    %r15,%rbx
577f:	and    %r8,%rdx
5782:	xor    %r14,%rcx
5785:	ror    $0x17,%r14
5789:	xor    %rbx,%rdx
578c:	xor    %r14,%rcx
578f:	pop    %r14
5791:	lea    (%rcx,%rdx,1),%rbx
5795:	add    %rbx,%r9
5798:	add    %r9,%r13
579b:	mov    %r10,%rcx
579e:	mov    %r10,%rdx
57a1:	ror    $0x1c,%rcx
57a5:	mov    %r10,%rbx
57a8:	push   %r10
57aa:	xor    %r11,%rdx
57ad:	ror    $0x22,%r10
57b1:	and    %r11,%rbx
57b4:	and    %r12,%rdx
57b7:	xor    %r10,%rcx
57ba:	ror    $0x5,%r10
57be:	xor    %rbx,%rdx
57c1:	xor    %r10,%rcx
57c4:	pop    %r10
57c6:	lea    (%rcx,%rdx,1),%rbx
57ca:	add    %rbx,%r9
57cd:	mov    0x78(%rsp),%rax
57d2:	mov    0x60(%rsp),%rbx
57d7:	shr    $0x7,%rax
57db:	shr    $0x6,%rbx
57df:	mov    0x78(%rsp),%rcx
57e4:	mov    0x60(%rsp),%rdx
57e9:	ror    %rcx
57ec:	ror    $0x13,%rdx
57f0:	xor    %rcx,%rax
57f3:	xor    %rdx,%rbx
57f6:	ror    $0x7,%rcx
57fa:	ror    $0x2a,%rdx
57fe:	xor    %rcx,%rax
5801:	xor    %rdx,%rbx
5804:	add    0x70(%rsp),%rax
5809:	add    0x38(%rsp),%rbx
580e:	add    %rbx,%rax
5811:	mov    %rax,0x70(%rsp)
5816:	add    0x78(%rbp),%r8
581a:	add    0x78(%rsp),%r8
581f:	mov    %r13,%rcx
5822:	mov    %r13,%rdx
5825:	ror    $0xe,%rcx
5829:	mov    %r13,%rbx
582c:	push   %r13
582e:	not    %rdx
5831:	ror    $0x12,%r13
5835:	and    %r14,%rbx
5838:	and    %r15,%rdx
583b:	xor    %r13,%rcx
583e:	ror    $0x17,%r13
5842:	xor    %rbx,%rdx
5845:	xor    %r13,%rcx
5848:	pop    %r13
584a:	lea    (%rcx,%rdx,1),%rbx
584e:	add    %rbx,%r8
5851:	add    %r8,%r12
5854:	mov    %r9,%rcx
5857:	mov    %r9,%rdx
585a:	ror    $0x1c,%rcx
585e:	mov    %r9,%rbx
5861:	push   %r9
5863:	xor    %r10,%rdx
5866:	ror    $0x22,%r9
586a:	and    %r10,%rbx
586d:	and    %r11,%rdx
5870:	xor    %r9,%rcx
5873:	ror    $0x5,%r9
5877:	xor    %rbx,%rdx
587a:	xor    %r9,%rcx
587d:	pop    %r9
587f:	lea    (%rcx,%rdx,1),%rbx
5883:	add    %rbx,%r8
5886:	mov    (%rsp),%rax
588a:	mov    0x68(%rsp),%rbx
588f:	shr    $0x7,%rax
5893:	shr    $0x6,%rbx
5897:	mov    (%rsp),%rcx
589b:	mov    0x68(%rsp),%rdx
58a0:	ror    %rcx
58a3:	ror    $0x13,%rdx
58a7:	xor    %rcx,%rax
58aa:	xor    %rdx,%rbx
58ad:	ror    $0x7,%rcx
58b1:	ror    $0x2a,%rdx
58b5:	xor    %rcx,%rax
58b8:	xor    %rdx,%rbx
58bb:	add    0x78(%rsp),%rax
58c0:	add    0x40(%rsp),%rbx
58c5:	add    %rbx,%rax
58c8:	mov    %rax,0x78(%rsp)
58cd:	add    0x80(%rbp),%r15
58d4:	add    (%rsp),%r15
58d8:	mov    %r12,%rcx
58db:	mov    %r12,%rdx
58de:	ror    $0xe,%rcx
58e2:	mov    %r12,%rbx
58e5:	push   %r12
58e7:	not    %rdx
58ea:	ror    $0x12,%r12
58ee:	and    %r13,%rbx
58f1:	and    %r14,%rdx
58f4:	xor    %r12,%rcx
58f7:	ror    $0x17,%r12
58fb:	xor    %rbx,%rdx
58fe:	xor    %r12,%rcx
5901:	pop    %r12
5903:	lea    (%rcx,%rdx,1),%rbx
5907:	add    %rbx,%r15
590a:	add    %r15,%r11
590d:	mov    %r8,%rcx
5910:	mov    %r8,%rdx
5913:	ror    $0x1c,%rcx
5917:	mov    %r8,%rbx
591a:	push   %r8
591c:	xor    %r9,%rdx
591f:	ror    $0x22,%r8
5923:	and    %r9,%rbx
5926:	and    %r10,%rdx
5929:	xor    %r8,%rcx
592c:	ror    $0x5,%r8
5930:	xor    %rbx,%rdx
5933:	xor    %r8,%rcx
5936:	pop    %r8
5938:	lea    (%rcx,%rdx,1),%rbx
593c:	add    %rbx,%r15
593f:	mov    0x8(%rsp),%rax
5944:	mov    0x70(%rsp),%rbx
5949:	shr    $0x7,%rax
594d:	shr    $0x6,%rbx
5951:	mov    0x8(%rsp),%rcx
5956:	mov    0x70(%rsp),%rdx
595b:	ror    %rcx
595e:	ror    $0x13,%rdx
5962:	xor    %rcx,%rax
5965:	xor    %rdx,%rbx
5968:	ror    $0x7,%rcx
596c:	ror    $0x2a,%rdx
5970:	xor    %rcx,%rax
5973:	xor    %rdx,%rbx
5976:	add    (%rsp),%rax
597a:	add    0x48(%rsp),%rbx
597f:	add    %rbx,%rax
5982:	mov    %rax,(%rsp)
5986:	add    0x88(%rbp),%r14
598d:	add    0x8(%rsp),%r14
5992:	mov    %r11,%rcx
5995:	mov    %r11,%rdx
5998:	ror    $0xe,%rcx
599c:	mov    %r11,%rbx
599f:	push   %r11
59a1:	not    %rdx
59a4:	ror    $0x12,%r11
59a8:	and    %r12,%rbx
59ab:	and    %r13,%rdx
59ae:	xor    %r11,%rcx
59b1:	ror    $0x17,%r11
59b5:	xor    %rbx,%rdx
59b8:	xor    %r11,%rcx
59bb:	pop    %r11
59bd:	lea    (%rcx,%rdx,1),%rbx
59c1:	add    %rbx,%r14
59c4:	add    %r14,%r10
59c7:	mov    %r15,%rcx
59ca:	mov    %r15,%rdx
59cd:	ror    $0x1c,%rcx
59d1:	mov    %r15,%rbx
59d4:	push   %r15
59d6:	xor    %r8,%rdx
59d9:	ror    $0x22,%r15
59dd:	and    %r8,%rbx
59e0:	and    %r9,%rdx
59e3:	xor    %r15,%rcx
59e6:	ror    $0x5,%r15
59ea:	xor    %rbx,%rdx
59ed:	xor    %r15,%rcx
59f0:	pop    %r15
59f2:	lea    (%rcx,%rdx,1),%rbx
59f6:	add    %rbx,%r14
59f9:	mov    0x10(%rsp),%rax
59fe:	mov    0x78(%rsp),%rbx
5a03:	shr    $0x7,%rax
5a07:	shr    $0x6,%rbx
5a0b:	mov    0x10(%rsp),%rcx
5a10:	mov    0x78(%rsp),%rdx
5a15:	ror    %rcx
5a18:	ror    $0x13,%rdx
5a1c:	xor    %rcx,%rax
5a1f:	xor    %rdx,%rbx
5a22:	ror    $0x7,%rcx
5a26:	ror    $0x2a,%rdx
5a2a:	xor    %rcx,%rax
5a2d:	xor    %rdx,%rbx
5a30:	add    0x8(%rsp),%rax
5a35:	add    0x50(%rsp),%rbx
5a3a:	add    %rbx,%rax
5a3d:	mov    %rax,0x8(%rsp)
5a42:	add    0x90(%rbp),%r13
5a49:	add    0x10(%rsp),%r13
5a4e:	mov    %r10,%rcx
5a51:	mov    %r10,%rdx
5a54:	ror    $0xe,%rcx
5a58:	mov    %r10,%rbx
5a5b:	push   %r10
5a5d:	not    %rdx
5a60:	ror    $0x12,%r10
5a64:	and    %r11,%rbx
5a67:	and    %r12,%rdx
5a6a:	xor    %r10,%rcx
5a6d:	ror    $0x17,%r10
5a71:	xor    %rbx,%rdx
5a74:	xor    %r10,%rcx
5a77:	pop    %r10
5a79:	lea    (%rcx,%rdx,1),%rbx
5a7d:	add    %rbx,%r13
5a80:	add    %r13,%r9
5a83:	mov    %r14,%rcx
5a86:	mov    %r14,%rdx
5a89:	ror    $0x1c,%rcx
5a8d:	mov    %r14,%rbx
5a90:	push   %r14
5a92:	xor    %r15,%rdx
5a95:	ror    $0x22,%r14
5a99:	and    %r15,%rbx
5a9c:	and    %r8,%rdx
5a9f:	xor    %r14,%rcx
5aa2:	ror    $0x5,%r14
5aa6:	xor    %rbx,%rdx
5aa9:	xor    %r14,%rcx
5aac:	pop    %r14
5aae:	lea    (%rcx,%rdx,1),%rbx
5ab2:	add    %rbx,%r13
5ab5:	mov    0x18(%rsp),%rax
5aba:	mov    (%rsp),%rbx
5abe:	shr    $0x7,%rax
5ac2:	shr    $0x6,%rbx
5ac6:	mov    0x18(%rsp),%rcx
5acb:	mov    (%rsp),%rdx
5acf:	ror    %rcx
5ad2:	ror    $0x13,%rdx
5ad6:	xor    %rcx,%rax
5ad9:	xor    %rdx,%rbx
5adc:	ror    $0x7,%rcx
5ae0:	ror    $0x2a,%rdx
5ae4:	xor    %rcx,%rax
5ae7:	xor    %rdx,%rbx
5aea:	add    0x10(%rsp),%rax
5aef:	add    0x58(%rsp),%rbx
5af4:	add    %rbx,%rax
5af7:	mov    %rax,0x10(%rsp)
5afc:	add    0x98(%rbp),%r12
5b03:	add    0x18(%rsp),%r12
5b08:	mov    %r9,%rcx
5b0b:	mov    %r9,%rdx
5b0e:	ror    $0xe,%rcx
5b12:	mov    %r9,%rbx
5b15:	push   %r9
5b17:	not    %rdx
5b1a:	ror    $0x12,%r9
5b1e:	and    %r10,%rbx
5b21:	and    %r11,%rdx
5b24:	xor    %r9,%rcx
5b27:	ror    $0x17,%r9
5b2b:	xor    %rbx,%rdx
5b2e:	xor    %r9,%rcx
5b31:	pop    %r9
5b33:	lea    (%rcx,%rdx,1),%rbx
5b37:	add    %rbx,%r12
5b3a:	add    %r12,%r8
5b3d:	mov    %r13,%rcx
5b40:	mov    %r13,%rdx
5b43:	ror    $0x1c,%rcx
5b47:	mov    %r13,%rbx
5b4a:	push   %r13
5b4c:	xor    %r14,%rdx
5b4f:	ror    $0x22,%r13
5b53:	and    %r14,%rbx
5b56:	and    %r15,%rdx
5b59:	xor    %r13,%rcx
5b5c:	ror    $0x5,%r13
5b60:	xor    %rbx,%rdx
5b63:	xor    %r13,%rcx
5b66:	pop    %r13
5b68:	lea    (%rcx,%rdx,1),%rbx
5b6c:	add    %rbx,%r12
5b6f:	mov    0x20(%rsp),%rax
5b74:	mov    0x8(%rsp),%rbx
5b79:	shr    $0x7,%rax
5b7d:	shr    $0x6,%rbx
5b81:	mov    0x20(%rsp),%rcx
5b86:	mov    0x8(%rsp),%rdx
5b8b:	ror    %rcx
5b8e:	ror    $0x13,%rdx
5b92:	xor    %rcx,%rax
5b95:	xor    %rdx,%rbx
5b98:	ror    $0x7,%rcx
5b9c:	ror    $0x2a,%rdx
5ba0:	xor    %rcx,%rax
5ba3:	xor    %rdx,%rbx
5ba6:	add    0x18(%rsp),%rax
5bab:	add    0x60(%rsp),%rbx
5bb0:	add    %rbx,%rax
5bb3:	mov    %rax,0x18(%rsp)
5bb8:	add    0xa0(%rbp),%r11
5bbf:	add    0x20(%rsp),%r11
5bc4:	mov    %r8,%rcx
5bc7:	mov    %r8,%rdx
5bca:	ror    $0xe,%rcx
5bce:	mov    %r8,%rbx
5bd1:	push   %r8
5bd3:	not    %rdx
5bd6:	ror    $0x12,%r8
5bda:	and    %r9,%rbx
5bdd:	and    %r10,%rdx
5be0:	xor    %r8,%rcx
5be3:	ror    $0x17,%r8
5be7:	xor    %rbx,%rdx
5bea:	xor    %r8,%rcx
5bed:	pop    %r8
5bef:	lea    (%rcx,%rdx,1),%rbx
5bf3:	add    %rbx,%r11
5bf6:	add    %r11,%r15
5bf9:	mov    %r12,%rcx
5bfc:	mov    %r12,%rdx
5bff:	ror    $0x1c,%rcx
5c03:	mov    %r12,%rbx
5c06:	push   %r12
5c08:	xor    %r13,%rdx
5c0b:	ror    $0x22,%r12
5c0f:	and    %r13,%rbx
5c12:	and    %r14,%rdx
5c15:	xor    %r12,%rcx
5c18:	ror    $0x5,%r12
5c1c:	xor    %rbx,%rdx
5c1f:	xor    %r12,%rcx
5c22:	pop    %r12
5c24:	lea    (%rcx,%rdx,1),%rbx
5c28:	add    %rbx,%r11
5c2b:	mov    0x28(%rsp),%rax
5c30:	mov    0x10(%rsp),%rbx
5c35:	shr    $0x7,%rax
5c39:	shr    $0x6,%rbx
5c3d:	mov    0x28(%rsp),%rcx
5c42:	mov    0x10(%rsp),%rdx
5c47:	ror    %rcx
5c4a:	ror    $0x13,%rdx
5c4e:	xor    %rcx,%rax
5c51:	xor    %rdx,%rbx
5c54:	ror    $0x7,%rcx
5c58:	ror    $0x2a,%rdx
5c5c:	xor    %rcx,%rax
5c5f:	xor    %rdx,%rbx
5c62:	add    0x20(%rsp),%rax
5c67:	add    0x68(%rsp),%rbx
5c6c:	add    %rbx,%rax
5c6f:	mov    %rax,0x20(%rsp)
5c74:	add    0xa8(%rbp),%r10
5c7b:	add    0x28(%rsp),%r10
5c80:	mov    %r15,%rcx
5c83:	mov    %r15,%rdx
5c86:	ror    $0xe,%rcx
5c8a:	mov    %r15,%rbx
5c8d:	push   %r15
5c8f:	not    %rdx
5c92:	ror    $0x12,%r15
5c96:	and    %r8,%rbx
5c99:	and    %r9,%rdx
5c9c:	xor    %r15,%rcx
5c9f:	ror    $0x17,%r15
5ca3:	xor    %rbx,%rdx
5ca6:	xor    %r15,%rcx
5ca9:	pop    %r15
5cab:	lea    (%rcx,%rdx,1),%rbx
5caf:	add    %rbx,%r10
5cb2:	add    %r10,%r14
5cb5:	mov    %r11,%rcx
5cb8:	mov    %r11,%rdx
5cbb:	ror    $0x1c,%rcx
5cbf:	mov    %r11,%rbx
5cc2:	push   %r11
5cc4:	xor    %r12,%rdx
5cc7:	ror    $0x22,%r11
5ccb:	and    %r12,%rbx
5cce:	and    %r13,%rdx
5cd1:	xor    %r11,%rcx
5cd4:	ror    $0x5,%r11
5cd8:	xor    %rbx,%rdx
5cdb:	xor    %r11,%rcx
5cde:	pop    %r11
5ce0:	lea    (%rcx,%rdx,1),%rbx
5ce4:	add    %rbx,%r10
5ce7:	mov    0x30(%rsp),%rax
5cec:	mov    0x18(%rsp),%rbx
5cf1:	shr    $0x7,%rax
5cf5:	shr    $0x6,%rbx
5cf9:	mov    0x30(%rsp),%rcx
5cfe:	mov    0x18(%rsp),%rdx
5d03:	ror    %rcx
5d06:	ror    $0x13,%rdx
5d0a:	xor    %rcx,%rax
5d0d:	xor    %rdx,%rbx
5d10:	ror    $0x7,%rcx
5d14:	ror    $0x2a,%rdx
5d18:	xor    %rcx,%rax
5d1b:	xor    %rdx,%rbx
5d1e:	add    0x28(%rsp),%rax
5d23:	add    0x70(%rsp),%rbx
5d28:	add    %rbx,%rax
5d2b:	mov    %rax,0x28(%rsp)
5d30:	add    0xb0(%rbp),%r9
5d37:	add    0x30(%rsp),%r9
5d3c:	mov    %r14,%rcx
5d3f:	mov    %r14,%rdx
5d42:	ror    $0xe,%rcx
5d46:	mov    %r14,%rbx
5d49:	push   %r14
5d4b:	not    %rdx
5d4e:	ror    $0x12,%r14
5d52:	and    %r15,%rbx
5d55:	and    %r8,%rdx
5d58:	xor    %r14,%rcx
5d5b:	ror    $0x17,%r14
5d5f:	xor    %rbx,%rdx
5d62:	xor    %r14,%rcx
5d65:	pop    %r14
5d67:	lea    (%rcx,%rdx,1),%rbx
5d6b:	add    %rbx,%r9
5d6e:	add    %r9,%r13
5d71:	mov    %r10,%rcx
5d74:	mov    %r10,%rdx
5d77:	ror    $0x1c,%rcx
5d7b:	mov    %r10,%rbx
5d7e:	push   %r10
5d80:	xor    %r11,%rdx
5d83:	ror    $0x22,%r10
5d87:	and    %r11,%rbx
5d8a:	and    %r12,%rdx
5d8d:	xor    %r10,%rcx
5d90:	ror    $0x5,%r10
5d94:	xor    %rbx,%rdx
5d97:	xor    %r10,%rcx
5d9a:	pop    %r10
5d9c:	lea    (%rcx,%rdx,1),%rbx
5da0:	add    %rbx,%r9
5da3:	mov    0x38(%rsp),%rax
5da8:	mov    0x20(%rsp),%rbx
5dad:	shr    $0x7,%rax
5db1:	shr    $0x6,%rbx
5db5:	mov    0x38(%rsp),%rcx
5dba:	mov    0x20(%rsp),%rdx
5dbf:	ror    %rcx
5dc2:	ror    $0x13,%rdx
5dc6:	xor    %rcx,%rax
5dc9:	xor    %rdx,%rbx
5dcc:	ror    $0x7,%rcx
5dd0:	ror    $0x2a,%rdx
5dd4:	xor    %rcx,%rax
5dd7:	xor    %rdx,%rbx
5dda:	add    0x30(%rsp),%rax
5ddf:	add    0x78(%rsp),%rbx
5de4:	add    %rbx,%rax
5de7:	mov    %rax,0x30(%rsp)
5dec:	add    0xb8(%rbp),%r8
5df3:	add    0x38(%rsp),%r8
5df8:	mov    %r13,%rcx
5dfb:	mov    %r13,%rdx
5dfe:	ror    $0xe,%rcx
5e02:	mov    %r13,%rbx
5e05:	push   %r13
5e07:	not    %rdx
5e0a:	ror    $0x12,%r13
5e0e:	and    %r14,%rbx
5e11:	and    %r15,%rdx
5e14:	xor    %r13,%rcx
5e17:	ror    $0x17,%r13
5e1b:	xor    %rbx,%rdx
5e1e:	xor    %r13,%rcx
5e21:	pop    %r13
5e23:	lea    (%rcx,%rdx,1),%rbx
5e27:	add    %rbx,%r8
5e2a:	add    %r8,%r12
5e2d:	mov    %r9,%rcx
5e30:	mov    %r9,%rdx
5e33:	ror    $0x1c,%rcx
5e37:	mov    %r9,%rbx
5e3a:	push   %r9
5e3c:	xor    %r10,%rdx
5e3f:	ror    $0x22,%r9
5e43:	and    %r10,%rbx
5e46:	and    %r11,%rdx
5e49:	xor    %r9,%rcx
5e4c:	ror    $0x5,%r9
5e50:	xor    %rbx,%rdx
5e53:	xor    %r9,%rcx
5e56:	pop    %r9
5e58:	lea    (%rcx,%rdx,1),%rbx
5e5c:	add    %rbx,%r8
5e5f:	mov    0x40(%rsp),%rax
5e64:	mov    0x28(%rsp),%rbx
5e69:	shr    $0x7,%rax
5e6d:	shr    $0x6,%rbx
5e71:	mov    0x40(%rsp),%rcx
5e76:	mov    0x28(%rsp),%rdx
5e7b:	ror    %rcx
5e7e:	ror    $0x13,%rdx
5e82:	xor    %rcx,%rax
5e85:	xor    %rdx,%rbx
5e88:	ror    $0x7,%rcx
5e8c:	ror    $0x2a,%rdx
5e90:	xor    %rcx,%rax
5e93:	xor    %rdx,%rbx
5e96:	add    0x38(%rsp),%rax
5e9b:	add    (%rsp),%rbx
5e9f:	add    %rbx,%rax
5ea2:	mov    %rax,0x38(%rsp)
5ea7:	add    0xc0(%rbp),%r15
5eae:	add    0x40(%rsp),%r15
5eb3:	mov    %r12,%rcx
5eb6:	mov    %r12,%rdx
5eb9:	ror    $0xe,%rcx
5ebd:	mov    %r12,%rbx
5ec0:	push   %r12
5ec2:	not    %rdx
5ec5:	ror    $0x12,%r12
5ec9:	and    %r13,%rbx
5ecc:	and    %r14,%rdx
5ecf:	xor    %r12,%rcx
5ed2:	ror    $0x17,%r12
5ed6:	xor    %rbx,%rdx
5ed9:	xor    %r12,%rcx
5edc:	pop    %r12
5ede:	lea    (%rcx,%rdx,1),%rbx
5ee2:	add    %rbx,%r15
5ee5:	add    %r15,%r11
5ee8:	mov    %r8,%rcx
5eeb:	mov    %r8,%rdx
5eee:	ror    $0x1c,%rcx
5ef2:	mov    %r8,%rbx
5ef5:	push   %r8
5ef7:	xor    %r9,%rdx
5efa:	ror    $0x22,%r8
5efe:	and    %r9,%rbx
5f01:	and    %r10,%rdx
5f04:	xor    %r8,%rcx
5f07:	ror    $0x5,%r8
5f0b:	xor    %rbx,%rdx
5f0e:	xor    %r8,%rcx
5f11:	pop    %r8
5f13:	lea    (%rcx,%rdx,1),%rbx
5f17:	add    %rbx,%r15
5f1a:	mov    0x48(%rsp),%rax
5f1f:	mov    0x30(%rsp),%rbx
5f24:	shr    $0x7,%rax
5f28:	shr    $0x6,%rbx
5f2c:	mov    0x48(%rsp),%rcx
5f31:	mov    0x30(%rsp),%rdx
5f36:	ror    %rcx
5f39:	ror    $0x13,%rdx
5f3d:	xor    %rcx,%rax
5f40:	xor    %rdx,%rbx
5f43:	ror    $0x7,%rcx
5f47:	ror    $0x2a,%rdx
5f4b:	xor    %rcx,%rax
5f4e:	xor    %rdx,%rbx
5f51:	add    0x40(%rsp),%rax
5f56:	add    0x8(%rsp),%rbx
5f5b:	add    %rbx,%rax
5f5e:	mov    %rax,0x40(%rsp)
5f63:	add    0xc8(%rbp),%r14
5f6a:	add    0x48(%rsp),%r14
5f6f:	mov    %r11,%rcx
5f72:	mov    %r11,%rdx
5f75:	ror    $0xe,%rcx
5f79:	mov    %r11,%rbx
5f7c:	push   %r11
5f7e:	not    %rdx
5f81:	ror    $0x12,%r11
5f85:	and    %r12,%rbx
5f88:	and    %r13,%rdx
5f8b:	xor    %r11,%rcx
5f8e:	ror    $0x17,%r11
5f92:	xor    %rbx,%rdx
5f95:	xor    %r11,%rcx
5f98:	pop    %r11
5f9a:	lea    (%rcx,%rdx,1),%rbx
5f9e:	add    %rbx,%r14
5fa1:	add    %r14,%r10
5fa4:	mov    %r15,%rcx
5fa7:	mov    %r15,%rdx
5faa:	ror    $0x1c,%rcx
5fae:	mov    %r15,%rbx
5fb1:	push   %r15
5fb3:	xor    %r8,%rdx
5fb6:	ror    $0x22,%r15
5fba:	and    %r8,%rbx
5fbd:	and    %r9,%rdx
5fc0:	xor    %r15,%rcx
5fc3:	ror    $0x5,%r15
5fc7:	xor    %rbx,%rdx
5fca:	xor    %r15,%rcx
5fcd:	pop    %r15
5fcf:	lea    (%rcx,%rdx,1),%rbx
5fd3:	add    %rbx,%r14
5fd6:	mov    0x50(%rsp),%rax
5fdb:	mov    0x38(%rsp),%rbx
5fe0:	shr    $0x7,%rax
5fe4:	shr    $0x6,%rbx
5fe8:	mov    0x50(%rsp),%rcx
5fed:	mov    0x38(%rsp),%rdx
5ff2:	ror    %rcx
5ff5:	ror    $0x13,%rdx
5ff9:	xor    %rcx,%rax
5ffc:	xor    %rdx,%rbx
5fff:	ror    $0x7,%rcx
6003:	ror    $0x2a,%rdx
6007:	xor    %rcx,%rax
600a:	xor    %rdx,%rbx
600d:	add    0x48(%rsp),%rax
6012:	add    0x10(%rsp),%rbx
6017:	add    %rbx,%rax
601a:	mov    %rax,0x48(%rsp)
601f:	add    0xd0(%rbp),%r13
6026:	add    0x50(%rsp),%r13
602b:	mov    %r10,%rcx
602e:	mov    %r10,%rdx
6031:	ror    $0xe,%rcx
6035:	mov    %r10,%rbx
6038:	push   %r10
603a:	not    %rdx
603d:	ror    $0x12,%r10
6041:	and    %r11,%rbx
6044:	and    %r12,%rdx
6047:	xor    %r10,%rcx
604a:	ror    $0x17,%r10
604e:	xor    %rbx,%rdx
6051:	xor    %r10,%rcx
6054:	pop    %r10
6056:	lea    (%rcx,%rdx,1),%rbx
605a:	add    %rbx,%r13
605d:	add    %r13,%r9
6060:	mov    %r14,%rcx
6063:	mov    %r14,%rdx
6066:	ror    $0x1c,%rcx
606a:	mov    %r14,%rbx
606d:	push   %r14
606f:	xor    %r15,%rdx
6072:	ror    $0x22,%r14
6076:	and    %r15,%rbx
6079:	and    %r8,%rdx
607c:	xor    %r14,%rcx
607f:	ror    $0x5,%r14
6083:	xor    %rbx,%rdx
6086:	xor    %r14,%rcx
6089:	pop    %r14
608b:	lea    (%rcx,%rdx,1),%rbx
608f:	add    %rbx,%r13
6092:	mov    0x58(%rsp),%rax
6097:	mov    0x40(%rsp),%rbx
609c:	shr    $0x7,%rax
60a0:	shr    $0x6,%rbx
60a4:	mov    0x58(%rsp),%rcx
60a9:	mov    0x40(%rsp),%rdx
60ae:	ror    %rcx
60b1:	ror    $0x13,%rdx
60b5:	xor    %rcx,%rax
60b8:	xor    %rdx,%rbx
60bb:	ror    $0x7,%rcx
60bf:	ror    $0x2a,%rdx
60c3:	xor    %rcx,%rax
60c6:	xor    %rdx,%rbx
60c9:	add    0x50(%rsp),%rax
60ce:	add    0x18(%rsp),%rbx
60d3:	add    %rbx,%rax
60d6:	mov    %rax,0x50(%rsp)
60db:	add    0xd8(%rbp),%r12
60e2:	add    0x58(%rsp),%r12
60e7:	mov    %r9,%rcx
60ea:	mov    %r9,%rdx
60ed:	ror    $0xe,%rcx
60f1:	mov    %r9,%rbx
60f4:	push   %r9
60f6:	not    %rdx
60f9:	ror    $0x12,%r9
60fd:	and    %r10,%rbx
6100:	and    %r11,%rdx
6103:	xor    %r9,%rcx
6106:	ror    $0x17,%r9
610a:	xor    %rbx,%rdx
610d:	xor    %r9,%rcx
6110:	pop    %r9
6112:	lea    (%rcx,%rdx,1),%rbx
6116:	add    %rbx,%r12
6119:	add    %r12,%r8
611c:	mov    %r13,%rcx
611f:	mov    %r13,%rdx
6122:	ror    $0x1c,%rcx
6126:	mov    %r13,%rbx
6129:	push   %r13
612b:	xor    %r14,%rdx
612e:	ror    $0x22,%r13
6132:	and    %r14,%rbx
6135:	and    %r15,%rdx
6138:	xor    %r13,%rcx
613b:	ror    $0x5,%r13
613f:	xor    %rbx,%rdx
6142:	xor    %r13,%rcx
6145:	pop    %r13
6147:	lea    (%rcx,%rdx,1),%rbx
614b:	add    %rbx,%r12
614e:	mov    0x60(%rsp),%rax
6153:	mov    0x48(%rsp),%rbx
6158:	shr    $0x7,%rax
615c:	shr    $0x6,%rbx
6160:	mov    0x60(%rsp),%rcx
6165:	mov    0x48(%rsp),%rdx
616a:	ror    %rcx
616d:	ror    $0x13,%rdx
6171:	xor    %rcx,%rax
6174:	xor    %rdx,%rbx
6177:	ror    $0x7,%rcx
617b:	ror    $0x2a,%rdx
617f:	xor    %rcx,%rax
6182:	xor    %rdx,%rbx
6185:	add    0x58(%rsp),%rax
618a:	add    0x20(%rsp),%rbx
618f:	add    %rbx,%rax
6192:	mov    %rax,0x58(%rsp)
6197:	add    0xe0(%rbp),%r11
619e:	add    0x60(%rsp),%r11
61a3:	mov    %r8,%rcx
61a6:	mov    %r8,%rdx
61a9:	ror    $0xe,%rcx
61ad:	mov    %r8,%rbx
61b0:	push   %r8
61b2:	not    %rdx
61b5:	ror    $0x12,%r8
61b9:	and    %r9,%rbx
61bc:	and    %r10,%rdx
61bf:	xor    %r8,%rcx
61c2:	ror    $0x17,%r8
61c6:	xor    %rbx,%rdx
61c9:	xor    %r8,%rcx
61cc:	pop    %r8
61ce:	lea    (%rcx,%rdx,1),%rbx
61d2:	add    %rbx,%r11
61d5:	add    %r11,%r15
61d8:	mov    %r12,%rcx
61db:	mov    %r12,%rdx
61de:	ror    $0x1c,%rcx
61e2:	mov    %r12,%rbx
61e5:	push   %r12
61e7:	xor    %r13,%rdx
61ea:	ror    $0x22,%r12
61ee:	and    %r13,%rbx
61f1:	and    %r14,%rdx
61f4:	xor    %r12,%rcx
61f7:	ror    $0x5,%r12
61fb:	xor    %rbx,%rdx
61fe:	xor    %r12,%rcx
6201:	pop    %r12
6203:	lea    (%rcx,%rdx,1),%rbx
6207:	add    %rbx,%r11
620a:	mov    0x68(%rsp),%rax
620f:	mov    0x50(%rsp),%rbx
6214:	shr    $0x7,%rax
6218:	shr    $0x6,%rbx
621c:	mov    0x68(%rsp),%rcx
6221:	mov    0x50(%rsp),%rdx
6226:	ror    %rcx
6229:	ror    $0x13,%rdx
622d:	xor    %rcx,%rax
6230:	xor    %rdx,%rbx
6233:	ror    $0x7,%rcx
6237:	ror    $0x2a,%rdx
623b:	xor    %rcx,%rax
623e:	xor    %rdx,%rbx
6241:	add    0x60(%rsp),%rax
6246:	add    0x28(%rsp),%rbx
624b:	add    %rbx,%rax
624e:	mov    %rax,0x60(%rsp)
6253:	add    0xe8(%rbp),%r10
625a:	add    0x68(%rsp),%r10
625f:	mov    %r15,%rcx
6262:	mov    %r15,%rdx
6265:	ror    $0xe,%rcx
6269:	mov    %r15,%rbx
626c:	push   %r15
626e:	not    %rdx
6271:	ror    $0x12,%r15
6275:	and    %r8,%rbx
6278:	and    %r9,%rdx
627b:	xor    %r15,%rcx
627e:	ror    $0x17,%r15
6282:	xor    %rbx,%rdx
6285:	xor    %r15,%rcx
6288:	pop    %r15
628a:	lea    (%rcx,%rdx,1),%rbx
628e:	add    %rbx,%r10
6291:	add    %r10,%r14
6294:	mov    %r11,%rcx
6297:	mov    %r11,%rdx
629a:	ror    $0x1c,%rcx
629e:	mov    %r11,%rbx
62a1:	push   %r11
62a3:	xor    %r12,%rdx
62a6:	ror    $0x22,%r11
62aa:	and    %r12,%rbx
62ad:	and    %r13,%rdx
62b0:	xor    %r11,%rcx
62b3:	ror    $0x5,%r11
62b7:	xor    %rbx,%rdx
62ba:	xor    %r11,%rcx
62bd:	pop    %r11
62bf:	lea    (%rcx,%rdx,1),%rbx
62c3:	add    %rbx,%r10
62c6:	mov    0x70(%rsp),%rax
62cb:	mov    0x58(%rsp),%rbx
62d0:	shr    $0x7,%rax
62d4:	shr    $0x6,%rbx
62d8:	mov    0x70(%rsp),%rcx
62dd:	mov    0x58(%rsp),%rdx
62e2:	ror    %rcx
62e5:	ror    $0x13,%rdx
62e9:	xor    %rcx,%rax
62ec:	xor    %rdx,%rbx
62ef:	ror    $0x7,%rcx
62f3:	ror    $0x2a,%rdx
62f7:	xor    %rcx,%rax
62fa:	xor    %rdx,%rbx
62fd:	add    0x68(%rsp),%rax
6302:	add    0x30(%rsp),%rbx
6307:	add    %rbx,%rax
630a:	mov    %rax,0x68(%rsp)
630f:	add    0xf0(%rbp),%r9
6316:	add    0x70(%rsp),%r9
631b:	mov    %r14,%rcx
631e:	mov    %r14,%rdx
6321:	ror    $0xe,%rcx
6325:	mov    %r14,%rbx
6328:	push   %r14
632a:	not    %rdx
632d:	ror    $0x12,%r14
6331:	and    %r15,%rbx
6334:	and    %r8,%rdx
6337:	xor    %r14,%rcx
633a:	ror    $0x17,%r14
633e:	xor    %rbx,%rdx
6341:	xor    %r14,%rcx
6344:	pop    %r14
6346:	lea    (%rcx,%rdx,1),%rbx
634a:	add    %rbx,%r9
634d:	add    %r9,%r13
6350:	mov    %r10,%rcx
6353:	mov    %r10,%rdx
6356:	ror    $0x1c,%rcx
635a:	mov    %r10,%rbx
635d:	push   %r10
635f:	xor    %r11,%rdx
6362:	ror    $0x22,%r10
6366:	and    %r11,%rbx
6369:	and    %r12,%rdx
636c:	xor    %r10,%rcx
636f:	ror    $0x5,%r10
6373:	xor    %rbx,%rdx
6376:	xor    %r10,%rcx
6379:	pop    %r10
637b:	lea    (%rcx,%rdx,1),%rbx
637f:	add    %rbx,%r9
6382:	mov    0x78(%rsp),%rax
6387:	mov    0x60(%rsp),%rbx
638c:	shr    $0x7,%rax
6390:	shr    $0x6,%rbx
6394:	mov    0x78(%rsp),%rcx
6399:	mov    0x60(%rsp),%rdx
639e:	ror    %rcx
63a1:	ror    $0x13,%rdx
63a5:	xor    %rcx,%rax
63a8:	xor    %rdx,%rbx
63ab:	ror    $0x7,%rcx
63af:	ror    $0x2a,%rdx
63b3:	xor    %rcx,%rax
63b6:	xor    %rdx,%rbx
63b9:	add    0x70(%rsp),%rax
63be:	add    0x38(%rsp),%rbx
63c3:	add    %rbx,%rax
63c6:	mov    %rax,0x70(%rsp)
63cb:	add    0xf8(%rbp),%r8
63d2:	add    0x78(%rsp),%r8
63d7:	mov    %r13,%rcx
63da:	mov    %r13,%rdx
63dd:	ror    $0xe,%rcx
63e1:	mov    %r13,%rbx
63e4:	push   %r13
63e6:	not    %rdx
63e9:	ror    $0x12,%r13
63ed:	and    %r14,%rbx
63f0:	and    %r15,%rdx
63f3:	xor    %r13,%rcx
63f6:	ror    $0x17,%r13
63fa:	xor    %rbx,%rdx
63fd:	xor    %r13,%rcx
6400:	pop    %r13
6402:	lea    (%rcx,%rdx,1),%rbx
6406:	add    %rbx,%r8
6409:	add    %r8,%r12
640c:	mov    %r9,%rcx
640f:	mov    %r9,%rdx
6412:	ror    $0x1c,%rcx
6416:	mov    %r9,%rbx
6419:	push   %r9
641b:	xor    %r10,%rdx
641e:	ror    $0x22,%r9
6422:	and    %r10,%rbx
6425:	and    %r11,%rdx
6428:	xor    %r9,%rcx
642b:	ror    $0x5,%r9
642f:	xor    %rbx,%rdx
6432:	xor    %r9,%rcx
6435:	pop    %r9
6437:	lea    (%rcx,%rdx,1),%rbx
643b:	add    %rbx,%r8
643e:	mov    (%rsp),%rax
6442:	mov    0x68(%rsp),%rbx
6447:	shr    $0x7,%rax
644b:	shr    $0x6,%rbx
644f:	mov    (%rsp),%rcx
6453:	mov    0x68(%rsp),%rdx
6458:	ror    %rcx
645b:	ror    $0x13,%rdx
645f:	xor    %rcx,%rax
6462:	xor    %rdx,%rbx
6465:	ror    $0x7,%rcx
6469:	ror    $0x2a,%rdx
646d:	xor    %rcx,%rax
6470:	xor    %rdx,%rbx
6473:	add    0x78(%rsp),%rax
6478:	add    0x40(%rsp),%rbx
647d:	add    %rbx,%rax
6480:	mov    %rax,0x78(%rsp)
6485:	add    0x100(%rbp),%r15
648c:	add    (%rsp),%r15
6490:	mov    %r12,%rcx
6493:	mov    %r12,%rdx
6496:	ror    $0xe,%rcx
649a:	mov    %r12,%rbx
649d:	push   %r12
649f:	not    %rdx
64a2:	ror    $0x12,%r12
64a6:	and    %r13,%rbx
64a9:	and    %r14,%rdx
64ac:	xor    %r12,%rcx
64af:	ror    $0x17,%r12
64b3:	xor    %rbx,%rdx
64b6:	xor    %r12,%rcx
64b9:	pop    %r12
64bb:	lea    (%rcx,%rdx,1),%rbx
64bf:	add    %rbx,%r15
64c2:	add    %r15,%r11
64c5:	mov    %r8,%rcx
64c8:	mov    %r8,%rdx
64cb:	ror    $0x1c,%rcx
64cf:	mov    %r8,%rbx
64d2:	push   %r8
64d4:	xor    %r9,%rdx
64d7:	ror    $0x22,%r8
64db:	and    %r9,%rbx
64de:	and    %r10,%rdx
64e1:	xor    %r8,%rcx
64e4:	ror    $0x5,%r8
64e8:	xor    %rbx,%rdx
64eb:	xor    %r8,%rcx
64ee:	pop    %r8
64f0:	lea    (%rcx,%rdx,1),%rbx
64f4:	add    %rbx,%r15
64f7:	mov    0x8(%rsp),%rax
64fc:	mov    0x70(%rsp),%rbx
6501:	shr    $0x7,%rax
6505:	shr    $0x6,%rbx
6509:	mov    0x8(%rsp),%rcx
650e:	mov    0x70(%rsp),%rdx
6513:	ror    %rcx
6516:	ror    $0x13,%rdx
651a:	xor    %rcx,%rax
651d:	xor    %rdx,%rbx
6520:	ror    $0x7,%rcx
6524:	ror    $0x2a,%rdx
6528:	xor    %rcx,%rax
652b:	xor    %rdx,%rbx
652e:	add    (%rsp),%rax
6532:	add    0x48(%rsp),%rbx
6537:	add    %rbx,%rax
653a:	mov    %rax,(%rsp)
653e:	add    0x108(%rbp),%r14
6545:	add    0x8(%rsp),%r14
654a:	mov    %r11,%rcx
654d:	mov    %r11,%rdx
6550:	ror    $0xe,%rcx
6554:	mov    %r11,%rbx
6557:	push   %r11
6559:	not    %rdx
655c:	ror    $0x12,%r11
6560:	and    %r12,%rbx
6563:	and    %r13,%rdx
6566:	xor    %r11,%rcx
6569:	ror    $0x17,%r11
656d:	xor    %rbx,%rdx
6570:	xor    %r11,%rcx
6573:	pop    %r11
6575:	lea    (%rcx,%rdx,1),%rbx
6579:	add    %rbx,%r14
657c:	add    %r14,%r10
657f:	mov    %r15,%rcx
6582:	mov    %r15,%rdx
6585:	ror    $0x1c,%rcx
6589:	mov    %r15,%rbx
658c:	push   %r15
658e:	xor    %r8,%rdx
6591:	ror    $0x22,%r15
6595:	and    %r8,%rbx
6598:	and    %r9,%rdx
659b:	xor    %r15,%rcx
659e:	ror    $0x5,%r15
65a2:	xor    %rbx,%rdx
65a5:	xor    %r15,%rcx
65a8:	pop    %r15
65aa:	lea    (%rcx,%rdx,1),%rbx
65ae:	add    %rbx,%r14
65b1:	mov    0x10(%rsp),%rax
65b6:	mov    0x78(%rsp),%rbx
65bb:	shr    $0x7,%rax
65bf:	shr    $0x6,%rbx
65c3:	mov    0x10(%rsp),%rcx
65c8:	mov    0x78(%rsp),%rdx
65cd:	ror    %rcx
65d0:	ror    $0x13,%rdx
65d4:	xor    %rcx,%rax
65d7:	xor    %rdx,%rbx
65da:	ror    $0x7,%rcx
65de:	ror    $0x2a,%rdx
65e2:	xor    %rcx,%rax
65e5:	xor    %rdx,%rbx
65e8:	add    0x8(%rsp),%rax
65ed:	add    0x50(%rsp),%rbx
65f2:	add    %rbx,%rax
65f5:	mov    %rax,0x8(%rsp)
65fa:	add    0x110(%rbp),%r13
6601:	add    0x10(%rsp),%r13
6606:	mov    %r10,%rcx
6609:	mov    %r10,%rdx
660c:	ror    $0xe,%rcx
6610:	mov    %r10,%rbx
6613:	push   %r10
6615:	not    %rdx
6618:	ror    $0x12,%r10
661c:	and    %r11,%rbx
661f:	and    %r12,%rdx
6622:	xor    %r10,%rcx
6625:	ror    $0x17,%r10
6629:	xor    %rbx,%rdx
662c:	xor    %r10,%rcx
662f:	pop    %r10
6631:	lea    (%rcx,%rdx,1),%rbx
6635:	add    %rbx,%r13
6638:	add    %r13,%r9
663b:	mov    %r14,%rcx
663e:	mov    %r14,%rdx
6641:	ror    $0x1c,%rcx
6645:	mov    %r14,%rbx
6648:	push   %r14
664a:	xor    %r15,%rdx
664d:	ror    $0x22,%r14
6651:	and    %r15,%rbx
6654:	and    %r8,%rdx
6657:	xor    %r14,%rcx
665a:	ror    $0x5,%r14
665e:	xor    %rbx,%rdx
6661:	xor    %r14,%rcx
6664:	pop    %r14
6666:	lea    (%rcx,%rdx,1),%rbx
666a:	add    %rbx,%r13
666d:	mov    0x18(%rsp),%rax
6672:	mov    (%rsp),%rbx
6676:	shr    $0x7,%rax
667a:	shr    $0x6,%rbx
667e:	mov    0x18(%rsp),%rcx
6683:	mov    (%rsp),%rdx
6687:	ror    %rcx
668a:	ror    $0x13,%rdx
668e:	xor    %rcx,%rax
6691:	xor    %rdx,%rbx
6694:	ror    $0x7,%rcx
6698:	ror    $0x2a,%rdx
669c:	xor    %rcx,%rax
669f:	xor    %rdx,%rbx
66a2:	add    0x10(%rsp),%rax
66a7:	add    0x58(%rsp),%rbx
66ac:	add    %rbx,%rax
66af:	mov    %rax,0x10(%rsp)
66b4:	add    0x118(%rbp),%r12
66bb:	add    0x18(%rsp),%r12
66c0:	mov    %r9,%rcx
66c3:	mov    %r9,%rdx
66c6:	ror    $0xe,%rcx
66ca:	mov    %r9,%rbx
66cd:	push   %r9
66cf:	not    %rdx
66d2:	ror    $0x12,%r9
66d6:	and    %r10,%rbx
66d9:	and    %r11,%rdx
66dc:	xor    %r9,%rcx
66df:	ror    $0x17,%r9
66e3:	xor    %rbx,%rdx
66e6:	xor    %r9,%rcx
66e9:	pop    %r9
66eb:	lea    (%rcx,%rdx,1),%rbx
66ef:	add    %rbx,%r12
66f2:	add    %r12,%r8
66f5:	mov    %r13,%rcx
66f8:	mov    %r13,%rdx
66fb:	ror    $0x1c,%rcx
66ff:	mov    %r13,%rbx
6702:	push   %r13
6704:	xor    %r14,%rdx
6707:	ror    $0x22,%r13
670b:	and    %r14,%rbx
670e:	and    %r15,%rdx
6711:	xor    %r13,%rcx
6714:	ror    $0x5,%r13
6718:	xor    %rbx,%rdx
671b:	xor    %r13,%rcx
671e:	pop    %r13
6720:	lea    (%rcx,%rdx,1),%rbx
6724:	add    %rbx,%r12
6727:	mov    0x20(%rsp),%rax
672c:	mov    0x8(%rsp),%rbx
6731:	shr    $0x7,%rax
6735:	shr    $0x6,%rbx
6739:	mov    0x20(%rsp),%rcx
673e:	mov    0x8(%rsp),%rdx
6743:	ror    %rcx
6746:	ror    $0x13,%rdx
674a:	xor    %rcx,%rax
674d:	xor    %rdx,%rbx
6750:	ror    $0x7,%rcx
6754:	ror    $0x2a,%rdx
6758:	xor    %rcx,%rax
675b:	xor    %rdx,%rbx
675e:	add    0x18(%rsp),%rax
6763:	add    0x60(%rsp),%rbx
6768:	add    %rbx,%rax
676b:	mov    %rax,0x18(%rsp)
6770:	add    0x120(%rbp),%r11
6777:	add    0x20(%rsp),%r11
677c:	mov    %r8,%rcx
677f:	mov    %r8,%rdx
6782:	ror    $0xe,%rcx
6786:	mov    %r8,%rbx
6789:	push   %r8
678b:	not    %rdx
678e:	ror    $0x12,%r8
6792:	and    %r9,%rbx
6795:	and    %r10,%rdx
6798:	xor    %r8,%rcx
679b:	ror    $0x17,%r8
679f:	xor    %rbx,%rdx
67a2:	xor    %r8,%rcx
67a5:	pop    %r8
67a7:	lea    (%rcx,%rdx,1),%rbx
67ab:	add    %rbx,%r11
67ae:	add    %r11,%r15
67b1:	mov    %r12,%rcx
67b4:	mov    %r12,%rdx
67b7:	ror    $0x1c,%rcx
67bb:	mov    %r12,%rbx
67be:	push   %r12
67c0:	xor    %r13,%rdx
67c3:	ror    $0x22,%r12
67c7:	and    %r13,%rbx
67ca:	and    %r14,%rdx
67cd:	xor    %r12,%rcx
67d0:	ror    $0x5,%r12
67d4:	xor    %rbx,%rdx
67d7:	xor    %r12,%rcx
67da:	pop    %r12
67dc:	lea    (%rcx,%rdx,1),%rbx
67e0:	add    %rbx,%r11
67e3:	mov    0x28(%rsp),%rax
67e8:	mov    0x10(%rsp),%rbx
67ed:	shr    $0x7,%rax
67f1:	shr    $0x6,%rbx
67f5:	mov    0x28(%rsp),%rcx
67fa:	mov    0x10(%rsp),%rdx
67ff:	ror    %rcx
6802:	ror    $0x13,%rdx
6806:	xor    %rcx,%rax
6809:	xor    %rdx,%rbx
680c:	ror    $0x7,%rcx
6810:	ror    $0x2a,%rdx
6814:	xor    %rcx,%rax
6817:	xor    %rdx,%rbx
681a:	add    0x20(%rsp),%rax
681f:	add    0x68(%rsp),%rbx
6824:	add    %rbx,%rax
6827:	mov    %rax,0x20(%rsp)
682c:	add    0x128(%rbp),%r10
6833:	add    0x28(%rsp),%r10
6838:	mov    %r15,%rcx
683b:	mov    %r15,%rdx
683e:	ror    $0xe,%rcx
6842:	mov    %r15,%rbx
6845:	push   %r15
6847:	not    %rdx
684a:	ror    $0x12,%r15
684e:	and    %r8,%rbx
6851:	and    %r9,%rdx
6854:	xor    %r15,%rcx
6857:	ror    $0x17,%r15
685b:	xor    %rbx,%rdx
685e:	xor    %r15,%rcx
6861:	pop    %r15
6863:	lea    (%rcx,%rdx,1),%rbx
6867:	add    %rbx,%r10
686a:	add    %r10,%r14
686d:	mov    %r11,%rcx
6870:	mov    %r11,%rdx
6873:	ror    $0x1c,%rcx
6877:	mov    %r11,%rbx
687a:	push   %r11
687c:	xor    %r12,%rdx
687f:	ror    $0x22,%r11
6883:	and    %r12,%rbx
6886:	and    %r13,%rdx
6889:	xor    %r11,%rcx
688c:	ror    $0x5,%r11
6890:	xor    %rbx,%rdx
6893:	xor    %r11,%rcx
6896:	pop    %r11
6898:	lea    (%rcx,%rdx,1),%rbx
689c:	add    %rbx,%r10
689f:	mov    0x30(%rsp),%rax
68a4:	mov    0x18(%rsp),%rbx
68a9:	shr    $0x7,%rax
68ad:	shr    $0x6,%rbx
68b1:	mov    0x30(%rsp),%rcx
68b6:	mov    0x18(%rsp),%rdx
68bb:	ror    %rcx
68be:	ror    $0x13,%rdx
68c2:	xor    %rcx,%rax
68c5:	xor    %rdx,%rbx
68c8:	ror    $0x7,%rcx
68cc:	ror    $0x2a,%rdx
68d0:	xor    %rcx,%rax
68d3:	xor    %rdx,%rbx
68d6:	add    0x28(%rsp),%rax
68db:	add    0x70(%rsp),%rbx
68e0:	add    %rbx,%rax
68e3:	mov    %rax,0x28(%rsp)
68e8:	add    0x130(%rbp),%r9
68ef:	add    0x30(%rsp),%r9
68f4:	mov    %r14,%rcx
68f7:	mov    %r14,%rdx
68fa:	ror    $0xe,%rcx
68fe:	mov    %r14,%rbx
6901:	push   %r14
6903:	not    %rdx
6906:	ror    $0x12,%r14
690a:	and    %r15,%rbx
690d:	and    %r8,%rdx
6910:	xor    %r14,%rcx
6913:	ror    $0x17,%r14
6917:	xor    %rbx,%rdx
691a:	xor    %r14,%rcx
691d:	pop    %r14
691f:	lea    (%rcx,%rdx,1),%rbx
6923:	add    %rbx,%r9
6926:	add    %r9,%r13
6929:	mov    %r10,%rcx
692c:	mov    %r10,%rdx
692f:	ror    $0x1c,%rcx
6933:	mov    %r10,%rbx
6936:	push   %r10
6938:	xor    %r11,%rdx
693b:	ror    $0x22,%r10
693f:	and    %r11,%rbx
6942:	and    %r12,%rdx
6945:	xor    %r10,%rcx
6948:	ror    $0x5,%r10
694c:	xor    %rbx,%rdx
694f:	xor    %r10,%rcx
6952:	pop    %r10
6954:	lea    (%rcx,%rdx,1),%rbx
6958:	add    %rbx,%r9
695b:	mov    0x38(%rsp),%rax
6960:	mov    0x20(%rsp),%rbx
6965:	shr    $0x7,%rax
6969:	shr    $0x6,%rbx
696d:	mov    0x38(%rsp),%rcx
6972:	mov    0x20(%rsp),%rdx
6977:	ror    %rcx
697a:	ror    $0x13,%rdx
697e:	xor    %rcx,%rax
6981:	xor    %rdx,%rbx
6984:	ror    $0x7,%rcx
6988:	ror    $0x2a,%rdx
698c:	xor    %rcx,%rax
698f:	xor    %rdx,%rbx
6992:	add    0x30(%rsp),%rax
6997:	add    0x78(%rsp),%rbx
699c:	add    %rbx,%rax
699f:	mov    %rax,0x30(%rsp)
69a4:	add    0x138(%rbp),%r8
69ab:	add    0x38(%rsp),%r8
69b0:	mov    %r13,%rcx
69b3:	mov    %r13,%rdx
69b6:	ror    $0xe,%rcx
69ba:	mov    %r13,%rbx
69bd:	push   %r13
69bf:	not    %rdx
69c2:	ror    $0x12,%r13
69c6:	and    %r14,%rbx
69c9:	and    %r15,%rdx
69cc:	xor    %r13,%rcx
69cf:	ror    $0x17,%r13
69d3:	xor    %rbx,%rdx
69d6:	xor    %r13,%rcx
69d9:	pop    %r13
69db:	lea    (%rcx,%rdx,1),%rbx
69df:	add    %rbx,%r8
69e2:	add    %r8,%r12
69e5:	mov    %r9,%rcx
69e8:	mov    %r9,%rdx
69eb:	ror    $0x1c,%rcx
69ef:	mov    %r9,%rbx
69f2:	push   %r9
69f4:	xor    %r10,%rdx
69f7:	ror    $0x22,%r9
69fb:	and    %r10,%rbx
69fe:	and    %r11,%rdx
6a01:	xor    %r9,%rcx
6a04:	ror    $0x5,%r9
6a08:	xor    %rbx,%rdx
6a0b:	xor    %r9,%rcx
6a0e:	pop    %r9
6a10:	lea    (%rcx,%rdx,1),%rbx
6a14:	add    %rbx,%r8
6a17:	mov    0x40(%rsp),%rax
6a1c:	mov    0x28(%rsp),%rbx
6a21:	shr    $0x7,%rax
6a25:	shr    $0x6,%rbx
6a29:	mov    0x40(%rsp),%rcx
6a2e:	mov    0x28(%rsp),%rdx
6a33:	ror    %rcx
6a36:	ror    $0x13,%rdx
6a3a:	xor    %rcx,%rax
6a3d:	xor    %rdx,%rbx
6a40:	ror    $0x7,%rcx
6a44:	ror    $0x2a,%rdx
6a48:	xor    %rcx,%rax
6a4b:	xor    %rdx,%rbx
6a4e:	add    0x38(%rsp),%rax
6a53:	add    (%rsp),%rbx
6a57:	add    %rbx,%rax
6a5a:	mov    %rax,0x38(%rsp)
6a5f:	add    0x140(%rbp),%r15
6a66:	add    0x40(%rsp),%r15
6a6b:	mov    %r12,%rcx
6a6e:	mov    %r12,%rdx
6a71:	ror    $0xe,%rcx
6a75:	mov    %r12,%rbx
6a78:	push   %r12
6a7a:	not    %rdx
6a7d:	ror    $0x12,%r12
6a81:	and    %r13,%rbx
6a84:	and    %r14,%rdx
6a87:	xor    %r12,%rcx
6a8a:	ror    $0x17,%r12
6a8e:	xor    %rbx,%rdx
6a91:	xor    %r12,%rcx
6a94:	pop    %r12
6a96:	lea    (%rcx,%rdx,1),%rbx
6a9a:	add    %rbx,%r15
6a9d:	add    %r15,%r11
6aa0:	mov    %r8,%rcx
6aa3:	mov    %r8,%rdx
6aa6:	ror    $0x1c,%rcx
6aaa:	mov    %r8,%rbx
6aad:	push   %r8
6aaf:	xor    %r9,%rdx
6ab2:	ror    $0x22,%r8
6ab6:	and    %r9,%rbx
6ab9:	and    %r10,%rdx
6abc:	xor    %r8,%rcx
6abf:	ror    $0x5,%r8
6ac3:	xor    %rbx,%rdx
6ac6:	xor    %r8,%rcx
6ac9:	pop    %r8
6acb:	lea    (%rcx,%rdx,1),%rbx
6acf:	add    %rbx,%r15
6ad2:	mov    0x48(%rsp),%rax
6ad7:	mov    0x30(%rsp),%rbx
6adc:	shr    $0x7,%rax
6ae0:	shr    $0x6,%rbx
6ae4:	mov    0x48(%rsp),%rcx
6ae9:	mov    0x30(%rsp),%rdx
6aee:	ror    %rcx
6af1:	ror    $0x13,%rdx
6af5:	xor    %rcx,%rax
6af8:	xor    %rdx,%rbx
6afb:	ror    $0x7,%rcx
6aff:	ror    $0x2a,%rdx
6b03:	xor    %rcx,%rax
6b06:	xor    %rdx,%rbx
6b09:	add    0x40(%rsp),%rax
6b0e:	add    0x8(%rsp),%rbx
6b13:	add    %rbx,%rax
6b16:	mov    %rax,0x40(%rsp)
6b1b:	add    0x148(%rbp),%r14
6b22:	add    0x48(%rsp),%r14
6b27:	mov    %r11,%rcx
6b2a:	mov    %r11,%rdx
6b2d:	ror    $0xe,%rcx
6b31:	mov    %r11,%rbx
6b34:	push   %r11
6b36:	not    %rdx
6b39:	ror    $0x12,%r11
6b3d:	and    %r12,%rbx
6b40:	and    %r13,%rdx
6b43:	xor    %r11,%rcx
6b46:	ror    $0x17,%r11
6b4a:	xor    %rbx,%rdx
6b4d:	xor    %r11,%rcx
6b50:	pop    %r11
6b52:	lea    (%rcx,%rdx,1),%rbx
6b56:	add    %rbx,%r14
6b59:	add    %r14,%r10
6b5c:	mov    %r15,%rcx
6b5f:	mov    %r15,%rdx
6b62:	ror    $0x1c,%rcx
6b66:	mov    %r15,%rbx
6b69:	push   %r15
6b6b:	xor    %r8,%rdx
6b6e:	ror    $0x22,%r15
6b72:	and    %r8,%rbx
6b75:	and    %r9,%rdx
6b78:	xor    %r15,%rcx
6b7b:	ror    $0x5,%r15
6b7f:	xor    %rbx,%rdx
6b82:	xor    %r15,%rcx
6b85:	pop    %r15
6b87:	lea    (%rcx,%rdx,1),%rbx
6b8b:	add    %rbx,%r14
6b8e:	mov    0x50(%rsp),%rax
6b93:	mov    0x38(%rsp),%rbx
6b98:	shr    $0x7,%rax
6b9c:	shr    $0x6,%rbx
6ba0:	mov    0x50(%rsp),%rcx
6ba5:	mov    0x38(%rsp),%rdx
6baa:	ror    %rcx
6bad:	ror    $0x13,%rdx
6bb1:	xor    %rcx,%rax
6bb4:	xor    %rdx,%rbx
6bb7:	ror    $0x7,%rcx
6bbb:	ror    $0x2a,%rdx
6bbf:	xor    %rcx,%rax
6bc2:	xor    %rdx,%rbx
6bc5:	add    0x48(%rsp),%rax
6bca:	add    0x10(%rsp),%rbx
6bcf:	add    %rbx,%rax
6bd2:	mov    %rax,0x48(%rsp)
6bd7:	add    0x150(%rbp),%r13
6bde:	add    0x50(%rsp),%r13
6be3:	mov    %r10,%rcx
6be6:	mov    %r10,%rdx
6be9:	ror    $0xe,%rcx
6bed:	mov    %r10,%rbx
6bf0:	push   %r10
6bf2:	not    %rdx
6bf5:	ror    $0x12,%r10
6bf9:	and    %r11,%rbx
6bfc:	and    %r12,%rdx
6bff:	xor    %r10,%rcx
6c02:	ror    $0x17,%r10
6c06:	xor    %rbx,%rdx
6c09:	xor    %r10,%rcx
6c0c:	pop    %r10
6c0e:	lea    (%rcx,%rdx,1),%rbx
6c12:	add    %rbx,%r13
6c15:	add    %r13,%r9
6c18:	mov    %r14,%rcx
6c1b:	mov    %r14,%rdx
6c1e:	ror    $0x1c,%rcx
6c22:	mov    %r14,%rbx
6c25:	push   %r14
6c27:	xor    %r15,%rdx
6c2a:	ror    $0x22,%r14
6c2e:	and    %r15,%rbx
6c31:	and    %r8,%rdx
6c34:	xor    %r14,%rcx
6c37:	ror    $0x5,%r14
6c3b:	xor    %rbx,%rdx
6c3e:	xor    %r14,%rcx
6c41:	pop    %r14
6c43:	lea    (%rcx,%rdx,1),%rbx
6c47:	add    %rbx,%r13
6c4a:	mov    0x58(%rsp),%rax
6c4f:	mov    0x40(%rsp),%rbx
6c54:	shr    $0x7,%rax
6c58:	shr    $0x6,%rbx
6c5c:	mov    0x58(%rsp),%rcx
6c61:	mov    0x40(%rsp),%rdx
6c66:	ror    %rcx
6c69:	ror    $0x13,%rdx
6c6d:	xor    %rcx,%rax
6c70:	xor    %rdx,%rbx
6c73:	ror    $0x7,%rcx
6c77:	ror    $0x2a,%rdx
6c7b:	xor    %rcx,%rax
6c7e:	xor    %rdx,%rbx
6c81:	add    0x50(%rsp),%rax
6c86:	add    0x18(%rsp),%rbx
6c8b:	add    %rbx,%rax
6c8e:	mov    %rax,0x50(%rsp)
6c93:	add    0x158(%rbp),%r12
6c9a:	add    0x58(%rsp),%r12
6c9f:	mov    %r9,%rcx
6ca2:	mov    %r9,%rdx
6ca5:	ror    $0xe,%rcx
6ca9:	mov    %r9,%rbx
6cac:	push   %r9
6cae:	not    %rdx
6cb1:	ror    $0x12,%r9
6cb5:	and    %r10,%rbx
6cb8:	and    %r11,%rdx
6cbb:	xor    %r9,%rcx
6cbe:	ror    $0x17,%r9
6cc2:	xor    %rbx,%rdx
6cc5:	xor    %r9,%rcx
6cc8:	pop    %r9
6cca:	lea    (%rcx,%rdx,1),%rbx
6cce:	add    %rbx,%r12
6cd1:	add    %r12,%r8
6cd4:	mov    %r13,%rcx
6cd7:	mov    %r13,%rdx
6cda:	ror    $0x1c,%rcx
6cde:	mov    %r13,%rbx
6ce1:	push   %r13
6ce3:	xor    %r14,%rdx
6ce6:	ror    $0x22,%r13
6cea:	and    %r14,%rbx
6ced:	and    %r15,%rdx
6cf0:	xor    %r13,%rcx
6cf3:	ror    $0x5,%r13
6cf7:	xor    %rbx,%rdx
6cfa:	xor    %r13,%rcx
6cfd:	pop    %r13
6cff:	lea    (%rcx,%rdx,1),%rbx
6d03:	add    %rbx,%r12
6d06:	mov    0x60(%rsp),%rax
6d0b:	mov    0x48(%rsp),%rbx
6d10:	shr    $0x7,%rax
6d14:	shr    $0x6,%rbx
6d18:	mov    0x60(%rsp),%rcx
6d1d:	mov    0x48(%rsp),%rdx
6d22:	ror    %rcx
6d25:	ror    $0x13,%rdx
6d29:	xor    %rcx,%rax
6d2c:	xor    %rdx,%rbx
6d2f:	ror    $0x7,%rcx
6d33:	ror    $0x2a,%rdx
6d37:	xor    %rcx,%rax
6d3a:	xor    %rdx,%rbx
6d3d:	add    0x58(%rsp),%rax
6d42:	add    0x20(%rsp),%rbx
6d47:	add    %rbx,%rax
6d4a:	mov    %rax,0x58(%rsp)
6d4f:	add    0x160(%rbp),%r11
6d56:	add    0x60(%rsp),%r11
6d5b:	mov    %r8,%rcx
6d5e:	mov    %r8,%rdx
6d61:	ror    $0xe,%rcx
6d65:	mov    %r8,%rbx
6d68:	push   %r8
6d6a:	not    %rdx
6d6d:	ror    $0x12,%r8
6d71:	and    %r9,%rbx
6d74:	and    %r10,%rdx
6d77:	xor    %r8,%rcx
6d7a:	ror    $0x17,%r8
6d7e:	xor    %rbx,%rdx
6d81:	xor    %r8,%rcx
6d84:	pop    %r8
6d86:	lea    (%rcx,%rdx,1),%rbx
6d8a:	add    %rbx,%r11
6d8d:	add    %r11,%r15
6d90:	mov    %r12,%rcx
6d93:	mov    %r12,%rdx
6d96:	ror    $0x1c,%rcx
6d9a:	mov    %r12,%rbx
6d9d:	push   %r12
6d9f:	xor    %r13,%rdx
6da2:	ror    $0x22,%r12
6da6:	and    %r13,%rbx
6da9:	and    %r14,%rdx
6dac:	xor    %r12,%rcx
6daf:	ror    $0x5,%r12
6db3:	xor    %rbx,%rdx
6db6:	xor    %r12,%rcx
6db9:	pop    %r12
6dbb:	lea    (%rcx,%rdx,1),%rbx
6dbf:	add    %rbx,%r11
6dc2:	mov    0x68(%rsp),%rax
6dc7:	mov    0x50(%rsp),%rbx
6dcc:	shr    $0x7,%rax
6dd0:	shr    $0x6,%rbx
6dd4:	mov    0x68(%rsp),%rcx
6dd9:	mov    0x50(%rsp),%rdx
6dde:	ror    %rcx
6de1:	ror    $0x13,%rdx
6de5:	xor    %rcx,%rax
6de8:	xor    %rdx,%rbx
6deb:	ror    $0x7,%rcx
6def:	ror    $0x2a,%rdx
6df3:	xor    %rcx,%rax
6df6:	xor    %rdx,%rbx
6df9:	add    0x60(%rsp),%rax
6dfe:	add    0x28(%rsp),%rbx
6e03:	add    %rbx,%rax
6e06:	mov    %rax,0x60(%rsp)
6e0b:	add    0x168(%rbp),%r10
6e12:	add    0x68(%rsp),%r10
6e17:	mov    %r15,%rcx
6e1a:	mov    %r15,%rdx
6e1d:	ror    $0xe,%rcx
6e21:	mov    %r15,%rbx
6e24:	push   %r15
6e26:	not    %rdx
6e29:	ror    $0x12,%r15
6e2d:	and    %r8,%rbx
6e30:	and    %r9,%rdx
6e33:	xor    %r15,%rcx
6e36:	ror    $0x17,%r15
6e3a:	xor    %rbx,%rdx
6e3d:	xor    %r15,%rcx
6e40:	pop    %r15
6e42:	lea    (%rcx,%rdx,1),%rbx
6e46:	add    %rbx,%r10
6e49:	add    %r10,%r14
6e4c:	mov    %r11,%rcx
6e4f:	mov    %r11,%rdx
6e52:	ror    $0x1c,%rcx
6e56:	mov    %r11,%rbx
6e59:	push   %r11
6e5b:	xor    %r12,%rdx
6e5e:	ror    $0x22,%r11
6e62:	and    %r12,%rbx
6e65:	and    %r13,%rdx
6e68:	xor    %r11,%rcx
6e6b:	ror    $0x5,%r11
6e6f:	xor    %rbx,%rdx
6e72:	xor    %r11,%rcx
6e75:	pop    %r11
6e77:	lea    (%rcx,%rdx,1),%rbx
6e7b:	add    %rbx,%r10
6e7e:	mov    0x70(%rsp),%rax
6e83:	mov    0x58(%rsp),%rbx
6e88:	shr    $0x7,%rax
6e8c:	shr    $0x6,%rbx
6e90:	mov    0x70(%rsp),%rcx
6e95:	mov    0x58(%rsp),%rdx
6e9a:	ror    %rcx
6e9d:	ror    $0x13,%rdx
6ea1:	xor    %rcx,%rax
6ea4:	xor    %rdx,%rbx
6ea7:	ror    $0x7,%rcx
6eab:	ror    $0x2a,%rdx
6eaf:	xor    %rcx,%rax
6eb2:	xor    %rdx,%rbx
6eb5:	add    0x68(%rsp),%rax
6eba:	add    0x30(%rsp),%rbx
6ebf:	add    %rbx,%rax
6ec2:	mov    %rax,0x68(%rsp)
6ec7:	add    0x170(%rbp),%r9
6ece:	add    0x70(%rsp),%r9
6ed3:	mov    %r14,%rcx
6ed6:	mov    %r14,%rdx
6ed9:	ror    $0xe,%rcx
6edd:	mov    %r14,%rbx
6ee0:	push   %r14
6ee2:	not    %rdx
6ee5:	ror    $0x12,%r14
6ee9:	and    %r15,%rbx
6eec:	and    %r8,%rdx
6eef:	xor    %r14,%rcx
6ef2:	ror    $0x17,%r14
6ef6:	xor    %rbx,%rdx
6ef9:	xor    %r14,%rcx
6efc:	pop    %r14
6efe:	lea    (%rcx,%rdx,1),%rbx
6f02:	add    %rbx,%r9
6f05:	add    %r9,%r13
6f08:	mov    %r10,%rcx
6f0b:	mov    %r10,%rdx
6f0e:	ror    $0x1c,%rcx
6f12:	mov    %r10,%rbx
6f15:	push   %r10
6f17:	xor    %r11,%rdx
6f1a:	ror    $0x22,%r10
6f1e:	and    %r11,%rbx
6f21:	and    %r12,%rdx
6f24:	xor    %r10,%rcx
6f27:	ror    $0x5,%r10
6f2b:	xor    %rbx,%rdx
6f2e:	xor    %r10,%rcx
6f31:	pop    %r10
6f33:	lea    (%rcx,%rdx,1),%rbx
6f37:	add    %rbx,%r9
6f3a:	mov    0x78(%rsp),%rax
6f3f:	mov    0x60(%rsp),%rbx
6f44:	shr    $0x7,%rax
6f48:	shr    $0x6,%rbx
6f4c:	mov    0x78(%rsp),%rcx
6f51:	mov    0x60(%rsp),%rdx
6f56:	ror    %rcx
6f59:	ror    $0x13,%rdx
6f5d:	xor    %rcx,%rax
6f60:	xor    %rdx,%rbx
6f63:	ror    $0x7,%rcx
6f67:	ror    $0x2a,%rdx
6f6b:	xor    %rcx,%rax
6f6e:	xor    %rdx,%rbx
6f71:	add    0x70(%rsp),%rax
6f76:	add    0x38(%rsp),%rbx
6f7b:	add    %rbx,%rax
6f7e:	mov    %rax,0x70(%rsp)
6f83:	add    0x178(%rbp),%r8
6f8a:	add    0x78(%rsp),%r8
6f8f:	mov    %r13,%rcx
6f92:	mov    %r13,%rdx
6f95:	ror    $0xe,%rcx
6f99:	mov    %r13,%rbx
6f9c:	push   %r13
6f9e:	not    %rdx
6fa1:	ror    $0x12,%r13
6fa5:	and    %r14,%rbx
6fa8:	and    %r15,%rdx
6fab:	xor    %r13,%rcx
6fae:	ror    $0x17,%r13
6fb2:	xor    %rbx,%rdx
6fb5:	xor    %r13,%rcx
6fb8:	pop    %r13
6fba:	lea    (%rcx,%rdx,1),%rbx
6fbe:	add    %rbx,%r8
6fc1:	add    %r8,%r12
6fc4:	mov    %r9,%rcx
6fc7:	mov    %r9,%rdx
6fca:	ror    $0x1c,%rcx
6fce:	mov    %r9,%rbx
6fd1:	push   %r9
6fd3:	xor    %r10,%rdx
6fd6:	ror    $0x22,%r9
6fda:	and    %r10,%rbx
6fdd:	and    %r11,%rdx
6fe0:	xor    %r9,%rcx
6fe3:	ror    $0x5,%r9
6fe7:	xor    %rbx,%rdx
6fea:	xor    %r9,%rcx
6fed:	pop    %r9
6fef:	lea    (%rcx,%rdx,1),%rbx
6ff3:	add    %rbx,%r8
6ff6:	mov    (%rsp),%rax
6ffa:	mov    0x68(%rsp),%rbx
6fff:	shr    $0x7,%rax
7003:	shr    $0x6,%rbx
7007:	mov    (%rsp),%rcx
700b:	mov    0x68(%rsp),%rdx
7010:	ror    %rcx
7013:	ror    $0x13,%rdx
7017:	xor    %rcx,%rax
701a:	xor    %rdx,%rbx
701d:	ror    $0x7,%rcx
7021:	ror    $0x2a,%rdx
7025:	xor    %rcx,%rax
7028:	xor    %rdx,%rbx
702b:	add    0x78(%rsp),%rax
7030:	add    0x40(%rsp),%rbx
7035:	add    %rbx,%rax
7038:	mov    %rax,0x78(%rsp)
703d:	add    0x180(%rbp),%r15
7044:	add    (%rsp),%r15
7048:	mov    %r12,%rcx
704b:	mov    %r12,%rdx
704e:	ror    $0xe,%rcx
7052:	mov    %r12,%rbx
7055:	push   %r12
7057:	not    %rdx
705a:	ror    $0x12,%r12
705e:	and    %r13,%rbx
7061:	and    %r14,%rdx
7064:	xor    %r12,%rcx
7067:	ror    $0x17,%r12
706b:	xor    %rbx,%rdx
706e:	xor    %r12,%rcx
7071:	pop    %r12
7073:	lea    (%rcx,%rdx,1),%rbx
7077:	add    %rbx,%r15
707a:	add    %r15,%r11
707d:	mov    %r8,%rcx
7080:	mov    %r8,%rdx
7083:	ror    $0x1c,%rcx
7087:	mov    %r8,%rbx
708a:	push   %r8
708c:	xor    %r9,%rdx
708f:	ror    $0x22,%r8
7093:	and    %r9,%rbx
7096:	and    %r10,%rdx
7099:	xor    %r8,%rcx
709c:	ror    $0x5,%r8
70a0:	xor    %rbx,%rdx
70a3:	xor    %r8,%rcx
70a6:	pop    %r8
70a8:	lea    (%rcx,%rdx,1),%rbx
70ac:	add    %rbx,%r15
70af:	mov    0x8(%rsp),%rax
70b4:	mov    0x70(%rsp),%rbx
70b9:	shr    $0x7,%rax
70bd:	shr    $0x6,%rbx
70c1:	mov    0x8(%rsp),%rcx
70c6:	mov    0x70(%rsp),%rdx
70cb:	ror    %rcx
70ce:	ror    $0x13,%rdx
70d2:	xor    %rcx,%rax
70d5:	xor    %rdx,%rbx
70d8:	ror    $0x7,%rcx
70dc:	ror    $0x2a,%rdx
70e0:	xor    %rcx,%rax
70e3:	xor    %rdx,%rbx
70e6:	add    (%rsp),%rax
70ea:	add    0x48(%rsp),%rbx
70ef:	add    %rbx,%rax
70f2:	mov    %rax,(%rsp)
70f6:	add    0x188(%rbp),%r14
70fd:	add    0x8(%rsp),%r14
7102:	mov    %r11,%rcx
7105:	mov    %r11,%rdx
7108:	ror    $0xe,%rcx
710c:	mov    %r11,%rbx
710f:	push   %r11
7111:	not    %rdx
7114:	ror    $0x12,%r11
7118:	and    %r12,%rbx
711b:	and    %r13,%rdx
711e:	xor    %r11,%rcx
7121:	ror    $0x17,%r11
7125:	xor    %rbx,%rdx
7128:	xor    %r11,%rcx
712b:	pop    %r11
712d:	lea    (%rcx,%rdx,1),%rbx
7131:	add    %rbx,%r14
7134:	add    %r14,%r10
7137:	mov    %r15,%rcx
713a:	mov    %r15,%rdx
713d:	ror    $0x1c,%rcx
7141:	mov    %r15,%rbx
7144:	push   %r15
7146:	xor    %r8,%rdx
7149:	ror    $0x22,%r15
714d:	and    %r8,%rbx
7150:	and    %r9,%rdx
7153:	xor    %r15,%rcx
7156:	ror    $0x5,%r15
715a:	xor    %rbx,%rdx
715d:	xor    %r15,%rcx
7160:	pop    %r15
7162:	lea    (%rcx,%rdx,1),%rbx
7166:	add    %rbx,%r14
7169:	mov    0x10(%rsp),%rax
716e:	mov    0x78(%rsp),%rbx
7173:	shr    $0x7,%rax
7177:	shr    $0x6,%rbx
717b:	mov    0x10(%rsp),%rcx
7180:	mov    0x78(%rsp),%rdx
7185:	ror    %rcx
7188:	ror    $0x13,%rdx
718c:	xor    %rcx,%rax
718f:	xor    %rdx,%rbx
7192:	ror    $0x7,%rcx
7196:	ror    $0x2a,%rdx
719a:	xor    %rcx,%rax
719d:	xor    %rdx,%rbx
71a0:	add    0x8(%rsp),%rax
71a5:	add    0x50(%rsp),%rbx
71aa:	add    %rbx,%rax
71ad:	mov    %rax,0x8(%rsp)
71b2:	add    0x190(%rbp),%r13
71b9:	add    0x10(%rsp),%r13
71be:	mov    %r10,%rcx
71c1:	mov    %r10,%rdx
71c4:	ror    $0xe,%rcx
71c8:	mov    %r10,%rbx
71cb:	push   %r10
71cd:	not    %rdx
71d0:	ror    $0x12,%r10
71d4:	and    %r11,%rbx
71d7:	and    %r12,%rdx
71da:	xor    %r10,%rcx
71dd:	ror    $0x17,%r10
71e1:	xor    %rbx,%rdx
71e4:	xor    %r10,%rcx
71e7:	pop    %r10
71e9:	lea    (%rcx,%rdx,1),%rbx
71ed:	add    %rbx,%r13
71f0:	add    %r13,%r9
71f3:	mov    %r14,%rcx
71f6:	mov    %r14,%rdx
71f9:	ror    $0x1c,%rcx
71fd:	mov    %r14,%rbx
7200:	push   %r14
7202:	xor    %r15,%rdx
7205:	ror    $0x22,%r14
7209:	and    %r15,%rbx
720c:	and    %r8,%rdx
720f:	xor    %r14,%rcx
7212:	ror    $0x5,%r14
7216:	xor    %rbx,%rdx
7219:	xor    %r14,%rcx
721c:	pop    %r14
721e:	lea    (%rcx,%rdx,1),%rbx
7222:	add    %rbx,%r13
7225:	mov    0x18(%rsp),%rax
722a:	mov    (%rsp),%rbx
722e:	shr    $0x7,%rax
7232:	shr    $0x6,%rbx
7236:	mov    0x18(%rsp),%rcx
723b:	mov    (%rsp),%rdx
723f:	ror    %rcx
7242:	ror    $0x13,%rdx
7246:	xor    %rcx,%rax
7249:	xor    %rdx,%rbx
724c:	ror    $0x7,%rcx
7250:	ror    $0x2a,%rdx
7254:	xor    %rcx,%rax
7257:	xor    %rdx,%rbx
725a:	add    0x10(%rsp),%rax
725f:	add    0x58(%rsp),%rbx
7264:	add    %rbx,%rax
7267:	mov    %rax,0x10(%rsp)
726c:	add    0x198(%rbp),%r12
7273:	add    0x18(%rsp),%r12
7278:	mov    %r9,%rcx
727b:	mov    %r9,%rdx
727e:	ror    $0xe,%rcx
7282:	mov    %r9,%rbx
7285:	push   %r9
7287:	not    %rdx
728a:	ror    $0x12,%r9
728e:	and    %r10,%rbx
7291:	and    %r11,%rdx
7294:	xor    %r9,%rcx
7297:	ror    $0x17,%r9
729b:	xor    %rbx,%rdx
729e:	xor    %r9,%rcx
72a1:	pop    %r9
72a3:	lea    (%rcx,%rdx,1),%rbx
72a7:	add    %rbx,%r12
72aa:	add    %r12,%r8
72ad:	mov    %r13,%rcx
72b0:	mov    %r13,%rdx
72b3:	ror    $0x1c,%rcx
72b7:	mov    %r13,%rbx
72ba:	push   %r13
72bc:	xor    %r14,%rdx
72bf:	ror    $0x22,%r13
72c3:	and    %r14,%rbx
72c6:	and    %r15,%rdx
72c9:	xor    %r13,%rcx
72cc:	ror    $0x5,%r13
72d0:	xor    %rbx,%rdx
72d3:	xor    %r13,%rcx
72d6:	pop    %r13
72d8:	lea    (%rcx,%rdx,1),%rbx
72dc:	add    %rbx,%r12
72df:	mov    0x20(%rsp),%rax
72e4:	mov    0x8(%rsp),%rbx
72e9:	shr    $0x7,%rax
72ed:	shr    $0x6,%rbx
72f1:	mov    0x20(%rsp),%rcx
72f6:	mov    0x8(%rsp),%rdx
72fb:	ror    %rcx
72fe:	ror    $0x13,%rdx
7302:	xor    %rcx,%rax
7305:	xor    %rdx,%rbx
7308:	ror    $0x7,%rcx
730c:	ror    $0x2a,%rdx
7310:	xor    %rcx,%rax
7313:	xor    %rdx,%rbx
7316:	add    0x18(%rsp),%rax
731b:	add    0x60(%rsp),%rbx
7320:	add    %rbx,%rax
7323:	mov    %rax,0x18(%rsp)
7328:	add    0x1a0(%rbp),%r11
732f:	add    0x20(%rsp),%r11
7334:	mov    %r8,%rcx
7337:	mov    %r8,%rdx
733a:	ror    $0xe,%rcx
733e:	mov    %r8,%rbx
7341:	push   %r8
7343:	not    %rdx
7346:	ror    $0x12,%r8
734a:	and    %r9,%rbx
734d:	and    %r10,%rdx
7350:	xor    %r8,%rcx
7353:	ror    $0x17,%r8
7357:	xor    %rbx,%rdx
735a:	xor    %r8,%rcx
735d:	pop    %r8
735f:	lea    (%rcx,%rdx,1),%rbx
7363:	add    %rbx,%r11
7366:	add    %r11,%r15
7369:	mov    %r12,%rcx
736c:	mov    %r12,%rdx
736f:	ror    $0x1c,%rcx
7373:	mov    %r12,%rbx
7376:	push   %r12
7378:	xor    %r13,%rdx
737b:	ror    $0x22,%r12
737f:	and    %r13,%rbx
7382:	and    %r14,%rdx
7385:	xor    %r12,%rcx
7388:	ror    $0x5,%r12
738c:	xor    %rbx,%rdx
738f:	xor    %r12,%rcx
7392:	pop    %r12
7394:	lea    (%rcx,%rdx,1),%rbx
7398:	add    %rbx,%r11
739b:	mov    0x28(%rsp),%rax
73a0:	mov    0x10(%rsp),%rbx
73a5:	shr    $0x7,%rax
73a9:	shr    $0x6,%rbx
73ad:	mov    0x28(%rsp),%rcx
73b2:	mov    0x10(%rsp),%rdx
73b7:	ror    %rcx
73ba:	ror    $0x13,%rdx
73be:	xor    %rcx,%rax
73c1:	xor    %rdx,%rbx
73c4:	ror    $0x7,%rcx
73c8:	ror    $0x2a,%rdx
73cc:	xor    %rcx,%rax
73cf:	xor    %rdx,%rbx
73d2:	add    0x20(%rsp),%rax
73d7:	add    0x68(%rsp),%rbx
73dc:	add    %rbx,%rax
73df:	mov    %rax,0x20(%rsp)
73e4:	add    0x1a8(%rbp),%r10
73eb:	add    0x28(%rsp),%r10
73f0:	mov    %r15,%rcx
73f3:	mov    %r15,%rdx
73f6:	ror    $0xe,%rcx
73fa:	mov    %r15,%rbx
73fd:	push   %r15
73ff:	not    %rdx
7402:	ror    $0x12,%r15
7406:	and    %r8,%rbx
7409:	and    %r9,%rdx
740c:	xor    %r15,%rcx
740f:	ror    $0x17,%r15
7413:	xor    %rbx,%rdx
7416:	xor    %r15,%rcx
7419:	pop    %r15
741b:	lea    (%rcx,%rdx,1),%rbx
741f:	add    %rbx,%r10
7422:	add    %r10,%r14
7425:	mov    %r11,%rcx
7428:	mov    %r11,%rdx
742b:	ror    $0x1c,%rcx
742f:	mov    %r11,%rbx
7432:	push   %r11
7434:	xor    %r12,%rdx
7437:	ror    $0x22,%r11
743b:	and    %r12,%rbx
743e:	and    %r13,%rdx
7441:	xor    %r11,%rcx
7444:	ror    $0x5,%r11
7448:	xor    %rbx,%rdx
744b:	xor    %r11,%rcx
744e:	pop    %r11
7450:	lea    (%rcx,%rdx,1),%rbx
7454:	add    %rbx,%r10
7457:	mov    0x30(%rsp),%rax
745c:	mov    0x18(%rsp),%rbx
7461:	shr    $0x7,%rax
7465:	shr    $0x6,%rbx
7469:	mov    0x30(%rsp),%rcx
746e:	mov    0x18(%rsp),%rdx
7473:	ror    %rcx
7476:	ror    $0x13,%rdx
747a:	xor    %rcx,%rax
747d:	xor    %rdx,%rbx
7480:	ror    $0x7,%rcx
7484:	ror    $0x2a,%rdx
7488:	xor    %rcx,%rax
748b:	xor    %rdx,%rbx
748e:	add    0x28(%rsp),%rax
7493:	add    0x70(%rsp),%rbx
7498:	add    %rbx,%rax
749b:	mov    %rax,0x28(%rsp)
74a0:	add    0x1b0(%rbp),%r9
74a7:	add    0x30(%rsp),%r9
74ac:	mov    %r14,%rcx
74af:	mov    %r14,%rdx
74b2:	ror    $0xe,%rcx
74b6:	mov    %r14,%rbx
74b9:	push   %r14
74bb:	not    %rdx
74be:	ror    $0x12,%r14
74c2:	and    %r15,%rbx
74c5:	and    %r8,%rdx
74c8:	xor    %r14,%rcx
74cb:	ror    $0x17,%r14
74cf:	xor    %rbx,%rdx
74d2:	xor    %r14,%rcx
74d5:	pop    %r14
74d7:	lea    (%rcx,%rdx,1),%rbx
74db:	add    %rbx,%r9
74de:	add    %r9,%r13
74e1:	mov    %r10,%rcx
74e4:	mov    %r10,%rdx
74e7:	ror    $0x1c,%rcx
74eb:	mov    %r10,%rbx
74ee:	push   %r10
74f0:	xor    %r11,%rdx
74f3:	ror    $0x22,%r10
74f7:	and    %r11,%rbx
74fa:	and    %r12,%rdx
74fd:	xor    %r10,%rcx
7500:	ror    $0x5,%r10
7504:	xor    %rbx,%rdx
7507:	xor    %r10,%rcx
750a:	pop    %r10
750c:	lea    (%rcx,%rdx,1),%rbx
7510:	add    %rbx,%r9
7513:	mov    0x38(%rsp),%rax
7518:	mov    0x20(%rsp),%rbx
751d:	shr    $0x7,%rax
7521:	shr    $0x6,%rbx
7525:	mov    0x38(%rsp),%rcx
752a:	mov    0x20(%rsp),%rdx
752f:	ror    %rcx
7532:	ror    $0x13,%rdx
7536:	xor    %rcx,%rax
7539:	xor    %rdx,%rbx
753c:	ror    $0x7,%rcx
7540:	ror    $0x2a,%rdx
7544:	xor    %rcx,%rax
7547:	xor    %rdx,%rbx
754a:	add    0x30(%rsp),%rax
754f:	add    0x78(%rsp),%rbx
7554:	add    %rbx,%rax
7557:	mov    %rax,0x30(%rsp)
755c:	add    0x1b8(%rbp),%r8
7563:	add    0x38(%rsp),%r8
7568:	mov    %r13,%rcx
756b:	mov    %r13,%rdx
756e:	ror    $0xe,%rcx
7572:	mov    %r13,%rbx
7575:	push   %r13
7577:	not    %rdx
757a:	ror    $0x12,%r13
757e:	and    %r14,%rbx
7581:	and    %r15,%rdx
7584:	xor    %r13,%rcx
7587:	ror    $0x17,%r13
758b:	xor    %rbx,%rdx
758e:	xor    %r13,%rcx
7591:	pop    %r13
7593:	lea    (%rcx,%rdx,1),%rbx
7597:	add    %rbx,%r8
759a:	add    %r8,%r12
759d:	mov    %r9,%rcx
75a0:	mov    %r9,%rdx
75a3:	ror    $0x1c,%rcx
75a7:	mov    %r9,%rbx
75aa:	push   %r9
75ac:	xor    %r10,%rdx
75af:	ror    $0x22,%r9
75b3:	and    %r10,%rbx
75b6:	and    %r11,%rdx
75b9:	xor    %r9,%rcx
75bc:	ror    $0x5,%r9
75c0:	xor    %rbx,%rdx
75c3:	xor    %r9,%rcx
75c6:	pop    %r9
75c8:	lea    (%rcx,%rdx,1),%rbx
75cc:	add    %rbx,%r8
75cf:	mov    0x40(%rsp),%rax
75d4:	mov    0x28(%rsp),%rbx
75d9:	shr    $0x7,%rax
75dd:	shr    $0x6,%rbx
75e1:	mov    0x40(%rsp),%rcx
75e6:	mov    0x28(%rsp),%rdx
75eb:	ror    %rcx
75ee:	ror    $0x13,%rdx
75f2:	xor    %rcx,%rax
75f5:	xor    %rdx,%rbx
75f8:	ror    $0x7,%rcx
75fc:	ror    $0x2a,%rdx
7600:	xor    %rcx,%rax
7603:	xor    %rdx,%rbx
7606:	add    0x38(%rsp),%rax
760b:	add    (%rsp),%rbx
760f:	add    %rbx,%rax
7612:	mov    %rax,0x38(%rsp)
7617:	add    0x1c0(%rbp),%r15
761e:	add    0x40(%rsp),%r15
7623:	mov    %r12,%rcx
7626:	mov    %r12,%rdx
7629:	ror    $0xe,%rcx
762d:	mov    %r12,%rbx
7630:	push   %r12
7632:	not    %rdx
7635:	ror    $0x12,%r12
7639:	and    %r13,%rbx
763c:	and    %r14,%rdx
763f:	xor    %r12,%rcx
7642:	ror    $0x17,%r12
7646:	xor    %rbx,%rdx
7649:	xor    %r12,%rcx
764c:	pop    %r12
764e:	lea    (%rcx,%rdx,1),%rbx
7652:	add    %rbx,%r15
7655:	add    %r15,%r11
7658:	mov    %r8,%rcx
765b:	mov    %r8,%rdx
765e:	ror    $0x1c,%rcx
7662:	mov    %r8,%rbx
7665:	push   %r8
7667:	xor    %r9,%rdx
766a:	ror    $0x22,%r8
766e:	and    %r9,%rbx
7671:	and    %r10,%rdx
7674:	xor    %r8,%rcx
7677:	ror    $0x5,%r8
767b:	xor    %rbx,%rdx
767e:	xor    %r8,%rcx
7681:	pop    %r8
7683:	lea    (%rcx,%rdx,1),%rbx
7687:	add    %rbx,%r15
768a:	mov    0x48(%rsp),%rax
768f:	mov    0x30(%rsp),%rbx
7694:	shr    $0x7,%rax
7698:	shr    $0x6,%rbx
769c:	mov    0x48(%rsp),%rcx
76a1:	mov    0x30(%rsp),%rdx
76a6:	ror    %rcx
76a9:	ror    $0x13,%rdx
76ad:	xor    %rcx,%rax
76b0:	xor    %rdx,%rbx
76b3:	ror    $0x7,%rcx
76b7:	ror    $0x2a,%rdx
76bb:	xor    %rcx,%rax
76be:	xor    %rdx,%rbx
76c1:	add    0x40(%rsp),%rax
76c6:	add    0x8(%rsp),%rbx
76cb:	add    %rbx,%rax
76ce:	mov    %rax,0x40(%rsp)
76d3:	add    0x1c8(%rbp),%r14
76da:	add    0x48(%rsp),%r14
76df:	mov    %r11,%rcx
76e2:	mov    %r11,%rdx
76e5:	ror    $0xe,%rcx
76e9:	mov    %r11,%rbx
76ec:	push   %r11
76ee:	not    %rdx
76f1:	ror    $0x12,%r11
76f5:	and    %r12,%rbx
76f8:	and    %r13,%rdx
76fb:	xor    %r11,%rcx
76fe:	ror    $0x17,%r11
7702:	xor    %rbx,%rdx
7705:	xor    %r11,%rcx
7708:	pop    %r11
770a:	lea    (%rcx,%rdx,1),%rbx
770e:	add    %rbx,%r14
7711:	add    %r14,%r10
7714:	mov    %r15,%rcx
7717:	mov    %r15,%rdx
771a:	ror    $0x1c,%rcx
771e:	mov    %r15,%rbx
7721:	push   %r15
7723:	xor    %r8,%rdx
7726:	ror    $0x22,%r15
772a:	and    %r8,%rbx
772d:	and    %r9,%rdx
7730:	xor    %r15,%rcx
7733:	ror    $0x5,%r15
7737:	xor    %rbx,%rdx
773a:	xor    %r15,%rcx
773d:	pop    %r15
773f:	lea    (%rcx,%rdx,1),%rbx
7743:	add    %rbx,%r14
7746:	mov    0x50(%rsp),%rax
774b:	mov    0x38(%rsp),%rbx
7750:	shr    $0x7,%rax
7754:	shr    $0x6,%rbx
7758:	mov    0x50(%rsp),%rcx
775d:	mov    0x38(%rsp),%rdx
7762:	ror    %rcx
7765:	ror    $0x13,%rdx
7769:	xor    %rcx,%rax
776c:	xor    %rdx,%rbx
776f:	ror    $0x7,%rcx
7773:	ror    $0x2a,%rdx
7777:	xor    %rcx,%rax
777a:	xor    %rdx,%rbx
777d:	add    0x48(%rsp),%rax
7782:	add    0x10(%rsp),%rbx
7787:	add    %rbx,%rax
778a:	mov    %rax,0x48(%rsp)
778f:	add    0x1d0(%rbp),%r13
7796:	add    0x50(%rsp),%r13
779b:	mov    %r10,%rcx
779e:	mov    %r10,%rdx
77a1:	ror    $0xe,%rcx
77a5:	mov    %r10,%rbx
77a8:	push   %r10
77aa:	not    %rdx
77ad:	ror    $0x12,%r10
77b1:	and    %r11,%rbx
77b4:	and    %r12,%rdx
77b7:	xor    %r10,%rcx
77ba:	ror    $0x17,%r10
77be:	xor    %rbx,%rdx
77c1:	xor    %r10,%rcx
77c4:	pop    %r10
77c6:	lea    (%rcx,%rdx,1),%rbx
77ca:	add    %rbx,%r13
77cd:	add    %r13,%r9
77d0:	mov    %r14,%rcx
77d3:	mov    %r14,%rdx
77d6:	ror    $0x1c,%rcx
77da:	mov    %r14,%rbx
77dd:	push   %r14
77df:	xor    %r15,%rdx
77e2:	ror    $0x22,%r14
77e6:	and    %r15,%rbx
77e9:	and    %r8,%rdx
77ec:	xor    %r14,%rcx
77ef:	ror    $0x5,%r14
77f3:	xor    %rbx,%rdx
77f6:	xor    %r14,%rcx
77f9:	pop    %r14
77fb:	lea    (%rcx,%rdx,1),%rbx
77ff:	add    %rbx,%r13
7802:	mov    0x58(%rsp),%rax
7807:	mov    0x40(%rsp),%rbx
780c:	shr    $0x7,%rax
7810:	shr    $0x6,%rbx
7814:	mov    0x58(%rsp),%rcx
7819:	mov    0x40(%rsp),%rdx
781e:	ror    %rcx
7821:	ror    $0x13,%rdx
7825:	xor    %rcx,%rax
7828:	xor    %rdx,%rbx
782b:	ror    $0x7,%rcx
782f:	ror    $0x2a,%rdx
7833:	xor    %rcx,%rax
7836:	xor    %rdx,%rbx
7839:	add    0x50(%rsp),%rax
783e:	add    0x18(%rsp),%rbx
7843:	add    %rbx,%rax
7846:	mov    %rax,0x50(%rsp)
784b:	add    0x1d8(%rbp),%r12
7852:	add    0x58(%rsp),%r12
7857:	mov    %r9,%rcx
785a:	mov    %r9,%rdx
785d:	ror    $0xe,%rcx
7861:	mov    %r9,%rbx
7864:	push   %r9
7866:	not    %rdx
7869:	ror    $0x12,%r9
786d:	and    %r10,%rbx
7870:	and    %r11,%rdx
7873:	xor    %r9,%rcx
7876:	ror    $0x17,%r9
787a:	xor    %rbx,%rdx
787d:	xor    %r9,%rcx
7880:	pop    %r9
7882:	lea    (%rcx,%rdx,1),%rbx
7886:	add    %rbx,%r12
7889:	add    %r12,%r8
788c:	mov    %r13,%rcx
788f:	mov    %r13,%rdx
7892:	ror    $0x1c,%rcx
7896:	mov    %r13,%rbx
7899:	push   %r13
789b:	xor    %r14,%rdx
789e:	ror    $0x22,%r13
78a2:	and    %r14,%rbx
78a5:	and    %r15,%rdx
78a8:	xor    %r13,%rcx
78ab:	ror    $0x5,%r13
78af:	xor    %rbx,%rdx
78b2:	xor    %r13,%rcx
78b5:	pop    %r13
78b7:	lea    (%rcx,%rdx,1),%rbx
78bb:	add    %rbx,%r12
78be:	mov    0x60(%rsp),%rax
78c3:	mov    0x48(%rsp),%rbx
78c8:	shr    $0x7,%rax
78cc:	shr    $0x6,%rbx
78d0:	mov    0x60(%rsp),%rcx
78d5:	mov    0x48(%rsp),%rdx
78da:	ror    %rcx
78dd:	ror    $0x13,%rdx
78e1:	xor    %rcx,%rax
78e4:	xor    %rdx,%rbx
78e7:	ror    $0x7,%rcx
78eb:	ror    $0x2a,%rdx
78ef:	xor    %rcx,%rax
78f2:	xor    %rdx,%rbx
78f5:	add    0x58(%rsp),%rax
78fa:	add    0x20(%rsp),%rbx
78ff:	add    %rbx,%rax
7902:	mov    %rax,0x58(%rsp)
7907:	add    0x1e0(%rbp),%r11
790e:	add    0x60(%rsp),%r11
7913:	mov    %r8,%rcx
7916:	mov    %r8,%rdx
7919:	ror    $0xe,%rcx
791d:	mov    %r8,%rbx
7920:	push   %r8
7922:	not    %rdx
7925:	ror    $0x12,%r8
7929:	and    %r9,%rbx
792c:	and    %r10,%rdx
792f:	xor    %r8,%rcx
7932:	ror    $0x17,%r8
7936:	xor    %rbx,%rdx
7939:	xor    %r8,%rcx
793c:	pop    %r8
793e:	lea    (%rcx,%rdx,1),%rbx
7942:	add    %rbx,%r11
7945:	add    %r11,%r15
7948:	mov    %r12,%rcx
794b:	mov    %r12,%rdx
794e:	ror    $0x1c,%rcx
7952:	mov    %r12,%rbx
7955:	push   %r12
7957:	xor    %r13,%rdx
795a:	ror    $0x22,%r12
795e:	and    %r13,%rbx
7961:	and    %r14,%rdx
7964:	xor    %r12,%rcx
7967:	ror    $0x5,%r12
796b:	xor    %rbx,%rdx
796e:	xor    %r12,%rcx
7971:	pop    %r12
7973:	lea    (%rcx,%rdx,1),%rbx
7977:	add    %rbx,%r11
797a:	mov    0x68(%rsp),%rax
797f:	mov    0x50(%rsp),%rbx
7984:	shr    $0x7,%rax
7988:	shr    $0x6,%rbx
798c:	mov    0x68(%rsp),%rcx
7991:	mov    0x50(%rsp),%rdx
7996:	ror    %rcx
7999:	ror    $0x13,%rdx
799d:	xor    %rcx,%rax
79a0:	xor    %rdx,%rbx
79a3:	ror    $0x7,%rcx
79a7:	ror    $0x2a,%rdx
79ab:	xor    %rcx,%rax
79ae:	xor    %rdx,%rbx
79b1:	add    0x60(%rsp),%rax
79b6:	add    0x28(%rsp),%rbx
79bb:	add    %rbx,%rax
79be:	mov    %rax,0x60(%rsp)
79c3:	add    0x1e8(%rbp),%r10
79ca:	add    0x68(%rsp),%r10
79cf:	mov    %r15,%rcx
79d2:	mov    %r15,%rdx
79d5:	ror    $0xe,%rcx
79d9:	mov    %r15,%rbx
79dc:	push   %r15
79de:	not    %rdx
79e1:	ror    $0x12,%r15
79e5:	and    %r8,%rbx
79e8:	and    %r9,%rdx
79eb:	xor    %r15,%rcx
79ee:	ror    $0x17,%r15
79f2:	xor    %rbx,%rdx
79f5:	xor    %r15,%rcx
79f8:	pop    %r15
79fa:	lea    (%rcx,%rdx,1),%rbx
79fe:	add    %rbx,%r10
7a01:	add    %r10,%r14
7a04:	mov    %r11,%rcx
7a07:	mov    %r11,%rdx
7a0a:	ror    $0x1c,%rcx
7a0e:	mov    %r11,%rbx
7a11:	push   %r11
7a13:	xor    %r12,%rdx
7a16:	ror    $0x22,%r11
7a1a:	and    %r12,%rbx
7a1d:	and    %r13,%rdx
7a20:	xor    %r11,%rcx
7a23:	ror    $0x5,%r11
7a27:	xor    %rbx,%rdx
7a2a:	xor    %r11,%rcx
7a2d:	pop    %r11
7a2f:	lea    (%rcx,%rdx,1),%rbx
7a33:	add    %rbx,%r10
7a36:	mov    0x70(%rsp),%rax
7a3b:	mov    0x58(%rsp),%rbx
7a40:	shr    $0x7,%rax
7a44:	shr    $0x6,%rbx
7a48:	mov    0x70(%rsp),%rcx
7a4d:	mov    0x58(%rsp),%rdx
7a52:	ror    %rcx
7a55:	ror    $0x13,%rdx
7a59:	xor    %rcx,%rax
7a5c:	xor    %rdx,%rbx
7a5f:	ror    $0x7,%rcx
7a63:	ror    $0x2a,%rdx
7a67:	xor    %rcx,%rax
7a6a:	xor    %rdx,%rbx
7a6d:	add    0x68(%rsp),%rax
7a72:	add    0x30(%rsp),%rbx
7a77:	add    %rbx,%rax
7a7a:	mov    %rax,0x68(%rsp)
7a7f:	add    0x1f0(%rbp),%r9
7a86:	add    0x70(%rsp),%r9
7a8b:	mov    %r14,%rcx
7a8e:	mov    %r14,%rdx
7a91:	ror    $0xe,%rcx
7a95:	mov    %r14,%rbx
7a98:	push   %r14
7a9a:	not    %rdx
7a9d:	ror    $0x12,%r14
7aa1:	and    %r15,%rbx
7aa4:	and    %r8,%rdx
7aa7:	xor    %r14,%rcx
7aaa:	ror    $0x17,%r14
7aae:	xor    %rbx,%rdx
7ab1:	xor    %r14,%rcx
7ab4:	pop    %r14
7ab6:	lea    (%rcx,%rdx,1),%rbx
7aba:	add    %rbx,%r9
7abd:	add    %r9,%r13
7ac0:	mov    %r10,%rcx
7ac3:	mov    %r10,%rdx
7ac6:	ror    $0x1c,%rcx
7aca:	mov    %r10,%rbx
7acd:	push   %r10
7acf:	xor    %r11,%rdx
7ad2:	ror    $0x22,%r10
7ad6:	and    %r11,%rbx
7ad9:	and    %r12,%rdx
7adc:	xor    %r10,%rcx
7adf:	ror    $0x5,%r10
7ae3:	xor    %rbx,%rdx
7ae6:	xor    %r10,%rcx
7ae9:	pop    %r10
7aeb:	lea    (%rcx,%rdx,1),%rbx
7aef:	add    %rbx,%r9
7af2:	mov    0x78(%rsp),%rax
7af7:	mov    0x60(%rsp),%rbx
7afc:	shr    $0x7,%rax
7b00:	shr    $0x6,%rbx
7b04:	mov    0x78(%rsp),%rcx
7b09:	mov    0x60(%rsp),%rdx
7b0e:	ror    %rcx
7b11:	ror    $0x13,%rdx
7b15:	xor    %rcx,%rax
7b18:	xor    %rdx,%rbx
7b1b:	ror    $0x7,%rcx
7b1f:	ror    $0x2a,%rdx
7b23:	xor    %rcx,%rax
7b26:	xor    %rdx,%rbx
7b29:	add    0x70(%rsp),%rax
7b2e:	add    0x38(%rsp),%rbx
7b33:	add    %rbx,%rax
7b36:	mov    %rax,0x70(%rsp)
7b3b:	add    0x1f8(%rbp),%r8
7b42:	add    0x78(%rsp),%r8
7b47:	mov    %r13,%rcx
7b4a:	mov    %r13,%rdx
7b4d:	ror    $0xe,%rcx
7b51:	mov    %r13,%rbx
7b54:	push   %r13
7b56:	not    %rdx
7b59:	ror    $0x12,%r13
7b5d:	and    %r14,%rbx
7b60:	and    %r15,%rdx
7b63:	xor    %r13,%rcx
7b66:	ror    $0x17,%r13
7b6a:	xor    %rbx,%rdx
7b6d:	xor    %r13,%rcx
7b70:	pop    %r13
7b72:	lea    (%rcx,%rdx,1),%rbx
7b76:	add    %rbx,%r8
7b79:	add    %r8,%r12
7b7c:	mov    %r9,%rcx
7b7f:	mov    %r9,%rdx
7b82:	ror    $0x1c,%rcx
7b86:	mov    %r9,%rbx
7b89:	push   %r9
7b8b:	xor    %r10,%rdx
7b8e:	ror    $0x22,%r9
7b92:	and    %r10,%rbx
7b95:	and    %r11,%rdx
7b98:	xor    %r9,%rcx
7b9b:	ror    $0x5,%r9
7b9f:	xor    %rbx,%rdx
7ba2:	xor    %r9,%rcx
7ba5:	pop    %r9
7ba7:	lea    (%rcx,%rdx,1),%rbx
7bab:	add    %rbx,%r8
7bae:	mov    (%rsp),%rax
7bb2:	mov    0x68(%rsp),%rbx
7bb7:	shr    $0x7,%rax
7bbb:	shr    $0x6,%rbx
7bbf:	mov    (%rsp),%rcx
7bc3:	mov    0x68(%rsp),%rdx
7bc8:	ror    %rcx
7bcb:	ror    $0x13,%rdx
7bcf:	xor    %rcx,%rax
7bd2:	xor    %rdx,%rbx
7bd5:	ror    $0x7,%rcx
7bd9:	ror    $0x2a,%rdx
7bdd:	xor    %rcx,%rax
7be0:	xor    %rdx,%rbx
7be3:	add    0x78(%rsp),%rax
7be8:	add    0x40(%rsp),%rbx
7bed:	add    %rbx,%rax
7bf0:	mov    %rax,0x78(%rsp)
7bf5:	add    0x200(%rbp),%r15
7bfc:	add    (%rsp),%r15
7c00:	mov    %r12,%rcx
7c03:	mov    %r12,%rdx
7c06:	ror    $0xe,%rcx
7c0a:	mov    %r12,%rbx
7c0d:	push   %r12
7c0f:	not    %rdx
7c12:	ror    $0x12,%r12
7c16:	and    %r13,%rbx
7c19:	and    %r14,%rdx
7c1c:	xor    %r12,%rcx
7c1f:	ror    $0x17,%r12
7c23:	xor    %rbx,%rdx
7c26:	xor    %r12,%rcx
7c29:	pop    %r12
7c2b:	lea    (%rcx,%rdx,1),%rbx
7c2f:	add    %rbx,%r15
7c32:	add    %r15,%r11
7c35:	mov    %r8,%rcx
7c38:	mov    %r8,%rdx
7c3b:	ror    $0x1c,%rcx
7c3f:	mov    %r8,%rbx
7c42:	push   %r8
7c44:	xor    %r9,%rdx
7c47:	ror    $0x22,%r8
7c4b:	and    %r9,%rbx
7c4e:	and    %r10,%rdx
7c51:	xor    %r8,%rcx
7c54:	ror    $0x5,%r8
7c58:	xor    %rbx,%rdx
7c5b:	xor    %r8,%rcx
7c5e:	pop    %r8
7c60:	lea    (%rcx,%rdx,1),%rbx
7c64:	add    %rbx,%r15
7c67:	add    0x208(%rbp),%r14
7c6e:	add    0x8(%rsp),%r14
7c73:	mov    %r11,%rcx
7c76:	mov    %r11,%rdx
7c79:	ror    $0xe,%rcx
7c7d:	mov    %r11,%rbx
7c80:	push   %r11
7c82:	not    %rdx
7c85:	ror    $0x12,%r11
7c89:	and    %r12,%rbx
7c8c:	and    %r13,%rdx
7c8f:	xor    %r11,%rcx
7c92:	ror    $0x17,%r11
7c96:	xor    %rbx,%rdx
7c99:	xor    %r11,%rcx
7c9c:	pop    %r11
7c9e:	lea    (%rcx,%rdx,1),%rbx
7ca2:	add    %rbx,%r14
7ca5:	add    %r14,%r10
7ca8:	mov    %r15,%rcx
7cab:	mov    %r15,%rdx
7cae:	ror    $0x1c,%rcx
7cb2:	mov    %r15,%rbx
7cb5:	push   %r15
7cb7:	xor    %r8,%rdx
7cba:	ror    $0x22,%r15
7cbe:	and    %r8,%rbx
7cc1:	and    %r9,%rdx
7cc4:	xor    %r15,%rcx
7cc7:	ror    $0x5,%r15
7ccb:	xor    %rbx,%rdx
7cce:	xor    %r15,%rcx
7cd1:	pop    %r15
7cd3:	lea    (%rcx,%rdx,1),%rbx
7cd7:	add    %rbx,%r14
7cda:	add    0x210(%rbp),%r13
7ce1:	add    0x10(%rsp),%r13
7ce6:	mov    %r10,%rcx
7ce9:	mov    %r10,%rdx
7cec:	ror    $0xe,%rcx
7cf0:	mov    %r10,%rbx
7cf3:	push   %r10
7cf5:	not    %rdx
7cf8:	ror    $0x12,%r10
7cfc:	and    %r11,%rbx
7cff:	and    %r12,%rdx
7d02:	xor    %r10,%rcx
7d05:	ror    $0x17,%r10
7d09:	xor    %rbx,%rdx
7d0c:	xor    %r10,%rcx
7d0f:	pop    %r10
7d11:	lea    (%rcx,%rdx,1),%rbx
7d15:	add    %rbx,%r13
7d18:	add    %r13,%r9
7d1b:	mov    %r14,%rcx
7d1e:	mov    %r14,%rdx
7d21:	ror    $0x1c,%rcx
7d25:	mov    %r14,%rbx
7d28:	push   %r14
7d2a:	xor    %r15,%rdx
7d2d:	ror    $0x22,%r14
7d31:	and    %r15,%rbx
7d34:	and    %r8,%rdx
7d37:	xor    %r14,%rcx
7d3a:	ror    $0x5,%r14
7d3e:	xor    %rbx,%rdx
7d41:	xor    %r14,%rcx
7d44:	pop    %r14
7d46:	lea    (%rcx,%rdx,1),%rbx
7d4a:	add    %rbx,%r13
7d4d:	add    0x218(%rbp),%r12
7d54:	add    0x18(%rsp),%r12
7d59:	mov    %r9,%rcx
7d5c:	mov    %r9,%rdx
7d5f:	ror    $0xe,%rcx
7d63:	mov    %r9,%rbx
7d66:	push   %r9
7d68:	not    %rdx
7d6b:	ror    $0x12,%r9
7d6f:	and    %r10,%rbx
7d72:	and    %r11,%rdx
7d75:	xor    %r9,%rcx
7d78:	ror    $0x17,%r9
7d7c:	xor    %rbx,%rdx
7d7f:	xor    %r9,%rcx
7d82:	pop    %r9
7d84:	lea    (%rcx,%rdx,1),%rbx
7d88:	add    %rbx,%r12
7d8b:	add    %r12,%r8
7d8e:	mov    %r13,%rcx
7d91:	mov    %r13,%rdx
7d94:	ror    $0x1c,%rcx
7d98:	mov    %r13,%rbx
7d9b:	push   %r13
7d9d:	xor    %r14,%rdx
7da0:	ror    $0x22,%r13
7da4:	and    %r14,%rbx
7da7:	and    %r15,%rdx
7daa:	xor    %r13,%rcx
7dad:	ror    $0x5,%r13
7db1:	xor    %rbx,%rdx
7db4:	xor    %r13,%rcx
7db7:	pop    %r13
7db9:	lea    (%rcx,%rdx,1),%rbx
7dbd:	add    %rbx,%r12
7dc0:	add    0x220(%rbp),%r11
7dc7:	add    0x20(%rsp),%r11
7dcc:	mov    %r8,%rcx
7dcf:	mov    %r8,%rdx
7dd2:	ror    $0xe,%rcx
7dd6:	mov    %r8,%rbx
7dd9:	push   %r8
7ddb:	not    %rdx
7dde:	ror    $0x12,%r8
7de2:	and    %r9,%rbx
7de5:	and    %r10,%rdx
7de8:	xor    %r8,%rcx
7deb:	ror    $0x17,%r8
7def:	xor    %rbx,%rdx
7df2:	xor    %r8,%rcx
7df5:	pop    %r8
7df7:	lea    (%rcx,%rdx,1),%rbx
7dfb:	add    %rbx,%r11
7dfe:	add    %r11,%r15
7e01:	mov    %r12,%rcx
7e04:	mov    %r12,%rdx
7e07:	ror    $0x1c,%rcx
7e0b:	mov    %r12,%rbx
7e0e:	push   %r12
7e10:	xor    %r13,%rdx
7e13:	ror    $0x22,%r12
7e17:	and    %r13,%rbx
7e1a:	and    %r14,%rdx
7e1d:	xor    %r12,%rcx
7e20:	ror    $0x5,%r12
7e24:	xor    %rbx,%rdx
7e27:	xor    %r12,%rcx
7e2a:	pop    %r12
7e2c:	lea    (%rcx,%rdx,1),%rbx
7e30:	add    %rbx,%r11
7e33:	add    0x228(%rbp),%r10
7e3a:	add    0x28(%rsp),%r10
7e3f:	mov    %r15,%rcx
7e42:	mov    %r15,%rdx
7e45:	ror    $0xe,%rcx
7e49:	mov    %r15,%rbx
7e4c:	push   %r15
7e4e:	not    %rdx
7e51:	ror    $0x12,%r15
7e55:	and    %r8,%rbx
7e58:	and    %r9,%rdx
7e5b:	xor    %r15,%rcx
7e5e:	ror    $0x17,%r15
7e62:	xor    %rbx,%rdx
7e65:	xor    %r15,%rcx
7e68:	pop    %r15
7e6a:	lea    (%rcx,%rdx,1),%rbx
7e6e:	add    %rbx,%r10
7e71:	add    %r10,%r14
7e74:	mov    %r11,%rcx
7e77:	mov    %r11,%rdx
7e7a:	ror    $0x1c,%rcx
7e7e:	mov    %r11,%rbx
7e81:	push   %r11
7e83:	xor    %r12,%rdx
7e86:	ror    $0x22,%r11
7e8a:	and    %r12,%rbx
7e8d:	and    %r13,%rdx
7e90:	xor    %r11,%rcx
7e93:	ror    $0x5,%r11
7e97:	xor    %rbx,%rdx
7e9a:	xor    %r11,%rcx
7e9d:	pop    %r11
7e9f:	lea    (%rcx,%rdx,1),%rbx
7ea3:	add    %rbx,%r10
7ea6:	add    0x230(%rbp),%r9
7ead:	add    0x30(%rsp),%r9
7eb2:	mov    %r14,%rcx
7eb5:	mov    %r14,%rdx
7eb8:	ror    $0xe,%rcx
7ebc:	mov    %r14,%rbx
7ebf:	push   %r14
7ec1:	not    %rdx
7ec4:	ror    $0x12,%r14
7ec8:	and    %r15,%rbx
7ecb:	and    %r8,%rdx
7ece:	xor    %r14,%rcx
7ed1:	ror    $0x17,%r14
7ed5:	xor    %rbx,%rdx
7ed8:	xor    %r14,%rcx
7edb:	pop    %r14
7edd:	lea    (%rcx,%rdx,1),%rbx
7ee1:	add    %rbx,%r9
7ee4:	add    %r9,%r13
7ee7:	mov    %r10,%rcx
7eea:	mov    %r10,%rdx
7eed:	ror    $0x1c,%rcx
7ef1:	mov    %r10,%rbx
7ef4:	push   %r10
7ef6:	xor    %r11,%rdx
7ef9:	ror    $0x22,%r10
7efd:	and    %r11,%rbx
7f00:	and    %r12,%rdx
7f03:	xor    %r10,%rcx
7f06:	ror    $0x5,%r10
7f0a:	xor    %rbx,%rdx
7f0d:	xor    %r10,%rcx
7f10:	pop    %r10
7f12:	lea    (%rcx,%rdx,1),%rbx
7f16:	add    %rbx,%r9
7f19:	add    0x238(%rbp),%r8
7f20:	add    0x38(%rsp),%r8
7f25:	mov    %r13,%rcx
7f28:	mov    %r13,%rdx
7f2b:	ror    $0xe,%rcx
7f2f:	mov    %r13,%rbx
7f32:	push   %r13
7f34:	not    %rdx
7f37:	ror    $0x12,%r13
7f3b:	and    %r14,%rbx
7f3e:	and    %r15,%rdx
7f41:	xor    %r13,%rcx
7f44:	ror    $0x17,%r13
7f48:	xor    %rbx,%rdx
7f4b:	xor    %r13,%rcx
7f4e:	pop    %r13
7f50:	lea    (%rcx,%rdx,1),%rbx
7f54:	add    %rbx,%r8
7f57:	add    %r8,%r12
7f5a:	mov    %r9,%rcx
7f5d:	mov    %r9,%rdx
7f60:	ror    $0x1c,%rcx
7f64:	mov    %r9,%rbx
7f67:	push   %r9
7f69:	xor    %r10,%rdx
7f6c:	ror    $0x22,%r9
7f70:	and    %r10,%rbx
7f73:	and    %r11,%rdx
7f76:	xor    %r9,%rcx
7f79:	ror    $0x5,%r9
7f7d:	xor    %rbx,%rdx
7f80:	xor    %r9,%rcx
7f83:	pop    %r9
7f85:	lea    (%rcx,%rdx,1),%rbx
7f89:	add    %rbx,%r8
7f8c:	add    0x240(%rbp),%r15
7f93:	add    0x40(%rsp),%r15
7f98:	mov    %r12,%rcx
7f9b:	mov    %r12,%rdx
7f9e:	ror    $0xe,%rcx
7fa2:	mov    %r12,%rbx
7fa5:	push   %r12
7fa7:	not    %rdx
7faa:	ror    $0x12,%r12
7fae:	and    %r13,%rbx
7fb1:	and    %r14,%rdx
7fb4:	xor    %r12,%rcx
7fb7:	ror    $0x17,%r12
7fbb:	xor    %rbx,%rdx
7fbe:	xor    %r12,%rcx
7fc1:	pop    %r12
7fc3:	lea    (%rcx,%rdx,1),%rbx
7fc7:	add    %rbx,%r15
7fca:	add    %r15,%r11
7fcd:	mov    %r8,%rcx
7fd0:	mov    %r8,%rdx
7fd3:	ror    $0x1c,%rcx
7fd7:	mov    %r8,%rbx
7fda:	push   %r8
7fdc:	xor    %r9,%rdx
7fdf:	ror    $0x22,%r8
7fe3:	and    %r9,%rbx
7fe6:	and    %r10,%rdx
7fe9:	xor    %r8,%rcx
7fec:	ror    $0x5,%r8
7ff0:	xor    %rbx,%rdx
7ff3:	xor    %r8,%rcx
7ff6:	pop    %r8
7ff8:	lea    (%rcx,%rdx,1),%rbx
7ffc:	add    %rbx,%r15
7fff:	add    0x248(%rbp),%r14
8006:	add    0x48(%rsp),%r14
800b:	mov    %r11,%rcx
800e:	mov    %r11,%rdx
8011:	ror    $0xe,%rcx
8015:	mov    %r11,%rbx
8018:	push   %r11
801a:	not    %rdx
801d:	ror    $0x12,%r11
8021:	and    %r12,%rbx
8024:	and    %r13,%rdx
8027:	xor    %r11,%rcx
802a:	ror    $0x17,%r11
802e:	xor    %rbx,%rdx
8031:	xor    %r11,%rcx
8034:	pop    %r11
8036:	lea    (%rcx,%rdx,1),%rbx
803a:	add    %rbx,%r14
803d:	add    %r14,%r10
8040:	mov    %r15,%rcx
8043:	mov    %r15,%rdx
8046:	ror    $0x1c,%rcx
804a:	mov    %r15,%rbx
804d:	push   %r15
804f:	xor    %r8,%rdx
8052:	ror    $0x22,%r15
8056:	and    %r8,%rbx
8059:	and    %r9,%rdx
805c:	xor    %r15,%rcx
805f:	ror    $0x5,%r15
8063:	xor    %rbx,%rdx
8066:	xor    %r15,%rcx
8069:	pop    %r15
806b:	lea    (%rcx,%rdx,1),%rbx
806f:	add    %rbx,%r14
8072:	add    0x250(%rbp),%r13
8079:	add    0x50(%rsp),%r13
807e:	mov    %r10,%rcx
8081:	mov    %r10,%rdx
8084:	ror    $0xe,%rcx
8088:	mov    %r10,%rbx
808b:	push   %r10
808d:	not    %rdx
8090:	ror    $0x12,%r10
8094:	and    %r11,%rbx
8097:	and    %r12,%rdx
809a:	xor    %r10,%rcx
809d:	ror    $0x17,%r10
80a1:	xor    %rbx,%rdx
80a4:	xor    %r10,%rcx
80a7:	pop    %r10
80a9:	lea    (%rcx,%rdx,1),%rbx
80ad:	add    %rbx,%r13
80b0:	add    %r13,%r9
80b3:	mov    %r14,%rcx
80b6:	mov    %r14,%rdx
80b9:	ror    $0x1c,%rcx
80bd:	mov    %r14,%rbx
80c0:	push   %r14
80c2:	xor    %r15,%rdx
80c5:	ror    $0x22,%r14
80c9:	and    %r15,%rbx
80cc:	and    %r8,%rdx
80cf:	xor    %r14,%rcx
80d2:	ror    $0x5,%r14
80d6:	xor    %rbx,%rdx
80d9:	xor    %r14,%rcx
80dc:	pop    %r14
80de:	lea    (%rcx,%rdx,1),%rbx
80e2:	add    %rbx,%r13
80e5:	add    0x258(%rbp),%r12
80ec:	add    0x58(%rsp),%r12
80f1:	mov    %r9,%rcx
80f4:	mov    %r9,%rdx
80f7:	ror    $0xe,%rcx
80fb:	mov    %r9,%rbx
80fe:	push   %r9
8100:	not    %rdx
8103:	ror    $0x12,%r9
8107:	and    %r10,%rbx
810a:	and    %r11,%rdx
810d:	xor    %r9,%rcx
8110:	ror    $0x17,%r9
8114:	xor    %rbx,%rdx
8117:	xor    %r9,%rcx
811a:	pop    %r9
811c:	lea    (%rcx,%rdx,1),%rbx
8120:	add    %rbx,%r12
8123:	add    %r12,%r8
8126:	mov    %r13,%rcx
8129:	mov    %r13,%rdx
812c:	ror    $0x1c,%rcx
8130:	mov    %r13,%rbx
8133:	push   %r13
8135:	xor    %r14,%rdx
8138:	ror    $0x22,%r13
813c:	and    %r14,%rbx
813f:	and    %r15,%rdx
8142:	xor    %r13,%rcx
8145:	ror    $0x5,%r13
8149:	xor    %rbx,%rdx
814c:	xor    %r13,%rcx
814f:	pop    %r13
8151:	lea    (%rcx,%rdx,1),%rbx
8155:	add    %rbx,%r12
8158:	add    0x260(%rbp),%r11
815f:	add    0x60(%rsp),%r11
8164:	mov    %r8,%rcx
8167:	mov    %r8,%rdx
816a:	ror    $0xe,%rcx
816e:	mov    %r8,%rbx
8171:	push   %r8
8173:	not    %rdx
8176:	ror    $0x12,%r8
817a:	and    %r9,%rbx
817d:	and    %r10,%rdx
8180:	xor    %r8,%rcx
8183:	ror    $0x17,%r8
8187:	xor    %rbx,%rdx
818a:	xor    %r8,%rcx
818d:	pop    %r8
818f:	lea    (%rcx,%rdx,1),%rbx
8193:	add    %rbx,%r11
8196:	add    %r11,%r15
8199:	mov    %r12,%rcx
819c:	mov    %r12,%rdx
819f:	ror    $0x1c,%rcx
81a3:	mov    %r12,%rbx
81a6:	push   %r12
81a8:	xor    %r13,%rdx
81ab:	ror    $0x22,%r12
81af:	and    %r13,%rbx
81b2:	and    %r14,%rdx
81b5:	xor    %r12,%rcx
81b8:	ror    $0x5,%r12
81bc:	xor    %rbx,%rdx
81bf:	xor    %r12,%rcx
81c2:	pop    %r12
81c4:	lea    (%rcx,%rdx,1),%rbx
81c8:	add    %rbx,%r11
81cb:	add    0x268(%rbp),%r10
81d2:	add    0x68(%rsp),%r10
81d7:	mov    %r15,%rcx
81da:	mov    %r15,%rdx
81dd:	ror    $0xe,%rcx
81e1:	mov    %r15,%rbx
81e4:	push   %r15
81e6:	not    %rdx
81e9:	ror    $0x12,%r15
81ed:	and    %r8,%rbx
81f0:	and    %r9,%rdx
81f3:	xor    %r15,%rcx
81f6:	ror    $0x17,%r15
81fa:	xor    %rbx,%rdx
81fd:	xor    %r15,%rcx
8200:	pop    %r15
8202:	lea    (%rcx,%rdx,1),%rbx
8206:	add    %rbx,%r10
8209:	add    %r10,%r14
820c:	mov    %r11,%rcx
820f:	mov    %r11,%rdx
8212:	ror    $0x1c,%rcx
8216:	mov    %r11,%rbx
8219:	push   %r11
821b:	xor    %r12,%rdx
821e:	ror    $0x22,%r11
8222:	and    %r12,%rbx
8225:	and    %r13,%rdx
8228:	xor    %r11,%rcx
822b:	ror    $0x5,%r11
822f:	xor    %rbx,%rdx
8232:	xor    %r11,%rcx
8235:	pop    %r11
8237:	lea    (%rcx,%rdx,1),%rbx
823b:	add    %rbx,%r10
823e:	add    0x270(%rbp),%r9
8245:	add    0x70(%rsp),%r9
824a:	mov    %r14,%rcx
824d:	mov    %r14,%rdx
8250:	ror    $0xe,%rcx
8254:	mov    %r14,%rbx
8257:	push   %r14
8259:	not    %rdx
825c:	ror    $0x12,%r14
8260:	and    %r15,%rbx
8263:	and    %r8,%rdx
8266:	xor    %r14,%rcx
8269:	ror    $0x17,%r14
826d:	xor    %rbx,%rdx
8270:	xor    %r14,%rcx
8273:	pop    %r14
8275:	lea    (%rcx,%rdx,1),%rbx
8279:	add    %rbx,%r9
827c:	add    %r9,%r13
827f:	mov    %r10,%rcx
8282:	mov    %r10,%rdx
8285:	ror    $0x1c,%rcx
8289:	mov    %r10,%rbx
828c:	push   %r10
828e:	xor    %r11,%rdx
8291:	ror    $0x22,%r10
8295:	and    %r11,%rbx
8298:	and    %r12,%rdx
829b:	xor    %r10,%rcx
829e:	ror    $0x5,%r10
82a2:	xor    %rbx,%rdx
82a5:	xor    %r10,%rcx
82a8:	pop    %r10
82aa:	lea    (%rcx,%rdx,1),%rbx
82ae:	add    %rbx,%r9
82b1:	add    0x278(%rbp),%r8
82b8:	add    0x78(%rsp),%r8
82bd:	mov    %r13,%rcx
82c0:	mov    %r13,%rdx
82c3:	ror    $0xe,%rcx
82c7:	mov    %r13,%rbx
82ca:	push   %r13
82cc:	not    %rdx
82cf:	ror    $0x12,%r13
82d3:	and    %r14,%rbx
82d6:	and    %r15,%rdx
82d9:	xor    %r13,%rcx
82dc:	ror    $0x17,%r13
82e0:	xor    %rbx,%rdx
82e3:	xor    %r13,%rcx
82e6:	pop    %r13
82e8:	lea    (%rcx,%rdx,1),%rbx
82ec:	add    %rbx,%r8
82ef:	add    %r8,%r12
82f2:	mov    %r9,%rcx
82f5:	mov    %r9,%rdx
82f8:	ror    $0x1c,%rcx
82fc:	mov    %r9,%rbx
82ff:	push   %r9
8301:	xor    %r10,%rdx
8304:	ror    $0x22,%r9
8308:	and    %r10,%rbx
830b:	and    %r11,%rdx
830e:	xor    %r9,%rcx
8311:	ror    $0x5,%r9
8315:	xor    %rbx,%rdx
8318:	xor    %r9,%rcx
831b:	pop    %r9
831d:	lea    (%rcx,%rdx,1),%rbx
8321:	add    %rbx,%r8
8324:	add    %r8,(%rdi)
8327:	add    %r9,0x8(%rdi)
832b:	add    %r10,0x10(%rdi)
832f:	add    %r11,0x18(%rdi)
8333:	add    %r12,0x20(%rdi)
8337:	add    %r13,0x28(%rdi)
833b:	add    %r14,0x30(%rdi)
833f:	add    %r15,0x38(%rdi)
8343:	add    $0x80,%rsi
834a:	subq   $0x80,0x80(%rsp)
8356:	jg     4ca0 <UpdateSHA512.sha512_block_loop>
835c:	add    $0x98,%rsp
8363:	pop    %rbp
8364:	pop    %r15
8366:	pop    %r14
8368:	pop    %r13
836a:	pop    %r12
836c:	pop    %rbx
836d:	retq   
836e:	nopw   %cs:0x0(%rax,%rax,1)
8378:	nopl   0x0(%rax,%rax,1)
8380:	endbr64 
8384:	mov    $0xfffffff1,%eax
8389:	test   %edi,%edi
838b:	jle    83b4 <gsModEngineGetSize+0x34>
838d:	test   %esi,%esi
838f:	jle    83b4 <gsModEngineGetSize+0x34>
8391:	mov    %edi,%eax
8393:	add    $0x3f,%eax
8396:	sar    $0x1f,%eax
8399:	shr    $0x1a,%eax
839c:	lea    0x3f(%rdi,%rax,1),%eax
83a0:	sar    $0x6,%eax
83a3:	add    $0x3,%esi
83a6:	imul   %eax,%esi
83a9:	lea    0x68(,%rsi,8),%eax
83b0:	mov    %eax,(%rdx)
83b2:	xor    %eax,%eax
83b4:	retq   
83b5:	nopw   %cs:0x0(%rax,%rax,1)
83bf:	nop
83c0:	endbr64 
83c4:	push   %rbp
83c5:	push   %r15
83c7:	push   %r14
83c9:	push   %r13
83cb:	push   %r12
83cd:	push   %rbx
83ce:	push   %rax
83cf:	mov    $0xfffffff1,%ebx
83d4:	test   %edx,%edx
83d6:	jle    8970 <gsModEngineInit+0x5b0>
83dc:	mov    %edx,%r15d
83df:	mov    %rdi,%r13
83e2:	test   %rsi,%rsi
83e5:	je     83f5 <gsModEngineInit+0x35>
83e7:	mov    $0xfffffc17,%ebx
83ec:	testb  $0x1,(%rsi)
83ef:	je     8970 <gsModEngineInit+0x5b0>
83f5:	mov    $0xfffffff1,%ebx
83fa:	test   %ecx,%ecx
83fc:	jle    8970 <gsModEngineInit+0x5b0>
8402:	lea    0x3f(%r15),%eax
8406:	sar    $0x1f,%eax
8409:	shr    $0x1a,%eax
840c:	lea    0x3f(%r15,%rax,1),%r14d
8411:	sar    $0x6,%r14d
8415:	lea    0x68(%r13),%rax
8419:	lea    0x0(,%r14,8),%edx
8421:	movslq %edx,%rdx
8424:	lea    0x68(%r13,%rdx,1),%rdi
8429:	lea    (%rdi,%rdx,1),%rbp
842d:	add    %rbp,%rdx
8430:	xorps  %xmm0,%xmm0
8433:	movups %xmm0,0x0(%r13)
8438:	movups %xmm0,0x10(%r13)
843d:	movups %xmm0,0x20(%r13)
8442:	movups %xmm0,0x30(%r13)
8447:	movups %xmm0,0x40(%r13)
844c:	movups %xmm0,0x50(%r13)
8451:	movq   $0x0,0x0(%r13)
8459:	movl   $0x1,0x8(%r13)
8461:	mov    %r15d,0xc(%r13)
8465:	mov    %r14d,0x10(%r13)
8469:	mov    %r14d,0x18(%r13)
846d:	mov    %r8,0x20(%r13)
8471:	mov    %rax,0x28(%r13)
8475:	mov    %rdi,0x38(%r13)
8479:	mov    %rbp,0x40(%r13)
847d:	mov    %rdx,0x60(%r13)
8481:	mov    %ecx,0x5c(%r13)
8485:	movl   $0x0,0x58(%r13)
848d:	test   %rsi,%rsi
8490:	je     850c <gsModEngineInit+0x14c>
8492:	test   %r15d,%r15d
8495:	jle    8513 <gsModEngineInit+0x153>
8497:	lea    0x1f(%r15),%ecx
849b:	sar    $0x1f,%ecx
849e:	shr    $0x1b,%ecx
84a1:	lea    0x1f(%r15,%rcx,1),%ecx
84a6:	sar    $0x5,%ecx
84a9:	movslq %ecx,%rcx
84ac:	test   %rcx,%rcx
84af:	mov    $0x1,%edx
84b4:	mov    $0x1,%r8d
84ba:	cmovg  %rcx,%r8
84be:	cmp    $0x7,%r8
84c2:	jbe    84e6 <gsModEngineInit+0x126>
84c4:	test   %rcx,%rcx
84c7:	cmovg  %rcx,%rdx
84cb:	lea    (%rsi,%rdx,4),%rdi
84cf:	cmp    %rdi,%rax
84d2:	jae    8567 <gsModEngineInit+0x1a7>
84d8:	lea    0x68(%r13,%rdx,4),%rdx
84dd:	cmp    %rsi,%rdx
84e0:	jbe    8567 <gsModEngineInit+0x1a7>
84e6:	xor    %edx,%edx
84e8:	nopl   0x0(%rax,%rax,1)
84f0:	mov    (%rsi,%rdx,4),%edi
84f3:	mov    %edi,(%rax,%rdx,4)
84f6:	inc    %rdx
84f9:	cmp    %rcx,%rdx
84fc:	jl     84f0 <gsModEngineInit+0x130>
84fe:	lea    (%r14,%r14,1),%r12d
8502:	cmp    %r12d,%edx
8505:	jl     8522 <gsModEngineInit+0x162>
8507:	jmpq   863f <gsModEngineInit+0x27f>
850c:	xor    %ebx,%ebx
850e:	jmpq   8970 <gsModEngineInit+0x5b0>
8513:	xor    %edx,%edx
8515:	lea    (%r14,%r14,1),%r12d
8519:	cmp    %r12d,%edx
851c:	jge    863f <gsModEngineInit+0x27f>
8522:	mov    %edx,%ecx
8524:	mov    %r12d,%edx
8527:	mov    %rdx,%r9
852a:	sub    %rcx,%r9
852d:	cmp    $0x7,%r9
8531:	jbe    8630 <gsModEngineInit+0x270>
8537:	mov    %r9,%r8
853a:	and    $0xfffffffffffffff8,%r8
853e:	lea    -0x8(%r8),%rsi
8542:	mov    %rsi,%rbp
8545:	shr    $0x3,%rbp
8549:	inc    %rbp
854c:	mov    %ebp,%ebx
854e:	and    $0x3,%ebx
8551:	cmp    $0x18,%rsi
8555:	jae    85a5 <gsModEngineInit+0x1e5>
8557:	xor    %edi,%edi
8559:	test   %rbx,%rbx
855c:	jne    85f6 <gsModEngineInit+0x236>
8562:	jmpq   8620 <gsModEngineInit+0x260>
8567:	movabs $0x7ffffffffffffffc,%rdx
8571:	add    $0xfffffffffffffffc,%rdx
8575:	and    %r8,%rdx
8578:	lea    -0x8(%rdx),%rbp
857c:	mov    %rbp,%rbx
857f:	shr    $0x3,%rbx
8583:	inc    %rbx
8586:	mov    %ebx,%edi
8588:	and    $0x3,%edi
858b:	cmp    $0x18,%rbp
858f:	jae    89bb <gsModEngineInit+0x5fb>
8595:	xor    %ebx,%ebx
8597:	test   %rdi,%rdi
859a:	jne    8a48 <gsModEngineInit+0x688>
85a0:	jmpq   8a6e <gsModEngineInit+0x6ae>
85a5:	sub    %rbx,%rbp
85a8:	lea    0xd8(%r13,%rcx,4),%rsi
85b0:	xor    %edi,%edi
85b2:	xorps  %xmm0,%xmm0
85b5:	nopw   %cs:0x0(%rax,%rax,1)
85bf:	nop
85c0:	movups %xmm0,-0x70(%rsi,%rdi,4)
85c5:	movups %xmm0,-0x60(%rsi,%rdi,4)
85ca:	movups %xmm0,-0x50(%rsi,%rdi,4)
85cf:	movups %xmm0,-0x40(%rsi,%rdi,4)
85d4:	movups %xmm0,-0x30(%rsi,%rdi,4)
85d9:	movups %xmm0,-0x20(%rsi,%rdi,4)
85de:	movups %xmm0,-0x10(%rsi,%rdi,4)
85e3:	movups %xmm0,(%rsi,%rdi,4)
85e7:	add    $0x20,%rdi
85eb:	add    $0xfffffffffffffffc,%rbp
85ef:	jne    85c0 <gsModEngineInit+0x200>
85f1:	test   %rbx,%rbx
85f4:	je     8620 <gsModEngineInit+0x260>
85f6:	add    %rcx,%rdi
85f9:	lea    0x78(%r13,%rdi,4),%rsi
85fe:	neg    %rbx
8601:	xorps  %xmm0,%xmm0
8604:	nopw   %cs:0x0(%rax,%rax,1)
860e:	xchg   %ax,%ax
8610:	movups %xmm0,-0x10(%rsi)
8614:	movups %xmm0,(%rsi)
8617:	add    $0x20,%rsi
861b:	inc    %rbx
861e:	jne    8610 <gsModEngineInit+0x250>
8620:	cmp    %r8,%r9
8623:	je     863f <gsModEngineInit+0x27f>
8625:	add    %r8,%rcx
8628:	nopl   0x0(%rax,%rax,1)
8630:	movl   $0x0,(%rax,%rcx,4)
8637:	inc    %rcx
863a:	cmp    %rcx,%rdx
863d:	jne    8630 <gsModEngineInit+0x270>
863f:	mov    0x68(%r13),%rdi
8643:	callq  8b40 <gsMontFactor>
8648:	mov    %rax,0x30(%r13)
864c:	mov    0x38(%r13),%rbx
8650:	movslq %r14d,%rbp
8653:	test   %r15d,%r15d
8656:	jle    8780 <gsModEngineInit+0x3c0>
865c:	test   %rbp,%rbp
865f:	mov    $0x1,%ecx
8664:	cmovg  %rbp,%rcx
8668:	cmp    $0x4,%rcx
866c:	jae    8675 <gsModEngineInit+0x2b5>
866e:	xor    %eax,%eax
8670:	jmpq   8770 <gsModEngineInit+0x3b0>
8675:	movabs $0x7ffffffffffffffc,%rax
867f:	and    %rcx,%rax
8682:	lea    -0x4(%rax),%rdi
8686:	mov    %rdi,%rsi
8689:	shr    $0x2,%rsi
868d:	inc    %rsi
8690:	mov    %esi,%edx
8692:	and    $0x7,%edx
8695:	cmp    $0x1c,%rdi
8699:	jae    86ab <gsModEngineInit+0x2eb>
869b:	xor    %esi,%esi
869d:	test   %rdx,%rdx
86a0:	jne    8736 <gsModEngineInit+0x376>
86a6:	jmpq   8760 <gsModEngineInit+0x3a0>
86ab:	mov    %rdx,%rdi
86ae:	sub    %rsi,%rdi
86b1:	xor    %esi,%esi
86b3:	xorps  %xmm0,%xmm0
86b6:	nopw   %cs:0x0(%rax,%rax,1)
86c0:	movups %xmm0,(%rbx,%rsi,8)
86c4:	movups %xmm0,0x10(%rbx,%rsi,8)
86c9:	movups %xmm0,0x20(%rbx,%rsi,8)
86ce:	movups %xmm0,0x30(%rbx,%rsi,8)
86d3:	movups %xmm0,0x40(%rbx,%rsi,8)
86d8:	movups %xmm0,0x50(%rbx,%rsi,8)
86dd:	movups %xmm0,0x60(%rbx,%rsi,8)
86e2:	movups %xmm0,0x70(%rbx,%rsi,8)
86e7:	movups %xmm0,0x80(%rbx,%rsi,8)
86ef:	movups %xmm0,0x90(%rbx,%rsi,8)
86f7:	movups %xmm0,0xa0(%rbx,%rsi,8)
86ff:	movups %xmm0,0xb0(%rbx,%rsi,8)
8707:	movups %xmm0,0xc0(%rbx,%rsi,8)
870f:	movups %xmm0,0xd0(%rbx,%rsi,8)
8717:	movups %xmm0,0xe0(%rbx,%rsi,8)
871f:	movups %xmm0,0xf0(%rbx,%rsi,8)
8727:	add    $0x20,%rsi
872b:	add    $0x8,%rdi
872f:	jne    86c0 <gsModEngineInit+0x300>
8731:	test   %rdx,%rdx
8734:	je     8760 <gsModEngineInit+0x3a0>
8736:	lea    0x10(%rbx,%rsi,8),%rsi
873b:	neg    %rdx
873e:	xorps  %xmm0,%xmm0
8741:	nopw   %cs:0x0(%rax,%rax,1)
874b:	nopl   0x0(%rax,%rax,1)
8750:	movups %xmm0,-0x10(%rsi)
8754:	movups %xmm0,(%rsi)
8757:	add    $0x20,%rsi
875b:	inc    %rdx
875e:	jne    8750 <gsModEngineInit+0x390>
8760:	cmp    %rax,%rcx
8763:	je     8780 <gsModEngineInit+0x3c0>
8765:	nopw   %cs:0x0(%rax,%rax,1)
876f:	nop
8770:	movq   $0x0,(%rbx,%rax,8)
8778:	inc    %rax
877b:	cmp    %rbp,%rax
877e:	jl     8770 <gsModEngineInit+0x3b0>
8780:	movq   $0x1,(%rbx,%rbp,8)
8788:	mov    0x28(%r13),%r8
878c:	lea    0x2(%r12),%ecx
8791:	xor    %edi,%edi
8793:	xor    %esi,%esi
8795:	mov    %rbx,%rdx
8798:	mov    %r12d,%r9d
879b:	callq  ae10 <cpDiv_BNU32>
87a0:	test   $0x1,%al
87a2:	je     87ad <gsModEngineInit+0x3ed>
87a4:	cltq   
87a6:	movl   $0x0,(%rbx,%rax,4)
87ad:	test   %r15d,%r15d
87b0:	jle    8942 <gsModEngineInit+0x582>
87b6:	mov    0x40(%r13),%rax
87ba:	test   %rbp,%rbp
87bd:	mov    $0x1,%edx
87c2:	cmovg  %rbp,%rdx
87c6:	cmp    $0x3,%rdx
87ca:	ja     87d3 <gsModEngineInit+0x413>
87cc:	xor    %ecx,%ecx
87ce:	jmpq   88d0 <gsModEngineInit+0x510>
87d3:	movabs $0x7ffffffffffffffc,%rcx
87dd:	and    %rdx,%rcx
87e0:	lea    -0x4(%rcx),%rsi
87e4:	mov    %rsi,%rdi
87e7:	shr    $0x2,%rdi
87eb:	inc    %rdi
87ee:	mov    %edi,%ebx
87f0:	and    $0x7,%ebx
87f3:	cmp    $0x1c,%rsi
87f7:	jae    8809 <gsModEngineInit+0x449>
87f9:	xor    %edi,%edi
87fb:	test   %rbx,%rbx
87fe:	jne    8896 <gsModEngineInit+0x4d6>
8804:	jmpq   88c0 <gsModEngineInit+0x500>
8809:	mov    %rbx,%rsi
880c:	sub    %rdi,%rsi
880f:	xor    %edi,%edi
8811:	xorps  %xmm0,%xmm0
8814:	nopw   %cs:0x0(%rax,%rax,1)
881e:	xchg   %ax,%ax
8820:	movups %xmm0,(%rax,%rdi,8)
8824:	movups %xmm0,0x10(%rax,%rdi,8)
8829:	movups %xmm0,0x20(%rax,%rdi,8)
882e:	movups %xmm0,0x30(%rax,%rdi,8)
8833:	movups %xmm0,0x40(%rax,%rdi,8)
8838:	movups %xmm0,0x50(%rax,%rdi,8)
883d:	movups %xmm0,0x60(%rax,%rdi,8)
8842:	movups %xmm0,0x70(%rax,%rdi,8)
8847:	movups %xmm0,0x80(%rax,%rdi,8)
884f:	movups %xmm0,0x90(%rax,%rdi,8)
8857:	movups %xmm0,0xa0(%rax,%rdi,8)
885f:	movups %xmm0,0xb0(%rax,%rdi,8)
8867:	movups %xmm0,0xc0(%rax,%rdi,8)
886f:	movups %xmm0,0xd0(%rax,%rdi,8)
8877:	movups %xmm0,0xe0(%rax,%rdi,8)
887f:	movups %xmm0,0xf0(%rax,%rdi,8)
8887:	add    $0x20,%rdi
888b:	add    $0x8,%rsi
888f:	jne    8820 <gsModEngineInit+0x460>
8891:	test   %rbx,%rbx
8894:	je     88c0 <gsModEngineInit+0x500>
8896:	lea    0x10(%rax,%rdi,8),%rsi
889b:	neg    %rbx
889e:	xorps  %xmm0,%xmm0
88a1:	nopw   %cs:0x0(%rax,%rax,1)
88ab:	nopl   0x0(%rax,%rax,1)
88b0:	movups %xmm0,-0x10(%rsi)
88b4:	movups %xmm0,(%rsi)
88b7:	add    $0x20,%rsi
88bb:	inc    %rbx
88be:	jne    88b0 <gsModEngineInit+0x4f0>
88c0:	cmp    %rcx,%rdx
88c3:	je     88e0 <gsModEngineInit+0x520>
88c5:	nopw   %cs:0x0(%rax,%rax,1)
88cf:	nop
88d0:	movq   $0x0,(%rax,%rcx,8)
88d8:	inc    %rcx
88db:	cmp    %rbp,%rcx
88de:	jl     88d0 <gsModEngineInit+0x510>
88e0:	test   %r15d,%r15d
88e3:	jle    8942 <gsModEngineInit+0x582>
88e5:	mov    0x38(%r13),%rax
88e9:	mov    0x40(%r13),%r15
88ed:	lea    (%r15,%rbp,8),%r9
88f1:	test   %rbp,%rbp
88f4:	mov    $0x1,%ecx
88f9:	mov    $0x1,%r8d
88ff:	cmovg  %rbp,%r8
8903:	cmp    $0x3,%r8
8907:	jbe    8925 <gsModEngineInit+0x565>
8909:	test   %rbp,%rbp
890c:	cmovg  %rbp,%rcx
8910:	lea    (%rax,%rcx,8),%rdx
8914:	cmp    %rdx,%r9
8917:	jae    8981 <gsModEngineInit+0x5c1>
8919:	add    %rbp,%rcx
891c:	lea    (%r15,%rcx,8),%rcx
8920:	cmp    %rcx,%rax
8923:	jae    8981 <gsModEngineInit+0x5c1>
8925:	xor    %edx,%edx
8927:	nopw   0x0(%rax,%rax,1)
8930:	mov    (%rax,%rdx,8),%rcx
8934:	mov    %rcx,(%r9,%rdx,8)
8938:	inc    %rdx
893b:	cmp    %rbp,%rdx
893e:	jl     8930 <gsModEngineInit+0x570>
8940:	jmp    8946 <gsModEngineInit+0x586>
8942:	mov    0x40(%r13),%r15
8946:	mov    0x28(%r13),%r8
894a:	shl    $0x2,%r14d
894e:	xor    %ebx,%ebx
8950:	xor    %edi,%edi
8952:	xor    %esi,%esi
8954:	mov    %r15,%rdx
8957:	mov    %r14d,%ecx
895a:	mov    %r12d,%r9d
895d:	callq  ae10 <cpDiv_BNU32>
8962:	test   $0x1,%al
8964:	je     8970 <gsModEngineInit+0x5b0>
8966:	cltq   
8968:	movl   $0x0,(%r15,%rax,4)
8970:	mov    %ebx,%eax
8972:	add    $0x8,%rsp
8976:	pop    %rbx
8977:	pop    %r12
8979:	pop    %r13
897b:	pop    %r14
897d:	pop    %r15
897f:	pop    %rbp
8980:	retq   
8981:	movabs $0x7ffffffffffffffc,%rdx
898b:	and    %r8,%rdx
898e:	lea    -0x4(%rdx),%rsi
8992:	mov    %rsi,%rbx
8995:	shr    $0x2,%rbx
8999:	inc    %rbx
899c:	mov    %ebx,%ecx
899e:	and    $0x3,%ecx
89a1:	cmp    $0xc,%rsi
89a5:	jae    8a7c <gsModEngineInit+0x6bc>
89ab:	xor    %ebx,%ebx
89ad:	test   %rcx,%rcx
89b0:	jne    8aed <gsModEngineInit+0x72d>
89b6:	jmpq   8b1d <gsModEngineInit+0x75d>
89bb:	mov    %rdi,%rbp
89be:	sub    %rbx,%rbp
89c1:	xor    %ebx,%ebx
89c3:	nopw   %cs:0x0(%rax,%rax,1)
89cd:	nopl   (%rax)
89d0:	movups (%rsi,%rbx,4),%xmm0
89d4:	movups 0x10(%rsi,%rbx,4),%xmm1
89d9:	movups %xmm0,0x68(%r13,%rbx,4)
89df:	movups %xmm1,0x78(%r13,%rbx,4)
89e5:	movups 0x20(%rsi,%rbx,4),%xmm0
89ea:	movups 0x30(%rsi,%rbx,4),%xmm1
89ef:	movups %xmm0,0x88(%r13,%rbx,4)
89f8:	movups %xmm1,0x98(%r13,%rbx,4)
8a01:	movups 0x40(%rsi,%rbx,4),%xmm0
8a06:	movups 0x50(%rsi,%rbx,4),%xmm1
8a0b:	movups %xmm0,0xa8(%r13,%rbx,4)
8a14:	movups %xmm1,0xb8(%r13,%rbx,4)
8a1d:	movups 0x60(%rsi,%rbx,4),%xmm0
8a22:	movups 0x70(%rsi,%rbx,4),%xmm1
8a27:	movups %xmm0,0xc8(%r13,%rbx,4)
8a30:	movups %xmm1,0xd8(%r13,%rbx,4)
8a39:	add    $0x20,%rbx
8a3d:	add    $0x4,%rbp
8a41:	jne    89d0 <gsModEngineInit+0x610>
8a43:	test   %rdi,%rdi
8a46:	je     8a6e <gsModEngineInit+0x6ae>
8a48:	shl    $0x2,%rbx
8a4c:	neg    %rdi
8a4f:	nop
8a50:	movups (%rsi,%rbx,1),%xmm0
8a54:	movups 0x10(%rsi,%rbx,1),%xmm1
8a59:	movups %xmm0,0x68(%r13,%rbx,1)
8a5f:	movups %xmm1,0x78(%r13,%rbx,1)
8a65:	add    $0x20,%rbx
8a69:	inc    %rdi
8a6c:	jne    8a50 <gsModEngineInit+0x690>
8a6e:	cmp    %rdx,%r8
8a71:	jne    84f0 <gsModEngineInit+0x130>
8a77:	jmpq   84fe <gsModEngineInit+0x13e>
8a7c:	lea    0x70(%r15,%rbp,8),%rsi
8a81:	mov    %rcx,%rdi
8a84:	sub    %rbx,%rdi
8a87:	xor    %ebx,%ebx
8a89:	nopl   0x0(%rax)
8a90:	movups (%rax,%rbx,8),%xmm0
8a94:	movups 0x10(%rax,%rbx,8),%xmm1
8a99:	movups %xmm0,-0x70(%rsi,%rbx,8)
8a9e:	movups %xmm1,-0x60(%rsi,%rbx,8)
8aa3:	movups 0x20(%rax,%rbx,8),%xmm0
8aa8:	movups 0x30(%rax,%rbx,8),%xmm1
8aad:	movups %xmm0,-0x50(%rsi,%rbx,8)
8ab2:	movups %xmm1,-0x40(%rsi,%rbx,8)
8ab7:	movups 0x40(%rax,%rbx,8),%xmm0
8abc:	movups 0x50(%rax,%rbx,8),%xmm1
8ac1:	movups %xmm0,-0x30(%rsi,%rbx,8)
8ac6:	movups %xmm1,-0x20(%rsi,%rbx,8)
8acb:	movups 0x60(%rax,%rbx,8),%xmm0
8ad0:	movups 0x70(%rax,%rbx,8),%xmm1
8ad5:	movups %xmm0,-0x10(%rsi,%rbx,8)
8ada:	movups %xmm1,(%rsi,%rbx,8)
8ade:	add    $0x10,%rbx
8ae2:	add    $0x4,%rdi
8ae6:	jne    8a90 <gsModEngineInit+0x6d0>
8ae8:	test   %rcx,%rcx
8aeb:	je     8b1d <gsModEngineInit+0x75d>
8aed:	lea    0x10(,%rbx,8),%rsi
8af5:	neg    %rcx
8af8:	nopl   0x0(%rax,%rax,1)
8b00:	movups -0x10(%rax,%rsi,1),%xmm0
8b05:	movups (%rax,%rsi,1),%xmm1
8b09:	movups %xmm0,-0x10(%r9,%rsi,1)
8b0f:	movups %xmm1,(%r9,%rsi,1)
8b14:	add    $0x20,%rsi
8b18:	inc    %rcx
8b1b:	jne    8b00 <gsModEngineInit+0x740>
8b1d:	cmp    %rdx,%r8
8b20:	jne    8930 <gsModEngineInit+0x570>
8b26:	jmpq   8946 <gsModEngineInit+0x586>
8b2b:	nopw   %cs:0x0(%rax,%rax,1)
8b35:	nopw   %cs:0x0(%rax,%rax,1)
8b3f:	nop
8b40:	endbr64 
8b44:	mov    %edi,%r8d
8b47:	shr    $0x20,%rdi
8b4b:	mov    $0x3,%r10d
8b51:	mov    $0x2,%esi
8b56:	mov    $0x1,%eax
8b5b:	mov    $0x3f,%r9d
8b61:	jmp    8b80 <gsMontFactor+0x40>
8b63:	nopw   %cs:0x0(%rax,%rax,1)
8b6d:	nopl   (%rax)
8b70:	add    %rdx,%rax
8b73:	lea    0x1(%r10,%r10,1),%r10
8b78:	add    %rsi,%rsi
8b7b:	dec    %r9d
8b7e:	je     8baf <gsMontFactor+0x6f>
8b80:	mov    %eax,%r11d
8b83:	mov    %rax,%rdx
8b86:	shr    $0x20,%rdx
8b8a:	imul   %r8,%r11
8b8e:	imul   %r8d,%edx
8b92:	mov    %eax,%ecx
8b94:	imul   %edi,%ecx
8b97:	add    %edx,%ecx
8b99:	shl    $0x20,%rcx
8b9d:	add    %r11,%rcx
8ba0:	and    %r10,%rcx
8ba3:	mov    %rsi,%rdx
8ba6:	cmp    %rcx,%rsi
8ba9:	jb     8b70 <gsMontFactor+0x30>
8bab:	xor    %edx,%edx
8bad:	jmp    8b70 <gsMontFactor+0x30>
8baf:	neg    %rax
8bb2:	retq   
8bb3:	nopw   %cs:0x0(%rax,%rax,1)
8bbd:	nopl   (%rax)
8bc0:	endbr64 
8bc4:	lea    0x845d(%rip),%rax        # 11028 <gsModArithRSA_C.m>
8bcb:	retq   
8bcc:	nopw   %cs:0x0(%rax,%rax,1)
8bd6:	nopw   %cs:0x0(%rax,%rax,1)
8be0:	endbr64 
8be4:	push   %rbp
8be5:	push   %r15
8be7:	push   %r14
8be9:	push   %r13
8beb:	push   %r12
8bed:	push   %rbx
8bee:	push   %rax
8bef:	mov    %rdx,%rbx
8bf2:	mov    %rdi,%r14
8bf5:	mov    0x28(%rdx),%r12
8bf9:	mov    0x30(%rdx),%r15
8bfd:	mov    0x10(%rdx),%r13d
8c01:	movslq 0x58(%rdx),%rcx
8c05:	lea    0x2(%rcx),%eax
8c08:	cmp    0x5c(%rdx),%eax
8c0b:	jle    8c11 <gs_mont_encode+0x31>
8c0d:	xor    %ebp,%ebp
8c0f:	jmp    8c24 <gs_mont_encode+0x44>
8c11:	movslq 0x18(%rbx),%rbp
8c15:	imul   %rcx,%rbp
8c19:	shl    $0x3,%rbp
8c1d:	add    0x60(%rbx),%rbp
8c21:	mov    %eax,0x58(%rbx)
8c24:	mov    0x40(%rbx),%rcx
8c28:	mov    %rbp,%rdi
8c2b:	mov    %r13d,%edx
8c2e:	mov    %r13d,%r8d
8c31:	callq  b160 <cpMulAdc_BNU_school>
8c36:	mov    %r14,%rdi
8c39:	mov    %rbp,%rsi
8c3c:	mov    %r12,%rdx
8c3f:	mov    %r13d,%ecx
8c42:	mov    %r15,%r8
8c45:	callq  d450 <cpMontRedAdc_BNU>
8c4a:	mov    0x58(%rbx),%eax
8c4d:	cmp    $0x3,%eax
8c50:	mov    $0x2,%ecx
8c55:	cmovl  %eax,%ecx
8c58:	sub    %ecx,%eax
8c5a:	mov    %eax,0x58(%rbx)
8c5d:	mov    %r14,%rax
8c60:	add    $0x8,%rsp
8c64:	pop    %rbx
8c65:	pop    %r12
8c67:	pop    %r13
8c69:	pop    %r14
8c6b:	pop    %r15
8c6d:	pop    %rbp
8c6e:	retq   
8c6f:	nopw   %cs:0x0(%rax,%rax,1)
8c79:	nopl   0x0(%rax)
8c80:	endbr64 
8c84:	push   %r15
8c86:	push   %r14
8c88:	push   %rbx
8c89:	mov    %rdx,%r15
8c8c:	mov    %rsi,%rax
8c8f:	mov    %rdi,%r14
8c92:	mov    0x10(%rdx),%ecx
8c95:	movslq 0x58(%rdx),%rbx
8c99:	lea    0x2(%rbx),%edx
8c9c:	xor    %edi,%edi
8c9e:	cmp    0x5c(%r15),%edx
8ca2:	jle    8d51 <gs_mont_decode+0xd1>
8ca8:	xor    %esi,%esi
8caa:	test   %ecx,%ecx
8cac:	jle    8e46 <gs_mont_decode+0x1c6>
8cb2:	cmp    $0x3,%ecx
8cb5:	jbe    8cd1 <gs_mont_decode+0x51>
8cb7:	lea    (%rax,%rcx,8),%rdx
8cbb:	cmp    %rdx,%rsi
8cbe:	jae    8d72 <gs_mont_decode+0xf2>
8cc4:	lea    (%rsi,%rcx,8),%rdx
8cc8:	cmp    %rax,%rdx
8ccb:	jbe    8d72 <gs_mont_decode+0xf2>
8cd1:	xor    %edx,%edx
8cd3:	mov    %rdx,%r8
8cd6:	not    %r8
8cd9:	add    %rcx,%r8
8cdc:	mov    %rcx,%rdi
8cdf:	and    $0x3,%rdi
8ce3:	je     8d00 <gs_mont_decode+0x80>
8ce5:	nopw   %cs:0x0(%rax,%rax,1)
8cef:	nop
8cf0:	mov    (%rax,%rdx,8),%rbx
8cf4:	mov    %rbx,(%rsi,%rdx,8)
8cf8:	inc    %rdx
8cfb:	dec    %rdi
8cfe:	jne    8cf0 <gs_mont_decode+0x70>
8d00:	mov    %ecx,%edi
8d02:	cmp    $0x3,%r8
8d06:	jb     8e46 <gs_mont_decode+0x1c6>
8d0c:	nopl   0x0(%rax)
8d10:	mov    (%rax,%rdx,8),%rdi
8d14:	mov    %rdi,(%rsi,%rdx,8)
8d18:	mov    0x8(%rax,%rdx,8),%rdi
8d1d:	mov    %rdi,0x8(%rsi,%rdx,8)
8d22:	mov    0x10(%rax,%rdx,8),%rdi
8d27:	mov    %rdi,0x10(%rsi,%rdx,8)
8d2c:	mov    0x18(%rax,%rdx,8),%rdi
8d31:	mov    %rdi,0x18(%rsi,%rdx,8)
8d36:	add    $0x4,%rdx
8d3a:	cmp    %rdx,%rcx
8d3d:	jne    8d10 <gs_mont_decode+0x90>
8d3f:	mov    %ecx,%edi
8d41:	lea    (%rcx,%rcx,1),%edx
8d44:	cmp    %edx,%edi
8d46:	jl     8e51 <gs_mont_decode+0x1d1>
8d4c:	jmpq   8f20 <gs_mont_decode+0x2a0>
8d51:	movslq 0x18(%r15),%rsi
8d55:	imul   %rbx,%rsi
8d59:	shl    $0x3,%rsi
8d5d:	add    0x60(%r15),%rsi
8d61:	mov    %edx,0x58(%r15)
8d65:	test   %ecx,%ecx
8d67:	jg     8cb2 <gs_mont_decode+0x32>
8d6d:	jmpq   8e46 <gs_mont_decode+0x1c6>
8d72:	mov    %ecx,%edx
8d74:	and    $0xfffffffc,%edx
8d77:	lea    -0x4(%rdx),%rdi
8d7b:	mov    %rdi,%rbx
8d7e:	shr    $0x2,%rbx
8d82:	inc    %rbx
8d85:	mov    %ebx,%r8d
8d88:	and    $0x3,%r8d
8d8c:	cmp    $0xc,%rdi
8d90:	jae    8d9e <gs_mont_decode+0x11e>
8d92:	xor    %ebx,%ebx
8d94:	test   %r8,%r8
8d97:	jne    8e0d <gs_mont_decode+0x18d>
8d99:	jmpq   8e3b <gs_mont_decode+0x1bb>
8d9e:	mov    %r8,%rdi
8da1:	sub    %rbx,%rdi
8da4:	xor    %ebx,%ebx
8da6:	nopw   %cs:0x0(%rax,%rax,1)
8db0:	movups (%rax,%rbx,8),%xmm0
8db4:	movups 0x10(%rax,%rbx,8),%xmm1
8db9:	movups %xmm0,(%rsi,%rbx,8)
8dbd:	movups %xmm1,0x10(%rsi,%rbx,8)
8dc2:	movups 0x20(%rax,%rbx,8),%xmm0
8dc7:	movups 0x30(%rax,%rbx,8),%xmm1
8dcc:	movups %xmm0,0x20(%rsi,%rbx,8)
8dd1:	movups %xmm1,0x30(%rsi,%rbx,8)
8dd6:	movups 0x40(%rax,%rbx,8),%xmm0
8ddb:	movups 0x50(%rax,%rbx,8),%xmm1
8de0:	movups %xmm0,0x40(%rsi,%rbx,8)
8de5:	movups %xmm1,0x50(%rsi,%rbx,8)
8dea:	movups 0x60(%rax,%rbx,8),%xmm0
8def:	movups 0x70(%rax,%rbx,8),%xmm1
8df4:	movups %xmm0,0x60(%rsi,%rbx,8)
8df9:	movups %xmm1,0x70(%rsi,%rbx,8)
8dfe:	add    $0x10,%rbx
8e02:	add    $0x4,%rdi
8e06:	jne    8db0 <gs_mont_decode+0x130>
8e08:	test   %r8,%r8
8e0b:	je     8e3b <gs_mont_decode+0x1bb>
8e0d:	lea    0x10(,%rbx,8),%rdi
8e15:	neg    %r8
8e18:	nopl   0x0(%rax,%rax,1)
8e20:	movups -0x10(%rax,%rdi,1),%xmm0
8e25:	movups (%rax,%rdi,1),%xmm1
8e29:	movups %xmm0,-0x10(%rsi,%rdi,1)
8e2e:	movups %xmm1,(%rsi,%rdi,1)
8e32:	add    $0x20,%rdi
8e36:	inc    %r8
8e39:	jne    8e20 <gs_mont_decode+0x1a0>
8e3b:	mov    %ecx,%edi
8e3d:	cmp    %rcx,%rdx
8e40:	jne    8cd3 <gs_mont_decode+0x53>
8e46:	lea    (%rcx,%rcx,1),%edx
8e49:	cmp    %edx,%edi
8e4b:	jge    8f20 <gs_mont_decode+0x2a0>
8e51:	mov    %edi,%eax
8e53:	mov    %edx,%r10d
8e56:	mov    %r10,%r9
8e59:	sub    %rax,%r9
8e5c:	cmp    $0x3,%r9
8e60:	jbe    8f10 <gs_mont_decode+0x290>
8e66:	mov    %r9,%r8
8e69:	and    $0xfffffffffffffffc,%r8
8e6d:	lea    -0x4(%r8),%rdx
8e71:	mov    %rdx,%rdi
8e74:	shr    $0x2,%rdi
8e78:	inc    %rdi
8e7b:	mov    %edi,%r11d
8e7e:	and    $0x3,%r11d
8e82:	cmp    $0xc,%rdx
8e86:	jae    8e91 <gs_mont_decode+0x211>
8e88:	xor    %edx,%edx
8e8a:	test   %r11,%r11
8e8d:	jne    8ed6 <gs_mont_decode+0x256>
8e8f:	jmp    8f00 <gs_mont_decode+0x280>
8e91:	sub    %r11,%rdi
8e94:	lea    0x70(%rsi,%rax,8),%rbx
8e99:	xor    %edx,%edx
8e9b:	xorps  %xmm0,%xmm0
8e9e:	xchg   %ax,%ax
8ea0:	movups %xmm0,-0x70(%rbx,%rdx,8)
8ea5:	movups %xmm0,-0x60(%rbx,%rdx,8)
8eaa:	movups %xmm0,-0x50(%rbx,%rdx,8)
8eaf:	movups %xmm0,-0x40(%rbx,%rdx,8)
8eb4:	movups %xmm0,-0x30(%rbx,%rdx,8)
8eb9:	movups %xmm0,-0x20(%rbx,%rdx,8)
8ebe:	movups %xmm0,-0x10(%rbx,%rdx,8)
8ec3:	movups %xmm0,(%rbx,%rdx,8)
8ec7:	add    $0x10,%rdx
8ecb:	add    $0xfffffffffffffffc,%rdi
8ecf:	jne    8ea0 <gs_mont_decode+0x220>
8ed1:	test   %r11,%r11
8ed4:	je     8f00 <gs_mont_decode+0x280>
8ed6:	add    %rax,%rdx
8ed9:	lea    0x10(%rsi,%rdx,8),%rdx
8ede:	neg    %r11
8ee1:	xorps  %xmm0,%xmm0
8ee4:	nopw   %cs:0x0(%rax,%rax,1)
8eee:	xchg   %ax,%ax
8ef0:	movups %xmm0,-0x10(%rdx)
8ef4:	movups %xmm0,(%rdx)
8ef7:	add    $0x20,%rdx
8efb:	inc    %r11
8efe:	jne    8ef0 <gs_mont_decode+0x270>
8f00:	cmp    %r8,%r9
8f03:	je     8f20 <gs_mont_decode+0x2a0>
8f05:	add    %r8,%rax
8f08:	nopl   0x0(%rax,%rax,1)
8f10:	movq   $0x0,(%rsi,%rax,8)
8f18:	inc    %rax
8f1b:	cmp    %rax,%r10
8f1e:	jne    8f10 <gs_mont_decode+0x290>
8f20:	mov    0x28(%r15),%rdx
8f24:	mov    0x30(%r15),%r8
8f28:	mov    %r14,%rdi
8f2b:	callq  d450 <cpMontRedAdc_BNU>
8f30:	mov    0x58(%r15),%eax
8f34:	cmp    $0x3,%eax
8f37:	mov    $0x2,%ecx
8f3c:	cmovl  %eax,%ecx
8f3f:	sub    %ecx,%eax
8f41:	mov    %eax,0x58(%r15)
8f45:	mov    %r14,%rax
8f48:	pop    %rbx
8f49:	pop    %r14
8f4b:	pop    %r15
8f4d:	retq   
8f4e:	nopw   %cs:0x0(%rax,%rax,1)
8f58:	nopl   0x0(%rax,%rax,1)
8f60:	endbr64 
8f64:	push   %rbp
8f65:	push   %r15
8f67:	push   %r14
8f69:	push   %r13
8f6b:	push   %r12
8f6d:	push   %rbx
8f6e:	push   %rax
8f6f:	mov    %rcx,%rbx
8f72:	mov    %rdx,%rcx
8f75:	mov    %rdi,%r14
8f78:	mov    0x28(%rbx),%r12
8f7c:	mov    0x30(%rbx),%r15
8f80:	mov    0x10(%rbx),%r13d
8f84:	movslq 0x58(%rbx),%rdx
8f88:	lea    0x2(%rdx),%eax
8f8b:	cmp    0x5c(%rbx),%eax
8f8e:	jle    8f94 <gs_mont_mul+0x34>
8f90:	xor    %ebp,%ebp
8f92:	jmp    8fa7 <gs_mont_mul+0x47>
8f94:	movslq 0x18(%rbx),%rbp
8f98:	imul   %rdx,%rbp
8f9c:	shl    $0x3,%rbp
8fa0:	add    0x60(%rbx),%rbp
8fa4:	mov    %eax,0x58(%rbx)
8fa7:	mov    %rbp,%rdi
8faa:	mov    %r13d,%edx
8fad:	mov    %r13d,%r8d
8fb0:	callq  b160 <cpMulAdc_BNU_school>
8fb5:	mov    %r14,%rdi
8fb8:	mov    %rbp,%rsi
8fbb:	mov    %r12,%rdx
8fbe:	mov    %r13d,%ecx
8fc1:	mov    %r15,%r8
8fc4:	callq  d450 <cpMontRedAdc_BNU>
8fc9:	mov    0x58(%rbx),%eax
8fcc:	cmp    $0x3,%eax
8fcf:	mov    $0x2,%ecx
8fd4:	cmovl  %eax,%ecx
8fd7:	sub    %ecx,%eax
8fd9:	mov    %eax,0x58(%rbx)
8fdc:	mov    %r14,%rax
8fdf:	add    $0x8,%rsp
8fe3:	pop    %rbx
8fe4:	pop    %r12
8fe6:	pop    %r13
8fe8:	pop    %r14
8fea:	pop    %r15
8fec:	pop    %rbp
8fed:	retq   
8fee:	nopw   %cs:0x0(%rax,%rax,1)
8ff8:	nopl   0x0(%rax,%rax,1)
9000:	endbr64 
9004:	push   %rbp
9005:	push   %r15
9007:	push   %r14
9009:	push   %r13
900b:	push   %r12
900d:	push   %rbx
900e:	push   %rax
900f:	mov    %rdx,%rbx
9012:	mov    %rdi,%r14
9015:	mov    0x28(%rdx),%r12
9019:	mov    0x30(%rdx),%r15
901d:	mov    0x10(%rdx),%r13d
9021:	movslq 0x58(%rdx),%rcx
9025:	lea    0x2(%rcx),%eax
9028:	cmp    0x5c(%rdx),%eax
902b:	jle    9031 <gs_mont_sqr+0x31>
902d:	xor    %ebp,%ebp
902f:	jmp    9044 <gs_mont_sqr+0x44>
9031:	movslq 0x18(%rbx),%rbp
9035:	imul   %rcx,%rbp
9039:	shl    $0x3,%rbp
903d:	add    0x60(%rbx),%rbp
9041:	mov    %eax,0x58(%rbx)
9044:	mov    %rbp,%rdi
9047:	mov    %r13d,%edx
904a:	callq  bec0 <cpSqrAdc_BNU_school>
904f:	mov    %r14,%rdi
9052:	mov    %rbp,%rsi
9055:	mov    %r12,%rdx
9058:	mov    %r13d,%ecx
905b:	mov    %r15,%r8
905e:	callq  d450 <cpMontRedAdc_BNU>
9063:	mov    0x58(%rbx),%eax
9066:	cmp    $0x3,%eax
9069:	mov    $0x2,%ecx
906e:	cmovl  %eax,%ecx
9071:	sub    %ecx,%eax
9073:	mov    %eax,0x58(%rbx)
9076:	mov    %r14,%rax
9079:	add    $0x8,%rsp
907d:	pop    %rbx
907e:	pop    %r12
9080:	pop    %r13
9082:	pop    %r14
9084:	pop    %r15
9086:	pop    %rbp
9087:	retq   
9088:	nopw   %cs:0x0(%rax,%rax,1)
9092:	nopw   %cs:0x0(%rax,%rax,1)
909c:	nopl   0x0(%rax)
90a0:	endbr64 
90a4:	push   %rbx
90a5:	mov    %rdi,%rbx
90a8:	mov    0x28(%rdx),%rax
90ac:	mov    0x30(%rdx),%r8
90b0:	mov    0x10(%rdx),%ecx
90b3:	mov    %rax,%rdx
90b6:	callq  d450 <cpMontRedAdc_BNU>
90bb:	mov    %rbx,%rax
90be:	pop    %rbx
90bf:	retq   
90c0:	endbr64 
90c4:	push   %rbp
90c5:	push   %r15
90c7:	push   %r14
90c9:	push   %r13
90cb:	push   %r12
90cd:	push   %rbx
90ce:	push   %rax
90cf:	mov    %rcx,%r14
90d2:	mov    %rdi,%r12
90d5:	mov    0x28(%rcx),%r13
90d9:	mov    0x10(%rcx),%r15d
90dd:	movslq 0x58(%rcx),%rax
90e1:	cmp    0x5c(%rcx),%eax
90e4:	jge    90ff <gs_mont_sub+0x3f>
90e6:	lea    0x1(%rax),%ecx
90e9:	movslq 0x18(%r14),%rbx
90ed:	imul   %rax,%rbx
90f1:	shl    $0x3,%rbx
90f5:	add    0x60(%r14),%rbx
90f9:	mov    %ecx,0x58(%r14)
90fd:	jmp    9101 <gs_mont_sub+0x41>
90ff:	xor    %ebx,%ebx
9101:	mov    %r12,%rdi
9104:	mov    %r15d,%ecx
9107:	callq  d170 <cpSub_BNU>
910c:	mov    %rax,%rbp
910f:	mov    %rbx,%rdi
9112:	mov    %r12,%rsi
9115:	mov    %r13,%rdx
9118:	mov    %r15d,%ecx
911b:	callq  ab30 <cpAdd_BNU>
9120:	test   %r15d,%r15d
9123:	jle    9286 <gs_mont_sub+0x1c6>
9129:	test   %rbp,%rbp
912c:	je     9286 <gs_mont_sub+0x1c6>
9132:	cmp    $0x4,%r15d
9136:	jb     914a <gs_mont_sub+0x8a>
9138:	lea    (%rbx,%r15,8),%rax
913c:	cmp    %r12,%rax
913f:	jbe    91b4 <gs_mont_sub+0xf4>
9141:	lea    (%r12,%r15,8),%rax
9145:	cmp    %rax,%rbx
9148:	jae    91b4 <gs_mont_sub+0xf4>
914a:	xor    %eax,%eax
914c:	mov    %rax,%rcx
914f:	not    %rcx
9152:	add    %r15,%rcx
9155:	mov    %r15,%rdx
9158:	and    $0x3,%rdx
915c:	je     9170 <gs_mont_sub+0xb0>
915e:	xchg   %ax,%ax
9160:	mov    (%rbx,%rax,8),%rsi
9164:	mov    %rsi,(%r12,%rax,8)
9168:	inc    %rax
916b:	dec    %rdx
916e:	jne    9160 <gs_mont_sub+0xa0>
9170:	cmp    $0x3,%rcx
9174:	jb     9286 <gs_mont_sub+0x1c6>
917a:	nopw   0x0(%rax,%rax,1)
9180:	mov    (%rbx,%rax,8),%rcx
9184:	mov    %rcx,(%r12,%rax,8)
9188:	mov    0x8(%rbx,%rax,8),%rcx
918d:	mov    %rcx,0x8(%r12,%rax,8)
9192:	mov    0x10(%rbx,%rax,8),%rcx
9197:	mov    %rcx,0x10(%r12,%rax,8)
919c:	mov    0x18(%rbx,%rax,8),%rcx
91a1:	mov    %rcx,0x18(%r12,%rax,8)
91a6:	add    $0x4,%rax
91aa:	cmp    %rax,%r15
91ad:	jne    9180 <gs_mont_sub+0xc0>
91af:	jmpq   9286 <gs_mont_sub+0x1c6>
91b4:	mov    %r15d,%eax
91b7:	and    $0xfffffffc,%eax
91ba:	lea    -0x4(%rax),%rsi
91be:	mov    %rsi,%rdx
91c1:	shr    $0x2,%rdx
91c5:	inc    %rdx
91c8:	mov    %edx,%ecx
91ca:	and    $0x3,%ecx
91cd:	cmp    $0xc,%rsi
91d1:	jae    91df <gs_mont_sub+0x11f>
91d3:	xor    %edx,%edx
91d5:	test   %rcx,%rcx
91d8:	jne    9255 <gs_mont_sub+0x195>
91da:	jmpq   927d <gs_mont_sub+0x1bd>
91df:	mov    %rcx,%rsi
91e2:	sub    %rdx,%rsi
91e5:	xor    %edx,%edx
91e7:	nopw   0x0(%rax,%rax,1)
91f0:	movups (%rbx,%rdx,8),%xmm0
91f4:	movups 0x10(%rbx,%rdx,8),%xmm1
91f9:	movups %xmm0,(%r12,%rdx,8)
91fe:	movups %xmm1,0x10(%r12,%rdx,8)
9204:	movups 0x20(%rbx,%rdx,8),%xmm0
9209:	movups 0x30(%rbx,%rdx,8),%xmm1
920e:	movups %xmm0,0x20(%r12,%rdx,8)
9214:	movups %xmm1,0x30(%r12,%rdx,8)
921a:	movups 0x40(%rbx,%rdx,8),%xmm0
921f:	movups 0x50(%rbx,%rdx,8),%xmm1
9224:	movups %xmm0,0x40(%r12,%rdx,8)
922a:	movups %xmm1,0x50(%r12,%rdx,8)
9230:	movups 0x60(%rbx,%rdx,8),%xmm0
9235:	movups 0x70(%rbx,%rdx,8),%xmm1
923a:	movups %xmm0,0x60(%r12,%rdx,8)
9240:	movups %xmm1,0x70(%r12,%rdx,8)
9246:	add    $0x10,%rdx
924a:	add    $0x4,%rsi
924e:	jne    91f0 <gs_mont_sub+0x130>
9250:	test   %rcx,%rcx
9253:	je     927d <gs_mont_sub+0x1bd>
9255:	lea    0x10(,%rdx,8),%rdx
925d:	neg    %rcx
9260:	movups -0x10(%rbx,%rdx,1),%xmm0
9265:	movups (%rbx,%rdx,1),%xmm1
9269:	movups %xmm0,-0x10(%r12,%rdx,1)
926f:	movups %xmm1,(%r12,%rdx,1)
9274:	add    $0x20,%rdx
9278:	inc    %rcx
927b:	jne    9260 <gs_mont_sub+0x1a0>
927d:	cmp    %r15,%rax
9280:	jne    914c <gs_mont_sub+0x8c>
9286:	mov    0x58(%r14),%eax
928a:	cmp    $0x2,%eax
928d:	mov    $0x1,%ecx
9292:	cmovl  %eax,%ecx
9295:	sub    %ecx,%eax
9297:	mov    %eax,0x58(%r14)
929b:	mov    %r12,%rax
929e:	add    $0x8,%rsp
92a2:	pop    %rbx
92a3:	pop    %r12
92a5:	pop    %r13
92a7:	pop    %r14
92a9:	pop    %r15
92ab:	pop    %rbp
92ac:	retq   
92ad:	nopw   %cs:0x0(%rax,%rax,1)
92b7:	nopw   0x0(%rax,%rax,1)
92c0:	endbr64 
92c4:	push   %rax
92c5:	mov    $0xfffffff8,%eax
92ca:	test   %rdi,%rdi
92cd:	je     930a <ippsGetOctString_BN+0x4a>
92cf:	test   %rdx,%rdx
92d2:	je     930a <ippsGetOctString_BN+0x4a>
92d4:	mov    (%rdx),%ecx
92d6:	xor    %edx,%ecx
92d8:	mov    $0xfffffff3,%eax
92dd:	cmp    $0x4249474e,%ecx
92e3:	jne    930a <ippsGetOctString_BN+0x4a>
92e5:	cmpl   $0x0,0x4(%rdx)
92e9:	je     930c <ippsGetOctString_BN+0x4c>
92eb:	test   %esi,%esi
92ed:	js     9313 <ippsGetOctString_BN+0x53>
92ef:	mov    0x10(%rdx),%rax
92f3:	mov    0x8(%rdx),%ecx
92f6:	mov    %rax,%rdx
92f9:	callq  9320 <cpToOctStr_BNU>
92fe:	xor    %ecx,%ecx
9300:	test   %eax,%eax
9302:	mov    $0xfffffff1,%eax
9307:	cmovne %ecx,%eax
930a:	pop    %rcx
930b:	retq   
930c:	mov    $0xfffffff9,%eax
9311:	pop    %rcx
9312:	retq   
9313:	mov    $0xfffffff1,%eax
9318:	pop    %rcx
9319:	retq   
931a:	nopw   0x0(%rax,%rax,1)
9320:	endbr64 
9324:	push   %rbp
9325:	push   %r15
9327:	push   %r14
9329:	push   %r13
932b:	push   %r12
932d:	push   %rbx
932e:	push   %rax
932f:	mov    %rdx,%r15
9332:	mov    %rsi,(%rsp)
9336:	mov    %rdi,%r13
9339:	test   %ecx,%ecx
933b:	jle    9367 <cpToOctStr_BNU+0x47>
933d:	movabs $0x8000000000000000,%rax
9347:	movslq %ecx,%rdx
934a:	mov    %ecx,%r8d
934d:	and    $0x1,%r8d
9351:	cmp    $0x1,%ecx
9354:	jne    9370 <cpToOctStr_BNU+0x50>
9356:	mov    $0xffffffffffffffff,%rbx
935d:	test   %r8,%r8
9360:	jne    93cf <cpToOctStr_BNU+0xaf>
9362:	jmpq   93eb <cpToOctStr_BNU+0xcb>
9367:	mov    $0xffffffffffffffff,%rbx
936e:	jmp    93eb <cpToOctStr_BNU+0xcb>
9370:	mov    $0xffffffffffffffff,%rdi
9377:	nopw   0x0(%rax,%rax,1)
9380:	mov    -0x10(%r15,%rdx,8),%rbx
9385:	mov    -0x8(%r15,%rdx,8),%rbp
938a:	mov    %rbp,%rsi
938d:	xor    %rax,%rsi
9390:	dec    %rbp
9393:	and    %rsi,%rbp
9396:	sar    $0x3f,%rbp
939a:	and    %rdi,%rbp
939d:	mov    %rbx,%rsi
93a0:	xor    %rax,%rsi
93a3:	dec    %rbx
93a6:	and    %rsi,%rbx
93a9:	sar    $0x3f,%rbx
93ad:	and    %rbp,%rbx
93b0:	mov    %ebp,%esi
93b2:	and    $0x1,%esi
93b5:	sub    %esi,%ecx
93b7:	add    $0xfffffffffffffffe,%rdx
93bb:	mov    %ebx,%esi
93bd:	and    $0x1,%esi
93c0:	sub    %esi,%ecx
93c2:	mov    %rbx,%rdi
93c5:	cmp    %rdx,%r8
93c8:	jne    9380 <cpToOctStr_BNU+0x60>
93ca:	test   %r8,%r8
93cd:	je     93eb <cpToOctStr_BNU+0xcb>
93cf:	mov    -0x8(%r15,%rdx,8),%rdx
93d4:	xor    %rdx,%rax
93d7:	dec    %rdx
93da:	and    %rax,%rdx
93dd:	sar    $0x3f,%rdx
93e1:	and    %rdx,%rbx
93e4:	mov    %ebx,%eax
93e6:	and    $0x1,%eax
93e9:	sub    %eax,%ecx
93eb:	mov    %ebx,%eax
93ed:	and    $0x1,%eax
93f0:	not    %ebx
93f2:	and    %ecx,%ebx
93f4:	or     %rax,%rbx
93f7:	mov    %ebx,%r14d
93fa:	shl    $0x6,%r14d
93fe:	mov    %rbx,%rax
9401:	shl    $0x20,%rax
9405:	movabs $0xffffffff00000000,%rbp
940f:	add    %rax,%rbp
9412:	mov    %rbp,%rax
9415:	sar    $0x1d,%rax
9419:	mov    (%r15,%rax,1),%rdi
941d:	callq  97c0 <cpNLZ_BNU>
9422:	sub    %eax,%r14d
9425:	mov    (%rsp),%r8
9429:	lea    0x0(,%r8,8),%ecx
9431:	xor    %eax,%eax
9433:	cmp    %ecx,%r14d
9436:	jg     9795 <cpToOctStr_BNU+0x475>
943c:	sar    $0x20,%rbp
9440:	mov    (%r15,%rbp,8),%r12
9444:	test   %r8d,%r8d
9447:	jle    957e <cpToOctStr_BNU+0x25e>
944d:	mov    %r8d,%eax
9450:	cmp    $0x20,%r8d
9454:	jae    945d <cpToOctStr_BNU+0x13d>
9456:	xor    %ecx,%ecx
9458:	jmpq   9570 <cpToOctStr_BNU+0x250>
945d:	mov    %eax,%ecx
945f:	and    $0xffffffe0,%ecx
9462:	lea    -0x20(%rcx),%rdi
9466:	mov    %rdi,%rsi
9469:	shr    $0x5,%rsi
946d:	inc    %rsi
9470:	mov    %esi,%edx
9472:	and    $0x7,%edx
9475:	cmp    $0xe0,%rdi
947c:	jae    948e <cpToOctStr_BNU+0x16e>
947e:	xor    %esi,%esi
9480:	test   %rdx,%rdx
9483:	jne    953e <cpToOctStr_BNU+0x21e>
9489:	jmpq   9562 <cpToOctStr_BNU+0x242>
948e:	mov    %rdx,%rdi
9491:	sub    %rsi,%rdi
9494:	xor    %esi,%esi
9496:	pxor   %xmm0,%xmm0
949a:	nopw   0x0(%rax,%rax,1)
94a0:	movdqu %xmm0,0x0(%r13,%rsi,1)
94a7:	movdqu %xmm0,0x10(%r13,%rsi,1)
94ae:	movdqu %xmm0,0x20(%r13,%rsi,1)
94b5:	movdqu %xmm0,0x30(%r13,%rsi,1)
94bc:	movdqu %xmm0,0x40(%r13,%rsi,1)
94c3:	movdqu %xmm0,0x50(%r13,%rsi,1)
94ca:	movdqu %xmm0,0x60(%r13,%rsi,1)
94d1:	movdqu %xmm0,0x70(%r13,%rsi,1)
94d8:	movdqu %xmm0,0x80(%r13,%rsi,1)
94e2:	movdqu %xmm0,0x90(%r13,%rsi,1)
94ec:	movdqu %xmm0,0xa0(%r13,%rsi,1)
94f6:	movdqu %xmm0,0xb0(%r13,%rsi,1)
9500:	movdqu %xmm0,0xc0(%r13,%rsi,1)
950a:	movdqu %xmm0,0xd0(%r13,%rsi,1)
9514:	movdqu %xmm0,0xe0(%r13,%rsi,1)
951e:	movdqu %xmm0,0xf0(%r13,%rsi,1)
9528:	add    $0x100,%rsi
952f:	add    $0x8,%rdi
9533:	jne    94a0 <cpToOctStr_BNU+0x180>
9539:	test   %rdx,%rdx
953c:	je     9562 <cpToOctStr_BNU+0x242>
953e:	lea    0x10(%rsi,%r13,1),%rsi
9543:	neg    %rdx
9546:	pxor   %xmm0,%xmm0
954a:	nopw   0x0(%rax,%rax,1)
9550:	movdqu %xmm0,-0x10(%rsi)
9555:	movdqu %xmm0,(%rsi)
9559:	add    $0x20,%rsi
955d:	inc    %rdx
9560:	jne    9550 <cpToOctStr_BNU+0x230>
9562:	cmp    %rax,%rcx
9565:	je     957e <cpToOctStr_BNU+0x25e>
9567:	nopw   0x0(%rax,%rax,1)
9570:	movb   $0x0,0x0(%r13,%rcx,1)
9576:	inc    %rcx
9579:	cmp    %rcx,%rax
957c:	jne    9570 <cpToOctStr_BNU+0x250>
957e:	test   %r12,%r12
9581:	je     9792 <cpToOctStr_BNU+0x472>
9587:	add    $0x7,%r14d
958b:	sar    $0x3,%r14d
958f:	mov    %r8d,%eax
9592:	sub    %r14d,%eax
9595:	movslq %eax,%rbp
9598:	add    %r13,%rbp
959b:	mov    %r12,%rdi
959e:	callq  97c0 <cpNLZ_BNU>
95a3:	cmp    $0x3f,%eax
95a6:	jg     95d4 <cpToOctStr_BNU+0x2b4>
95a8:	mov    %eax,%edx
95aa:	sar    $0x1f,%edx
95ad:	shr    $0x1d,%edx
95b0:	add    %eax,%edx
95b2:	sar    $0x3,%edx
95b5:	cmp    $0x6,%edx
95b8:	mov    $0x7,%eax
95bd:	cmovg  %edx,%eax
95c0:	sub    %edx,%eax
95c2:	inc    %rax
95c5:	cmp    $0x7,%rax
95c9:	ja     95e8 <cpToOctStr_BNU+0x2c8>
95cb:	mov    (%rsp),%r8
95cf:	jmpq   972b <cpToOctStr_BNU+0x40b>
95d4:	mov    (%rsp),%r8
95d8:	lea    -0x1(%rbx),%eax
95db:	test   %eax,%eax
95dd:	jg     975d <cpToOctStr_BNU+0x43d>
95e3:	jmpq   9792 <cpToOctStr_BNU+0x472>
95e8:	mov    %rax,%rcx
95eb:	and    $0xfffffffffffffff8,%rcx
95ef:	add    %rcx,%rbp
95f2:	movd   %edx,%xmm0
95f6:	pshufd $0x0,%xmm0,%xmm0
95fb:	paddd  0x5b6d(%rip),%xmm0        # f170 <SHA512_256_fixPS+0x790>
9603:	add    %ecx,%edx
9605:	movq   %r12,%xmm1
960a:	mov    (%rsp),%r8
960e:	movslq %r8d,%rsi
9611:	movslq %r14d,%rdi
9614:	sub    %rdi,%rsi
9617:	lea    0x4(%rsi,%r13,1),%rsi
961c:	xor    %edi,%edi
961e:	pshufd $0x44,%xmm1,%xmm4
9623:	movdqa 0x5b54(%rip),%xmm8        # f180 <SHA512_256_fixPS+0x7a0>
962c:	movdqa 0x5b5b(%rip),%xmm9        # f190 <SHA512_256_fixPS+0x7b0>
9635:	movdqa 0x5b22(%rip),%xmm11        # f160 <SHA512_256_fixPS+0x780>
963e:	movdqa 0x5b59(%rip),%xmm10        # f1a0 <SHA512_256_fixPS+0x7c0>
9647:	nopw   0x0(%rax,%rax,1)
9650:	movdqa %xmm0,%xmm6
9654:	pslld  $0x3,%xmm6
9659:	movdqa %xmm8,%xmm7
965e:	psubd  %xmm6,%xmm7
9662:	movdqa %xmm9,%xmm3
9667:	psubd  %xmm6,%xmm3
966b:	pshufd $0x4e,%xmm7,%xmm6
9670:	pmovzxdq %xmm6,%xmm6
9675:	pmovzxdq %xmm7,%xmm7
967a:	pshufd $0x4e,%xmm3,%xmm2
967f:	pmovzxdq %xmm2,%xmm2
9684:	movdqa %xmm4,%xmm1
9688:	psrlq  %xmm7,%xmm1
968c:	pmovzxdq %xmm3,%xmm3
9691:	pshufd $0x4e,%xmm7,%xmm7
9696:	movdqa %xmm4,%xmm5
969a:	psrlq  %xmm7,%xmm5
969e:	pblendw $0xf,%xmm1,%xmm5
96a4:	movdqa %xmm4,%xmm1
96a8:	psrlq  %xmm6,%xmm1
96ac:	pshufd $0x4e,%xmm6,%xmm6
96b1:	movdqa %xmm4,%xmm7
96b5:	psrlq  %xmm6,%xmm7
96b9:	movdqa %xmm4,%xmm6
96bd:	psrlq  %xmm3,%xmm6
96c1:	pblendw $0xf,%xmm1,%xmm7
96c7:	pshufd $0x4e,%xmm3,%xmm1
96cc:	movdqa %xmm4,%xmm3
96d0:	psrlq  %xmm1,%xmm3
96d4:	shufps $0x88,%xmm7,%xmm5
96d8:	pblendw $0xf,%xmm6,%xmm3
96de:	movdqa %xmm4,%xmm1
96e2:	psrlq  %xmm2,%xmm1
96e6:	pshufd $0x4e,%xmm2,%xmm2
96eb:	movdqa %xmm4,%xmm6
96ef:	psrlq  %xmm2,%xmm6
96f3:	pblendw $0xf,%xmm1,%xmm6
96f9:	shufps $0x88,%xmm6,%xmm3
96fd:	pshufb %xmm11,%xmm5
9703:	movd   %xmm5,-0x4(%rsi,%rdi,1)
9709:	pshufb %xmm11,%xmm3
970f:	movd   %xmm3,(%rsi,%rdi,1)
9714:	add    $0x8,%rdi
9718:	paddd  %xmm10,%xmm0
971d:	cmp    %rdi,%rcx
9720:	jne    9650 <cpToOctStr_BNU+0x330>
9726:	cmp    %rcx,%rax
9729:	je     9756 <cpToOctStr_BNU+0x436>
972b:	lea    0x0(,%rdx,8),%eax
9732:	mov    $0x38,%ecx
9737:	sub    %eax,%ecx
9739:	nopl   0x0(%rax)
9740:	mov    %r12,%rax
9743:	shr    %cl,%rax
9746:	mov    %al,0x0(%rbp)
9749:	inc    %rbp
974c:	inc    %edx
974e:	add    $0xfffffff8,%ecx
9751:	cmp    $0x8,%edx
9754:	jl     9740 <cpToOctStr_BNU+0x420>
9756:	lea    -0x1(%rbx),%eax
9759:	test   %eax,%eax
975b:	jle    9792 <cpToOctStr_BNU+0x472>
975d:	cltq   
975f:	movabs $0xfffffffe00000000,%rcx
9769:	nopl   0x0(%rax)
9770:	shl    $0x20,%rbx
9774:	add    %rcx,%rbx
9777:	sar    $0x1d,%rbx
977b:	mov    (%r15,%rbx,1),%rdx
977f:	bswap  %rdx
9782:	mov    %rax,%rbx
9785:	mov    %rdx,0x0(%rbp)
9789:	add    $0x8,%rbp
978d:	dec    %rax
9790:	jg     9770 <cpToOctStr_BNU+0x450>
9792:	mov    %r8d,%eax
9795:	add    $0x8,%rsp
9799:	pop    %rbx
979a:	pop    %r12
979c:	pop    %r13
979e:	pop    %r14
97a0:	pop    %r15
97a2:	pop    %rbp
97a3:	retq   
97a4:	nopw   %cs:0x0(%rax,%rax,1)
97ae:	nopw   %cs:0x0(%rax,%rax,1)
97b8:	nopl   0x0(%rax,%rax,1)
97c0:	endbr64 
97c4:	movabs $0xffffffff00000000,%rax
97ce:	and    %rdi,%rax
97d1:	movabs $0x8000000000000000,%r8
97db:	mov    %rdi,%rdx
97de:	xor    %r8,%rdx
97e1:	dec    %rax
97e4:	and    %rdx,%rax
97e7:	mov    %rax,%rdx
97ea:	shr    $0x3a,%rdx
97ee:	and    $0xffffffe0,%edx
97f1:	mov    %rdi,%rsi
97f4:	shl    $0x20,%rsi
97f8:	test   %rax,%rax
97fb:	cmovns %rdi,%rsi
97ff:	movabs $0xffff000000000000,%rax
9809:	and    %rsi,%rax
980c:	mov    %rsi,%rdi
980f:	xor    %r8,%rdi
9812:	dec    %rax
9815:	and    %rdi,%rax
9818:	mov    %rax,%rdi
981b:	shr    $0x3b,%rdi
981f:	and    $0xfffffff0,%edi
9822:	or     %edx,%edi
9824:	mov    %rsi,%rdx
9827:	shl    $0x10,%rdx
982b:	test   %rax,%rax
982e:	cmovns %rsi,%rdx
9832:	movabs $0xff00000000000000,%rax
983c:	and    %rdx,%rax
983f:	mov    %rdx,%rsi
9842:	xor    %r8,%rsi
9845:	dec    %rax
9848:	and    %rsi,%rax
984b:	mov    %rax,%rsi
984e:	shr    $0x3c,%rsi
9852:	and    $0xfffffff8,%esi
9855:	or     %edi,%esi
9857:	mov    %rdx,%rdi
985a:	shl    $0x8,%rdi
985e:	test   %rax,%rax
9861:	cmovns %rdx,%rdi
9865:	movabs $0xf000000000000000,%rax
986f:	and    %rdi,%rax
9872:	mov    %rdi,%rdx
9875:	xor    %r8,%rdx
9878:	dec    %rax
987b:	and    %rdx,%rax
987e:	mov    %rax,%rcx
9881:	shr    $0x3d,%rcx
9885:	and    $0xfffffffc,%ecx
9888:	or     %esi,%ecx
988a:	mov    %rdi,%rsi
988d:	shl    $0x4,%rsi
9891:	test   %rax,%rax
9894:	cmovns %rdi,%rsi
9898:	movabs $0xc000000000000000,%rax
98a2:	and    %rsi,%rax
98a5:	mov    %rsi,%rdx
98a8:	xor    %r8,%rdx
98ab:	dec    %rax
98ae:	and    %rdx,%rax
98b1:	mov    %rax,%rdx
98b4:	shr    $0x3e,%rdx
98b8:	and    $0xfffffffe,%edx
98bb:	or     %ecx,%edx
98bd:	lea    0x0(,%rsi,4),%rcx
98c5:	test   %rax,%rax
98c8:	cmovns %rsi,%rcx
98cc:	mov    %rcx,%rax
98cf:	and    %r8,%rax
98d2:	dec    %rax
98d5:	sar    $0x3f,%rax
98d9:	sub    %eax,%edx
98db:	lea    (%rcx,%rcx,1),%rsi
98df:	and    %rax,%rsi
98e2:	not    %rax
98e5:	and    %rcx,%rax
98e8:	or     %rsi,%rax
98eb:	and    %r8,%rax
98ee:	dec    %rax
98f1:	shr    $0x3f,%rax
98f5:	add    %edx,%eax
98f7:	retq   
98f8:	nopl   0x0(%rax,%rax,1)
9900:	endbr64 
9904:	push   %rbp
9905:	push   %r15
9907:	push   %r14
9909:	push   %r12
990b:	push   %rbx
990c:	sub    $0x110,%rsp
9913:	mov    %r9,%r15
9916:	mov    %rcx,%r9
9919:	mov    %rdi,%r14
991c:	mov    %fs:0x28,%rax
9925:	mov    %rax,0x108(%rsp)
992d:	mov    0x8(%r15),%r12d
9931:	movslq 0xc(%r15),%r10
9935:	mov    %r12d,%eax
9938:	sub    %r10d,%eax
993b:	cmp    %edx,%eax
993d:	setle  %cl
9940:	shl    %cl,%r12d
9943:	test   %edx,%edx
9945:	jle    9a2f <cpFinalize_rmf+0x12f>
994b:	mov    %edx,%ecx
994d:	cmp    $0x20,%edx
9950:	jae    9959 <cpFinalize_rmf+0x59>
9952:	xor    %edi,%edi
9954:	jmpq   9a20 <cpFinalize_rmf+0x120>
9959:	mov    %ecx,%edi
995b:	and    $0xffffffe0,%edi
995e:	lea    -0x20(%rdi),%rax
9962:	mov    %rax,%rbx
9965:	shr    $0x5,%rbx
9969:	inc    %rbx
996c:	mov    %ebx,%ebp
996e:	and    $0x3,%ebp
9971:	cmp    $0x60,%rax
9975:	jae    9983 <cpFinalize_rmf+0x83>
9977:	xor    %ebx,%ebx
9979:	test   %rbp,%rbp
997c:	jne    99ed <cpFinalize_rmf+0xed>
997e:	jmpq   9a1b <cpFinalize_rmf+0x11b>
9983:	mov    %rbp,%rax
9986:	sub    %rbx,%rax
9989:	xor    %ebx,%ebx
998b:	nopl   0x0(%rax,%rax,1)
9990:	movups (%rsi,%rbx,1),%xmm0
9994:	movups 0x10(%rsi,%rbx,1),%xmm1
9999:	movaps %xmm0,(%rsp,%rbx,1)
999d:	movaps %xmm1,0x10(%rsp,%rbx,1)
99a2:	movups 0x20(%rsi,%rbx,1),%xmm0
99a7:	movups 0x30(%rsi,%rbx,1),%xmm1
99ac:	movaps %xmm0,0x20(%rsp,%rbx,1)
99b1:	movaps %xmm1,0x30(%rsp,%rbx,1)
99b6:	movups 0x40(%rsi,%rbx,1),%xmm0
99bb:	movups 0x50(%rsi,%rbx,1),%xmm1
99c0:	movaps %xmm0,0x40(%rsp,%rbx,1)
99c5:	movaps %xmm1,0x50(%rsp,%rbx,1)
99ca:	movups 0x60(%rsi,%rbx,1),%xmm0
99cf:	movups 0x70(%rsi,%rbx,1),%xmm1
99d4:	movaps %xmm0,0x60(%rsp,%rbx,1)
99d9:	movaps %xmm1,0x70(%rsp,%rbx,1)
99de:	sub    $0xffffffffffffff80,%rbx
99e2:	add    $0x4,%rax
99e6:	jne    9990 <cpFinalize_rmf+0x90>
99e8:	test   %rbp,%rbp
99eb:	je     9a1b <cpFinalize_rmf+0x11b>
99ed:	add    $0x10,%rbx
99f1:	neg    %rbp
99f4:	nopw   %cs:0x0(%rax,%rax,1)
99fe:	xchg   %ax,%ax
9a00:	movups -0x10(%rsi,%rbx,1),%xmm0
9a05:	movups (%rsi,%rbx,1),%xmm1
9a09:	movaps %xmm0,-0x10(%rsp,%rbx,1)
9a0e:	movaps %xmm1,(%rsp,%rbx,1)
9a12:	add    $0x20,%rbx
9a16:	inc    %rbp
9a19:	jne    9a00 <cpFinalize_rmf+0x100>
9a1b:	cmp    %rcx,%rdi
9a1e:	je     9a2f <cpFinalize_rmf+0x12f>
9a20:	movzbl (%rsi,%rdi,1),%eax
9a24:	mov    %al,(%rsp,%rdi,1)
9a27:	inc    %rdi
9a2a:	cmp    %rdi,%rcx
9a2d:	jne    9a20 <cpFinalize_rmf+0x120>
9a2f:	movslq %edx,%rcx
9a32:	movb   $0x80,(%rsp,%rcx,1)
9a36:	inc    %rcx
9a39:	mov    %r12d,%eax
9a3c:	sub    %ecx,%eax
9a3e:	sub    %r10d,%eax
9a41:	test   %eax,%eax
9a43:	jle    9b5c <cpFinalize_rmf+0x25c>
9a49:	mov    %eax,%edx
9a4b:	cmp    $0x20,%eax
9a4e:	jae    9a57 <cpFinalize_rmf+0x157>
9a50:	xor    %esi,%esi
9a52:	jmpq   9b45 <cpFinalize_rmf+0x245>
9a57:	mov    %edx,%esi
9a59:	and    $0xffffffe0,%esi
9a5c:	lea    -0x20(%rsi),%rbp
9a60:	mov    %rbp,%rax
9a63:	shr    $0x5,%rax
9a67:	inc    %rax
9a6a:	mov    %eax,%edi
9a6c:	and    $0x7,%edi
9a6f:	cmp    $0xe0,%rbp
9a76:	jae    9a88 <cpFinalize_rmf+0x188>
9a78:	xor    %ebx,%ebx
9a7a:	test   %rdi,%rdi
9a7d:	jne    9b17 <cpFinalize_rmf+0x217>
9a83:	jmpq   9b40 <cpFinalize_rmf+0x240>
9a88:	sub    %rdi,%rax
9a8b:	mov    %rsp,%rbp
9a8e:	lea    0xf0(%rcx,%rbp,1),%rbp
9a96:	xor    %ebx,%ebx
9a98:	xorps  %xmm0,%xmm0
9a9b:	nopl   0x0(%rax,%rax,1)
9aa0:	movups %xmm0,-0xf0(%rbp,%rbx,1)
9aa8:	movups %xmm0,-0xe0(%rbp,%rbx,1)
9ab0:	movups %xmm0,-0xd0(%rbp,%rbx,1)
9ab8:	movups %xmm0,-0xc0(%rbp,%rbx,1)
9ac0:	movups %xmm0,-0xb0(%rbp,%rbx,1)
9ac8:	movups %xmm0,-0xa0(%rbp,%rbx,1)
9ad0:	movups %xmm0,-0x90(%rbp,%rbx,1)
9ad8:	movups %xmm0,-0x80(%rbp,%rbx,1)
9add:	movups %xmm0,-0x70(%rbp,%rbx,1)
9ae2:	movups %xmm0,-0x60(%rbp,%rbx,1)
9ae7:	movups %xmm0,-0x50(%rbp,%rbx,1)
9aec:	movups %xmm0,-0x40(%rbp,%rbx,1)
9af1:	movups %xmm0,-0x30(%rbp,%rbx,1)
9af6:	movups %xmm0,-0x20(%rbp,%rbx,1)
9afb:	movups %xmm0,-0x10(%rbp,%rbx,1)
9b00:	movups %xmm0,0x0(%rbp,%rbx,1)
9b05:	add    $0x100,%rbx
9b0c:	add    $0xfffffffffffffff8,%rax
9b10:	jne    9aa0 <cpFinalize_rmf+0x1a0>
9b12:	test   %rdi,%rdi
9b15:	je     9b40 <cpFinalize_rmf+0x240>
9b17:	add    %rcx,%rbx
9b1a:	lea    0x10(%rsp,%rbx,1),%rax
9b1f:	neg    %rdi
9b22:	xorps  %xmm0,%xmm0
9b25:	nopw   %cs:0x0(%rax,%rax,1)
9b2f:	nop
9b30:	movups %xmm0,-0x10(%rax)
9b34:	movups %xmm0,(%rax)
9b37:	add    $0x20,%rax
9b3b:	inc    %rdi
9b3e:	jne    9b30 <cpFinalize_rmf+0x230>
9b40:	cmp    %rdx,%rsi
9b43:	je     9b5c <cpFinalize_rmf+0x25c>
9b45:	lea    (%rsp,%rcx,1),%rax
9b49:	nopl   0x0(%rax)
9b50:	movb   $0x0,(%rax,%rsi,1)
9b54:	inc    %rsi
9b57:	cmp    %rsi,%rdx
9b5a:	jne    9b50 <cpFinalize_rmf+0x250>
9b5c:	movslq %r12d,%rax
9b5f:	lea    (%rsp,%rax,1),%rdi
9b63:	sub    %r10,%rdi
9b66:	mov    %r9,%rsi
9b69:	mov    %r8,%rdx
9b6c:	callq  *0x28(%r15)
9b70:	mov    %rsp,%rsi
9b73:	mov    %r14,%rdi
9b76:	mov    %r12d,%edx
9b79:	callq  *0x18(%r15)
9b7d:	mov    %fs:0x28,%rax
9b86:	cmp    0x108(%rsp),%rax
9b8e:	jne    9ba0 <cpFinalize_rmf+0x2a0>
9b90:	add    $0x110,%rsp
9b97:	pop    %rbx
9b98:	pop    %r12
9b9a:	pop    %r14
9b9c:	pop    %r15
9b9e:	pop    %rbp
9b9f:	retq   
9ba0:	callq  820 <__wrap___stack_chk_fail>
9ba5:	nopw   %cs:0x0(%rax,%rax,1)
9baf:	nopw   %cs:0x0(%rax,%rax,1)
9bb9:	nopl   0x0(%rax)
9bc0:	endbr64 
9bc4:	mov    %edi,%eax
9bc6:	add    $0x3f,%eax
9bc9:	sar    $0x1f,%eax
9bcc:	shr    $0x1a,%eax
9bcf:	lea    0x3f(%rdi,%rax,1),%eax
9bd3:	sar    $0x6,%eax
9bd6:	retq   
9bd7:	nopw   0x0(%rax,%rax,1)
9be0:	endbr64 
9be4:	push   %rbp
9be5:	push   %r15
9be7:	push   %r14
9be9:	push   %r13
9beb:	push   %r12
9bed:	push   %rbx
9bee:	sub    $0x18,%rsp
9bf2:	mov    %r9,%rbx
9bf5:	mov    %rdi,%r15
9bf8:	mov    0x10(%r9),%ebp
9bfc:	lea    0x3f(%r8),%edi
9c00:	mov    %edi,%eax
9c02:	sar    $0x1f,%eax
9c05:	shr    $0x1a,%eax
9c08:	lea    0x3f(%r8,%rax,1),%r14d
9c0d:	sar    $0x6,%r14d
9c11:	mov    (%rcx),%rax
9c14:	cmp    $0x80,%edi
9c1a:	mov    %rbp,0x8(%rsp)
9c1f:	jl     9d4c <gsMontExpBin_BNU+0x16c>
9c25:	mov    %r14d,%r10d
9c28:	lea    -0x1(%r10),%r9
9c2c:	mov    $0x1,%edi
9c31:	cmp    $0x4,%r9
9c35:	jb     9d40 <gsMontExpBin_BNU+0x160>
9c3b:	mov    %r9,%rdi
9c3e:	and    $0xfffffffffffffffc,%rdi
9c42:	movq   %rax,%xmm0
9c47:	lea    -0x4(%rdi),%rbp
9c4b:	mov    %rbp,%rax
9c4e:	shr    $0x2,%rax
9c52:	inc    %rax
9c55:	mov    %eax,%r11d
9c58:	and    $0x3,%r11d
9c5c:	cmp    $0xc,%rbp
9c60:	jae    9c72 <gsMontExpBin_BNU+0x92>
9c62:	pxor   %xmm1,%xmm1
9c66:	xor    %eax,%eax
9c68:	test   %r11,%r11
9c6b:	jne    9cdf <gsMontExpBin_BNU+0xff>
9c6d:	jmpq   9d18 <gsMontExpBin_BNU+0x138>
9c72:	mov    %r11,%rbp
9c75:	sub    %rax,%rbp
9c78:	pxor   %xmm1,%xmm1
9c7c:	xor    %eax,%eax
9c7e:	xchg   %ax,%ax
9c80:	movdqu 0x8(%rcx,%rax,8),%xmm2
9c86:	por    %xmm0,%xmm2
9c8a:	movdqu 0x18(%rcx,%rax,8),%xmm0
9c90:	por    %xmm1,%xmm0
9c94:	movdqu 0x28(%rcx,%rax,8),%xmm1
9c9a:	movdqu 0x38(%rcx,%rax,8),%xmm3
9ca0:	movdqu 0x48(%rcx,%rax,8),%xmm4
9ca6:	por    %xmm1,%xmm4
9caa:	por    %xmm2,%xmm4
9cae:	movdqu 0x58(%rcx,%rax,8),%xmm2
9cb4:	por    %xmm3,%xmm2
9cb8:	por    %xmm0,%xmm2
9cbc:	movdqu 0x68(%rcx,%rax,8),%xmm0
9cc2:	por    %xmm4,%xmm0
9cc6:	movdqu 0x78(%rcx,%rax,8),%xmm1
9ccc:	por    %xmm2,%xmm1
9cd0:	add    $0x10,%rax
9cd4:	add    $0x4,%rbp
9cd8:	jne    9c80 <gsMontExpBin_BNU+0xa0>
9cda:	test   %r11,%r11
9cdd:	je     9d18 <gsMontExpBin_BNU+0x138>
9cdf:	neg    %r11
9ce2:	nopw   %cs:0x0(%rax,%rax,1)
9cec:	nopl   0x0(%rax)
9cf0:	lea    0x0(,%rax,8),%rbp
9cf8:	or     $0x8,%rbp
9cfc:	movdqu (%rcx,%rbp,1),%xmm2
9d01:	por    %xmm2,%xmm0
9d05:	movdqu 0x10(%rcx,%rbp,1),%xmm2
9d0b:	por    %xmm2,%xmm1
9d0f:	add    $0x4,%rax
9d13:	inc    %r11
9d16:	jne    9cf0 <gsMontExpBin_BNU+0x110>
9d18:	por    %xmm1,%xmm0
9d1c:	pshufd $0x4e,%xmm0,%xmm1
9d21:	por    %xmm0,%xmm1
9d25:	movq   %xmm1,%rax
9d2a:	cmp    %rdi,%r9
9d2d:	jne    9d36 <gsMontExpBin_BNU+0x156>
9d2f:	mov    0x8(%rsp),%rbp
9d34:	jmp    9d4c <gsMontExpBin_BNU+0x16c>
9d36:	or     $0x1,%rdi
9d3a:	mov    0x8(%rsp),%rbp
9d3f:	nop
9d40:	or     (%rcx,%rdi,8),%rax
9d44:	inc    %rdi
9d47:	cmp    %rdi,%r10
9d4a:	jne    9d40 <gsMontExpBin_BNU+0x160>
9d4c:	movabs $0x8000000000000000,%r9
9d56:	mov    %rax,%rdi
9d59:	xor    %r9,%rdi
9d5c:	dec    %rax
9d5f:	test   %rdi,%rax
9d62:	js     9dcf <gsMontExpBin_BNU+0x1ef>
9d64:	mov    %rcx,0x10(%rsp)
9d69:	mov    (%rsi),%r11
9d6c:	mov    %r11,%rax
9d6f:	cmp    $0x2,%edx
9d72:	jl     9f3c <gsMontExpBin_BNU+0x35c>
9d78:	mov    %edx,%r12d
9d7b:	lea    -0x1(%r12),%r10
9d80:	mov    $0x1,%ecx
9d85:	mov    %r11,%rax
9d88:	cmp    $0x4,%r10
9d8c:	jb     9f30 <gsMontExpBin_BNU+0x350>
9d92:	mov    %r10,%rcx
9d95:	and    $0xfffffffffffffffc,%rcx
9d99:	movq   %r11,%xmm0
9d9e:	lea    -0x4(%rcx),%rdi
9da2:	mov    %rdi,%rax
9da5:	shr    $0x2,%rax
9da9:	inc    %rax
9dac:	mov    %eax,%ebp
9dae:	and    $0x3,%ebp
9db1:	cmp    $0xc,%rdi
9db5:	jae    9e64 <gsMontExpBin_BNU+0x284>
9dbb:	pxor   %xmm1,%xmm1
9dbf:	xor    %eax,%eax
9dc1:	test   %rbp,%rbp
9dc4:	jne    9ecf <gsMontExpBin_BNU+0x2ef>
9dca:	jmpq   9f08 <gsMontExpBin_BNU+0x328>
9dcf:	test   %ebp,%ebp
9dd1:	jle    a6d2 <gsMontExpBin_BNU+0xaf2>
9dd7:	mov    0x38(%rbx),%rax
9ddb:	cmp    $0x4,%ebp
9dde:	jb     9dfa <gsMontExpBin_BNU+0x21a>
9de0:	lea    (%rax,%rbp,8),%rcx
9de4:	cmp    %r15,%rcx
9de7:	jbe    a01f <gsMontExpBin_BNU+0x43f>
9ded:	lea    (%r15,%rbp,8),%rcx
9df1:	cmp    %rcx,%rax
9df4:	jae    a01f <gsMontExpBin_BNU+0x43f>
9dfa:	xor    %ecx,%ecx
9dfc:	mov    %rcx,%rdx
9dff:	not    %rdx
9e02:	add    %rbp,%rdx
9e05:	mov    %rbp,%rsi
9e08:	and    $0x3,%rsi
9e0c:	je     9e20 <gsMontExpBin_BNU+0x240>
9e0e:	xchg   %ax,%ax
9e10:	mov    (%rax,%rcx,8),%rdi
9e14:	mov    %rdi,(%r15,%rcx,8)
9e18:	inc    %rcx
9e1b:	dec    %rsi
9e1e:	jne    9e10 <gsMontExpBin_BNU+0x230>
9e20:	cmp    $0x3,%rdx
9e24:	jb     a6d2 <gsMontExpBin_BNU+0xaf2>
9e2a:	nopw   0x0(%rax,%rax,1)
9e30:	mov    (%rax,%rcx,8),%rdx
9e34:	mov    %rdx,(%r15,%rcx,8)
9e38:	mov    0x8(%rax,%rcx,8),%rdx
9e3d:	mov    %rdx,0x8(%r15,%rcx,8)
9e42:	mov    0x10(%rax,%rcx,8),%rdx
9e47:	mov    %rdx,0x10(%r15,%rcx,8)
9e4c:	mov    0x18(%rax,%rcx,8),%rdx
9e51:	mov    %rdx,0x18(%r15,%rcx,8)
9e56:	add    $0x4,%rcx
9e5a:	cmp    %rcx,%rbp
9e5d:	jne    9e30 <gsMontExpBin_BNU+0x250>
9e5f:	jmpq   a6d2 <gsMontExpBin_BNU+0xaf2>
9e64:	mov    %rbp,%rdi
9e67:	sub    %rax,%rdi
9e6a:	pxor   %xmm1,%xmm1
9e6e:	xor    %eax,%eax
9e70:	movdqu 0x8(%rsi,%rax,8),%xmm2
9e76:	por    %xmm0,%xmm2
9e7a:	movdqu 0x18(%rsi,%rax,8),%xmm0
9e80:	por    %xmm1,%xmm0
9e84:	movdqu 0x28(%rsi,%rax,8),%xmm1
9e8a:	movdqu 0x38(%rsi,%rax,8),%xmm3
9e90:	movdqu 0x48(%rsi,%rax,8),%xmm4
9e96:	por    %xmm1,%xmm4
9e9a:	por    %xmm2,%xmm4
9e9e:	movdqu 0x58(%rsi,%rax,8),%xmm2
9ea4:	por    %xmm3,%xmm2
9ea8:	por    %xmm0,%xmm2
9eac:	movdqu 0x68(%rsi,%rax,8),%xmm0
9eb2:	por    %xmm4,%xmm0
9eb6:	movdqu 0x78(%rsi,%rax,8),%xmm1
9ebc:	por    %xmm2,%xmm1
9ec0:	add    $0x10,%rax
9ec4:	add    $0x4,%rdi
9ec8:	jne    9e70 <gsMontExpBin_BNU+0x290>
9eca:	test   %rbp,%rbp
9ecd:	je     9f08 <gsMontExpBin_BNU+0x328>
9ecf:	neg    %rbp
9ed2:	nopw   %cs:0x0(%rax,%rax,1)
9edc:	nopl   0x0(%rax)
9ee0:	lea    0x0(,%rax,8),%rdi
9ee8:	or     $0x8,%rdi
9eec:	movdqu (%rsi,%rdi,1),%xmm2
9ef1:	por    %xmm2,%xmm0
9ef5:	movdqu 0x10(%rsi,%rdi,1),%xmm2
9efb:	por    %xmm2,%xmm1
9eff:	add    $0x4,%rax
9f03:	inc    %rbp
9f06:	jne    9ee0 <gsMontExpBin_BNU+0x300>
9f08:	por    %xmm1,%xmm0
9f0c:	pshufd $0x4e,%xmm0,%xmm1
9f11:	por    %xmm0,%xmm1
9f15:	movq   %xmm1,%rax
9f1a:	cmp    %rcx,%r10
9f1d:	jne    9f26 <gsMontExpBin_BNU+0x346>
9f1f:	mov    0x8(%rsp),%rbp
9f24:	jmp    9f3c <gsMontExpBin_BNU+0x35c>
9f26:	or     $0x1,%rcx
9f2a:	mov    0x8(%rsp),%rbp
9f2f:	nop
9f30:	or     (%rsi,%rcx,8),%rax
9f34:	inc    %rcx
9f37:	cmp    %rcx,%r12
9f3a:	jne    9f30 <gsMontExpBin_BNU+0x350>
9f3c:	mov    %rax,%rcx
9f3f:	xor    %r9,%rcx
9f42:	dec    %rax
9f45:	test   %rcx,%rax
9f48:	js     9fc9 <gsMontExpBin_BNU+0x3e9>
9f4a:	mov    0x50(%rsp),%r13
9f4f:	test   %edx,%edx
9f51:	jle    9fdd <gsMontExpBin_BNU+0x3fd>
9f57:	mov    %r11,0x0(%r13)
9f5b:	cmp    $0x1,%edx
9f5e:	je     9fdf <gsMontExpBin_BNU+0x3ff>
9f60:	mov    %edx,%r11d
9f63:	lea    -0x1(%r11),%r10
9f67:	mov    $0x1,%ebp
9f6c:	cmp    $0x3,%r10
9f70:	jbe    a2b7 <gsMontExpBin_BNU+0x6d7>
9f76:	lea    0x8(%r13),%rax
9f7a:	lea    (%rsi,%r11,8),%rcx
9f7e:	cmp    %rcx,%rax
9f81:	jae    9f95 <gsMontExpBin_BNU+0x3b5>
9f83:	lea    0x0(%r13,%r11,8),%rax
9f88:	lea    0x8(%rsi),%rcx
9f8c:	cmp    %rax,%rcx
9f8f:	jb     a2b7 <gsMontExpBin_BNU+0x6d7>
9f95:	mov    %r10,%rbp
9f98:	and    $0xfffffffffffffffc,%rbp
9f9c:	lea    -0x4(%rbp),%rcx
9fa0:	mov    %rcx,%rax
9fa3:	shr    $0x2,%rax
9fa7:	inc    %rax
9faa:	mov    %eax,%edi
9fac:	and    $0x3,%edi
9faf:	cmp    $0xc,%rcx
9fb3:	jae    a1ff <gsMontExpBin_BNU+0x61f>
9fb9:	xor    %eax,%eax
9fbb:	test   %rdi,%rdi
9fbe:	jne    a27b <gsMontExpBin_BNU+0x69b>
9fc4:	jmpq   a2ae <gsMontExpBin_BNU+0x6ce>
9fc9:	test   %ebp,%ebp
9fcb:	jle    a6d2 <gsMontExpBin_BNU+0xaf2>
9fd1:	cmp    $0x3,%ebp
9fd4:	ja     9ff1 <gsMontExpBin_BNU+0x411>
9fd6:	xor    %eax,%eax
9fd8:	jmpq   a130 <gsMontExpBin_BNU+0x550>
9fdd:	xor    %edx,%edx
9fdf:	mov    0x10(%rsp),%r11
9fe4:	cmp    %ebp,%edx
9fe6:	jl     a332 <gsMontExpBin_BNU+0x752>
9fec:	jmpq   a401 <gsMontExpBin_BNU+0x821>
9ff1:	mov    %ebp,%eax
9ff3:	and    $0xfffffffc,%eax
9ff6:	lea    -0x4(%rax),%rsi
9ffa:	mov    %rsi,%rdx
9ffd:	shr    $0x2,%rdx
a001:	inc    %rdx
a004:	mov    %edx,%ecx
a006:	and    $0x7,%ecx
a009:	cmp    $0x1c,%rsi
a00d:	jae    a051 <gsMontExpBin_BNU+0x471>
a00f:	xor    %edx,%edx
a011:	test   %rcx,%rcx
a014:	jne    a0fa <gsMontExpBin_BNU+0x51a>
a01a:	jmpq   a122 <gsMontExpBin_BNU+0x542>
a01f:	mov    %ebp,%ecx
a021:	and    $0xfffffffc,%ecx
a024:	lea    -0x4(%rcx),%rdi
a028:	mov    %rdi,%rsi
a02b:	shr    $0x2,%rsi
a02f:	inc    %rsi
a032:	mov    %esi,%edx
a034:	and    $0x3,%edx
a037:	cmp    $0xc,%rdi
a03b:	jae    a145 <gsMontExpBin_BNU+0x565>
a041:	xor    %esi,%esi
a043:	test   %rdx,%rdx
a046:	jne    a1b9 <gsMontExpBin_BNU+0x5d9>
a04c:	jmpq   a1f1 <gsMontExpBin_BNU+0x611>
a051:	mov    %rcx,%rsi
a054:	sub    %rdx,%rsi
a057:	xor    %edx,%edx
a059:	pxor   %xmm0,%xmm0
a05d:	nopl   (%rax)
a060:	movdqu %xmm0,(%r15,%rdx,8)
a066:	movdqu %xmm0,0x10(%r15,%rdx,8)
a06d:	movdqu %xmm0,0x20(%r15,%rdx,8)
a074:	movdqu %xmm0,0x30(%r15,%rdx,8)
a07b:	movdqu %xmm0,0x40(%r15,%rdx,8)
a082:	movdqu %xmm0,0x50(%r15,%rdx,8)
a089:	movdqu %xmm0,0x60(%r15,%rdx,8)
a090:	movdqu %xmm0,0x70(%r15,%rdx,8)
a097:	movdqu %xmm0,0x80(%r15,%rdx,8)
a0a1:	movdqu %xmm0,0x90(%r15,%rdx,8)
a0ab:	movdqu %xmm0,0xa0(%r15,%rdx,8)
a0b5:	movdqu %xmm0,0xb0(%r15,%rdx,8)
a0bf:	movdqu %xmm0,0xc0(%r15,%rdx,8)
a0c9:	movdqu %xmm0,0xd0(%r15,%rdx,8)
a0d3:	movdqu %xmm0,0xe0(%r15,%rdx,8)
a0dd:	movdqu %xmm0,0xf0(%r15,%rdx,8)
a0e7:	add    $0x20,%rdx
a0eb:	add    $0x8,%rsi
a0ef:	jne    a060 <gsMontExpBin_BNU+0x480>
a0f5:	test   %rcx,%rcx
a0f8:	je     a122 <gsMontExpBin_BNU+0x542>
a0fa:	lea    0x10(%r15,%rdx,8),%rdx
a0ff:	neg    %rcx
a102:	pxor   %xmm0,%xmm0
a106:	nopw   %cs:0x0(%rax,%rax,1)
a110:	movdqu %xmm0,-0x10(%rdx)
a115:	movdqu %xmm0,(%rdx)
a119:	add    $0x20,%rdx
a11d:	inc    %rcx
a120:	jne    a110 <gsMontExpBin_BNU+0x530>
a122:	cmp    %rbp,%rax
a125:	je     a6d2 <gsMontExpBin_BNU+0xaf2>
a12b:	nopl   0x0(%rax,%rax,1)
a130:	movq   $0x0,(%r15,%rax,8)
a138:	inc    %rax
a13b:	cmp    %rax,%rbp
a13e:	jne    a130 <gsMontExpBin_BNU+0x550>
a140:	jmpq   a6d2 <gsMontExpBin_BNU+0xaf2>
a145:	mov    %rdx,%rdi
a148:	sub    %rsi,%rdi
a14b:	xor    %esi,%esi
a14d:	nopl   (%rax)
a150:	movups (%rax,%rsi,8),%xmm0
a154:	movups 0x10(%rax,%rsi,8),%xmm1
a159:	movups %xmm0,(%r15,%rsi,8)
a15e:	movups %xmm1,0x10(%r15,%rsi,8)
a164:	movups 0x20(%rax,%rsi,8),%xmm0
a169:	movups 0x30(%rax,%rsi,8),%xmm1
a16e:	movups %xmm0,0x20(%r15,%rsi,8)
a174:	movups %xmm1,0x30(%r15,%rsi,8)
a17a:	movups 0x40(%rax,%rsi,8),%xmm0
a17f:	movups 0x50(%rax,%rsi,8),%xmm1
a184:	movups %xmm0,0x40(%r15,%rsi,8)
a18a:	movups %xmm1,0x50(%r15,%rsi,8)
a190:	movdqu 0x60(%rax,%rsi,8),%xmm0
a196:	movdqu 0x70(%rax,%rsi,8),%xmm1
a19c:	movdqu %xmm0,0x60(%r15,%rsi,8)
a1a3:	movdqu %xmm1,0x70(%r15,%rsi,8)
a1aa:	add    $0x10,%rsi
a1ae:	add    $0x4,%rdi
a1b2:	jne    a150 <gsMontExpBin_BNU+0x570>
a1b4:	test   %rdx,%rdx
a1b7:	je     a1f1 <gsMontExpBin_BNU+0x611>
a1b9:	lea    0x10(,%rsi,8),%rsi
a1c1:	neg    %rdx
a1c4:	nopw   %cs:0x0(%rax,%rax,1)
a1ce:	xchg   %ax,%ax
a1d0:	movdqu -0x10(%rax,%rsi,1),%xmm0
a1d6:	movdqu (%rax,%rsi,1),%xmm1
a1db:	movdqu %xmm0,-0x10(%r15,%rsi,1)
a1e2:	movdqu %xmm1,(%r15,%rsi,1)
a1e8:	add    $0x20,%rsi
a1ec:	inc    %rdx
a1ef:	jne    a1d0 <gsMontExpBin_BNU+0x5f0>
a1f1:	cmp    %rbp,%rcx
a1f4:	je     a6d2 <gsMontExpBin_BNU+0xaf2>
a1fa:	jmpq   9dfc <gsMontExpBin_BNU+0x21c>
a1ff:	mov    %rdi,%rcx
a202:	sub    %rax,%rcx
a205:	xor    %eax,%eax
a207:	nopw   0x0(%rax,%rax,1)
a210:	movups 0x8(%rsi,%rax,8),%xmm0
a215:	movups 0x18(%rsi,%rax,8),%xmm1
a21a:	movups %xmm0,0x8(%r13,%rax,8)
a220:	movups %xmm1,0x18(%r13,%rax,8)
a226:	movups 0x28(%rsi,%rax,8),%xmm0
a22b:	movups 0x38(%rsi,%rax,8),%xmm1
a230:	movups %xmm0,0x28(%r13,%rax,8)
a236:	movups %xmm1,0x38(%r13,%rax,8)
a23c:	movups 0x48(%rsi,%rax,8),%xmm0
a241:	movups 0x58(%rsi,%rax,8),%xmm1
a246:	movups %xmm0,0x48(%r13,%rax,8)
a24c:	movups %xmm1,0x58(%r13,%rax,8)
a252:	movdqu 0x68(%rsi,%rax,8),%xmm0
a258:	movdqu 0x78(%rsi,%rax,8),%xmm1
a25e:	movdqu %xmm0,0x68(%r13,%rax,8)
a265:	movdqu %xmm1,0x78(%r13,%rax,8)
a26c:	add    $0x10,%rax
a270:	add    $0x4,%rcx
a274:	jne    a210 <gsMontExpBin_BNU+0x630>
a276:	test   %rdi,%rdi
a279:	je     a2ae <gsMontExpBin_BNU+0x6ce>
a27b:	neg    %rdi
a27e:	xchg   %ax,%ax
a280:	lea    0x0(,%rax,8),%rcx
a288:	or     $0x8,%rcx
a28c:	movdqu (%rsi,%rcx,1),%xmm0
a291:	movdqu 0x10(%rsi,%rcx,1),%xmm1
a297:	movdqu %xmm0,0x0(%r13,%rcx,1)
a29e:	movdqu %xmm1,0x10(%r13,%rcx,1)
a2a5:	add    $0x4,%rax
a2a9:	inc    %rdi
a2ac:	jne    a280 <gsMontExpBin_BNU+0x6a0>
a2ae:	cmp    %rbp,%r10
a2b1:	je     a320 <gsMontExpBin_BNU+0x740>
a2b3:	or     $0x1,%rbp
a2b7:	mov    %r11d,%ecx
a2ba:	sub    %ebp,%ecx
a2bc:	mov    %rbp,%rax
a2bf:	not    %rax
a2c2:	add    %r11,%rax
a2c5:	and    $0x3,%rcx
a2c9:	je     a2e1 <gsMontExpBin_BNU+0x701>
a2cb:	nopl   0x0(%rax,%rax,1)
a2d0:	mov    (%rsi,%rbp,8),%rdi
a2d4:	mov    %rdi,0x0(%r13,%rbp,8)
a2d9:	inc    %rbp
a2dc:	dec    %rcx
a2df:	jne    a2d0 <gsMontExpBin_BNU+0x6f0>
a2e1:	cmp    $0x3,%rax
a2e5:	jb     a320 <gsMontExpBin_BNU+0x740>
a2e7:	nopw   0x0(%rax,%rax,1)
a2f0:	mov    (%rsi,%rbp,8),%rax
a2f4:	mov    %rax,0x0(%r13,%rbp,8)
a2f9:	mov    0x8(%rsi,%rbp,8),%rax
a2fe:	mov    %rax,0x8(%r13,%rbp,8)
a303:	mov    0x10(%rsi,%rbp,8),%rax
a308:	mov    %rax,0x10(%r13,%rbp,8)
a30d:	mov    0x18(%rsi,%rbp,8),%rax
a312:	mov    %rax,0x18(%r13,%rbp,8)
a317:	add    $0x4,%rbp
a31b:	cmp    %rbp,%r11
a31e:	jne    a2f0 <gsMontExpBin_BNU+0x710>
a320:	mov    0x8(%rsp),%rbp
a325:	mov    0x10(%rsp),%r11
a32a:	cmp    %ebp,%edx
a32c:	jge    a401 <gsMontExpBin_BNU+0x821>
a332:	mov    %edx,%ecx
a334:	mov    %rbp,%rax
a337:	sub    %rcx,%rax
a33a:	cmp    $0x3,%rax
a33e:	jbe    a3f0 <gsMontExpBin_BNU+0x810>
a344:	mov    %rax,%r10
a347:	and    $0xfffffffffffffffc,%r10
a34b:	lea    -0x4(%r10),%rdx
a34f:	mov    %rdx,%rdi
a352:	shr    $0x2,%rdi
a356:	inc    %rdi
a359:	mov    %edi,%esi
a35b:	and    $0x3,%esi
a35e:	cmp    $0xc,%rdx
a362:	jae    a36d <gsMontExpBin_BNU+0x78d>
a364:	xor    %ebp,%ebp
a366:	test   %rsi,%rsi
a369:	jne    a3be <gsMontExpBin_BNU+0x7de>
a36b:	jmp    a3e2 <gsMontExpBin_BNU+0x802>
a36d:	sub    %rsi,%rdi
a370:	lea    0x70(%r13,%rcx,8),%rdx
a375:	xor    %ebp,%ebp
a377:	pxor   %xmm0,%xmm0
a37b:	nopl   0x0(%rax,%rax,1)
a380:	movdqu %xmm0,-0x70(%rdx,%rbp,8)
a386:	movdqu %xmm0,-0x60(%rdx,%rbp,8)
a38c:	movdqu %xmm0,-0x50(%rdx,%rbp,8)
a392:	movdqu %xmm0,-0x40(%rdx,%rbp,8)
a398:	movdqu %xmm0,-0x30(%rdx,%rbp,8)
a39e:	movdqu %xmm0,-0x20(%rdx,%rbp,8)
a3a4:	movdqu %xmm0,-0x10(%rdx,%rbp,8)
a3aa:	movdqu %xmm0,(%rdx,%rbp,8)
a3af:	add    $0x10,%rbp
a3b3:	add    $0xfffffffffffffffc,%rdi
a3b7:	jne    a380 <gsMontExpBin_BNU+0x7a0>
a3b9:	test   %rsi,%rsi
a3bc:	je     a3e2 <gsMontExpBin_BNU+0x802>
a3be:	add    %rcx,%rbp
a3c1:	lea    0x10(%r13,%rbp,8),%rdx
a3c6:	neg    %rsi
a3c9:	pxor   %xmm0,%xmm0
a3cd:	nopl   (%rax)
a3d0:	movdqu %xmm0,-0x10(%rdx)
a3d5:	movdqu %xmm0,(%rdx)
a3d9:	add    $0x20,%rdx
a3dd:	inc    %rsi
a3e0:	jne    a3d0 <gsMontExpBin_BNU+0x7f0>
a3e2:	cmp    %r10,%rax
a3e5:	mov    0x8(%rsp),%rbp
a3ea:	je     a401 <gsMontExpBin_BNU+0x821>
a3ec:	add    %r10,%rcx
a3ef:	nop
a3f0:	movq   $0x0,0x0(%r13,%rcx,8)
a3f9:	inc    %rcx
a3fc:	cmp    %rcx,%rbp
a3ff:	jne    a3f0 <gsMontExpBin_BNU+0x810>
a401:	test   %ebp,%ebp
a403:	jle    a57d <gsMontExpBin_BNU+0x99d>
a409:	cmp    $0x3,%ebp
a40c:	jbe    a421 <gsMontExpBin_BNU+0x841>
a40e:	lea    0x0(%r13,%rbp,8),%rax
a413:	cmp    %r15,%rax
a416:	jbe    a495 <gsMontExpBin_BNU+0x8b5>
a418:	lea    (%r15,%rbp,8),%rax
a41c:	cmp    %r13,%rax
a41f:	jbe    a495 <gsMontExpBin_BNU+0x8b5>
a421:	xor    %ecx,%ecx
a423:	mov    %rcx,%rax
a426:	not    %rax
a429:	add    %rbp,%rax
a42c:	mov    %rbp,%rdx
a42f:	and    $0x3,%rdx
a433:	je     a451 <gsMontExpBin_BNU+0x871>
a435:	nopw   %cs:0x0(%rax,%rax,1)
a43f:	nop
a440:	mov    0x0(%r13,%rcx,8),%rsi
a445:	mov    %rsi,(%r15,%rcx,8)
a449:	inc    %rcx
a44c:	dec    %rdx
a44f:	jne    a440 <gsMontExpBin_BNU+0x860>
a451:	cmp    $0x3,%rax
a455:	jb     a57d <gsMontExpBin_BNU+0x99d>
a45b:	nopl   0x0(%rax,%rax,1)
a460:	mov    0x0(%r13,%rcx,8),%rax
a465:	mov    %rax,(%r15,%rcx,8)
a469:	mov    0x8(%r13,%rcx,8),%rax
a46e:	mov    %rax,0x8(%r15,%rcx,8)
a473:	mov    0x10(%r13,%rcx,8),%rax
a478:	mov    %rax,0x10(%r15,%rcx,8)
a47d:	mov    0x18(%r13,%rcx,8),%rax
a482:	mov    %rax,0x18(%r15,%rcx,8)
a487:	add    $0x4,%rcx
a48b:	cmp    %rcx,%rbp
a48e:	jne    a460 <gsMontExpBin_BNU+0x880>
a490:	jmpq   a57d <gsMontExpBin_BNU+0x99d>
a495:	mov    %ebp,%ecx
a497:	and    $0xfffffffc,%ecx
a49a:	lea    -0x4(%rcx),%rsi
a49e:	mov    %rsi,%rdx
a4a1:	shr    $0x2,%rdx
a4a5:	inc    %rdx
a4a8:	mov    %edx,%eax
a4aa:	and    $0x3,%eax
a4ad:	cmp    $0xc,%rsi
a4b1:	jae    a4c3 <gsMontExpBin_BNU+0x8e3>
a4b3:	xor    %edx,%edx
a4b5:	test   %rax,%rax
a4b8:	jne    a542 <gsMontExpBin_BNU+0x962>
a4be:	jmpq   a574 <gsMontExpBin_BNU+0x994>
a4c3:	mov    %rax,%rsi
a4c6:	sub    %rdx,%rsi
a4c9:	xor    %edx,%edx
a4cb:	nopl   0x0(%rax,%rax,1)
a4d0:	movups 0x0(%r13,%rdx,8),%xmm0
a4d6:	movups 0x10(%r13,%rdx,8),%xmm1
a4dc:	movups %xmm0,(%r15,%rdx,8)
a4e1:	movups %xmm1,0x10(%r15,%rdx,8)
a4e7:	movups 0x20(%r13,%rdx,8),%xmm0
a4ed:	movups 0x30(%r13,%rdx,8),%xmm1
a4f3:	movups %xmm0,0x20(%r15,%rdx,8)
a4f9:	movups %xmm1,0x30(%r15,%rdx,8)
a4ff:	movups 0x40(%r13,%rdx,8),%xmm0
a505:	movups 0x50(%r13,%rdx,8),%xmm1
a50b:	movups %xmm0,0x40(%r15,%rdx,8)
a511:	movups %xmm1,0x50(%r15,%rdx,8)
a517:	movdqu 0x60(%r13,%rdx,8),%xmm0
a51e:	movdqu 0x70(%r13,%rdx,8),%xmm1
a525:	movdqu %xmm0,0x60(%r15,%rdx,8)
a52c:	movdqu %xmm1,0x70(%r15,%rdx,8)
a533:	add    $0x10,%rdx
a537:	add    $0x4,%rsi
a53b:	jne    a4d0 <gsMontExpBin_BNU+0x8f0>
a53d:	test   %rax,%rax
a540:	je     a574 <gsMontExpBin_BNU+0x994>
a542:	lea    0x10(,%rdx,8),%rdx
a54a:	neg    %rax
a54d:	nopl   (%rax)
a550:	movdqu -0x10(%r13,%rdx,1),%xmm0
a557:	movdqu 0x0(%r13,%rdx,1),%xmm1
a55e:	movdqu %xmm0,-0x10(%r15,%rdx,1)
a565:	movdqu %xmm1,(%r15,%rdx,1)
a56b:	add    $0x20,%rdx
a56f:	inc    %rax
a572:	jne    a550 <gsMontExpBin_BNU+0x970>
a574:	cmp    %rbp,%rcx
a577:	jne    a423 <gsMontExpBin_BNU+0x843>
a57d:	test   %r8d,%r8d
a580:	jle    a5b8 <gsMontExpBin_BNU+0x9d8>
a582:	movslq %r14d,%rax
a585:	mov    $0xffffffffffffffff,%r12
a58c:	nopl   0x0(%rax)
a590:	mov    -0x8(%r11,%rax,8),%rcx
a595:	mov    %rcx,%rdx
a598:	xor    %r9,%rdx
a59b:	dec    %rcx
a59e:	and    %rdx,%rcx
a5a1:	sar    $0x3f,%rcx
a5a5:	and    %rcx,%r12
a5a8:	mov    %r12d,%ecx
a5ab:	and    $0x1,%ecx
a5ae:	sub    %ecx,%r14d
a5b1:	dec    %rax
a5b4:	jg     a590 <gsMontExpBin_BNU+0x9b0>
a5b6:	jmp    a5bf <gsMontExpBin_BNU+0x9df>
a5b8:	mov    $0xffffffffffffffff,%r12
a5bf:	mov    %r12d,%eax
a5c2:	and    $0x1,%eax
a5c5:	not    %r12d
a5c8:	and    %r14d,%r12d
a5cb:	or     %rax,%r12
a5ce:	mov    %r12,%rax
a5d1:	shl    $0x20,%rax
a5d5:	movabs $0xffffffff00000000,%rcx
a5df:	add    %rax,%rcx
a5e2:	sar    $0x1d,%rcx
a5e6:	mov    (%r11,%rcx,1),%rbp
a5ea:	mov    %rbp,%rdi
a5ed:	callq  97c0 <cpNLZ_BNU>
a5f2:	mov    %eax,%r14d
a5f5:	lea    0x1(%r14),%ecx
a5f9:	cmp    $0x3f,%ecx
a5fc:	jg     a642 <gsMontExpBin_BNU+0xa62>
a5fe:	shl    %cl,%rbp
a601:	add    $0xffffffc1,%r14d
a605:	jmp    a618 <gsMontExpBin_BNU+0xa38>
a607:	nopw   0x0(%rax,%rax,1)
a610:	add    %rbp,%rbp
a613:	inc    %r14d
a616:	je     a642 <gsMontExpBin_BNU+0xa62>
a618:	mov    0x20(%rbx),%rax
a61c:	mov    %r15,%rdi
a61f:	mov    %r15,%rsi
a622:	mov    %rbx,%rdx
a625:	callq  *0x18(%rax)
a628:	test   %rbp,%rbp
a62b:	jns    a610 <gsMontExpBin_BNU+0xa30>
a62d:	mov    0x20(%rbx),%rax
a631:	mov    %r15,%rdi
a634:	mov    %r15,%rsi
a637:	mov    %r13,%rdx
a63a:	mov    %rbx,%rcx
a63d:	callq  *0x10(%rax)
a640:	jmp    a610 <gsMontExpBin_BNU+0xa30>
a642:	lea    -0x1(%r12),%eax
a647:	test   %eax,%eax
a649:	mov    0x8(%rsp),%rbp
a64e:	jle    a6d2 <gsMontExpBin_BNU+0xaf2>
a654:	cltq   
a656:	jmp    a66d <gsMontExpBin_BNU+0xa8d>
a658:	nopl   0x0(%rax,%rax,1)
a660:	mov    %r12,%rax
a663:	dec    %rax
a666:	mov    0x8(%rsp),%rbp
a66b:	jle    a6d2 <gsMontExpBin_BNU+0xaf2>
a66d:	shl    $0x20,%r12
a671:	movabs $0xfffffffe00000000,%rcx
a67b:	add    %rcx,%r12
a67e:	sar    $0x1d,%r12
a682:	mov    0x10(%rsp),%rcx
a687:	mov    (%rcx,%r12,1),%rbp
a68b:	mov    %rax,%r12
a68e:	mov    $0x40,%r14d
a694:	jmp    a6a8 <gsMontExpBin_BNU+0xac8>
a696:	nopw   %cs:0x0(%rax,%rax,1)
a6a0:	add    %rbp,%rbp
a6a3:	dec    %r14d
a6a6:	je     a660 <gsMontExpBin_BNU+0xa80>
a6a8:	mov    0x20(%rbx),%rax
a6ac:	mov    %r15,%rdi
a6af:	mov    %r15,%rsi
a6b2:	mov    %rbx,%rdx
a6b5:	callq  *0x18(%rax)
a6b8:	test   %rbp,%rbp
a6bb:	jns    a6a0 <gsMontExpBin_BNU+0xac0>
a6bd:	mov    0x20(%rbx),%rax
a6c1:	mov    %r15,%rdi
a6c4:	mov    %r15,%rsi
a6c7:	mov    %r13,%rdx
a6ca:	mov    %rbx,%rcx
a6cd:	callq  *0x10(%rax)
a6d0:	jmp    a6a0 <gsMontExpBin_BNU+0xac0>
a6d2:	mov    %ebp,%eax
a6d4:	add    $0x18,%rsp
a6d8:	pop    %rbx
a6d9:	pop    %r12
a6db:	pop    %r13
a6dd:	pop    %r14
a6df:	pop    %r15
a6e1:	pop    %rbp
a6e2:	retq   
a6e3:	nopw   %cs:0x0(%rax,%rax,1)
a6ed:	nopw   %cs:0x0(%rax,%rax,1)
a6f7:	nopw   0x0(%rax,%rax,1)
a700:	endbr64 
a704:	push   %rbp
a705:	push   %r15
a707:	push   %r14
a709:	push   %r13
a70b:	push   %r12
a70d:	push   %rbx
a70e:	push   %rax
a70f:	mov    %r9,%r14
a712:	mov    %r8d,%ebp
a715:	mov    %rcx,%r13
a718:	mov    %rdi,%rbx
a71b:	mov    0x10(%r9),%r15d
a71f:	test   %edx,%edx
a721:	jle    a7c1 <gsModExpBin_BNU+0xc1>
a727:	mov    %edx,%r8d
a72a:	cmp    $0x3,%edx
a72d:	jbe    a749 <gsModExpBin_BNU+0x49>
a72f:	lea    (%rsi,%r8,8),%rax
a733:	cmp    %rbx,%rax
a736:	jbe    a816 <gsModExpBin_BNU+0x116>
a73c:	lea    (%rbx,%r8,8),%rax
a740:	cmp    %rsi,%rax
a743:	jbe    a816 <gsModExpBin_BNU+0x116>
a749:	xor    %ecx,%ecx
a74b:	mov    %rcx,%rax
a74e:	not    %rax
a751:	add    %r8,%rax
a754:	mov    %r8,%rdi
a757:	mov    %ebp,%r9d
a75a:	and    $0x3,%rdi
a75e:	je     a770 <gsModExpBin_BNU+0x70>
a760:	mov    (%rsi,%rcx,8),%rbp
a764:	mov    %rbp,(%rbx,%rcx,8)
a768:	inc    %rcx
a76b:	dec    %rdi
a76e:	jne    a760 <gsModExpBin_BNU+0x60>
a770:	cmp    $0x3,%rax
a774:	jb     a7af <gsModExpBin_BNU+0xaf>
a776:	nopw   %cs:0x0(%rax,%rax,1)
a780:	mov    (%rsi,%rcx,8),%rax
a784:	mov    %rax,(%rbx,%rcx,8)
a788:	mov    0x8(%rsi,%rcx,8),%rax
a78d:	mov    %rax,0x8(%rbx,%rcx,8)
a792:	mov    0x10(%rsi,%rcx,8),%rax
a797:	mov    %rax,0x10(%rbx,%rcx,8)
a79c:	mov    0x18(%rsi,%rcx,8),%rax
a7a1:	mov    %rax,0x18(%rbx,%rcx,8)
a7a6:	add    $0x4,%rcx
a7aa:	cmp    %rcx,%r8
a7ad:	jne    a780 <gsModExpBin_BNU+0x80>
a7af:	mov    %r9d,%ebp
a7b2:	mov    0x40(%rsp),%r12
a7b7:	cmp    %r15d,%edx
a7ba:	jl     a7d1 <gsModExpBin_BNU+0xd1>
a7bc:	jmpq   a8e0 <gsModExpBin_BNU+0x1e0>
a7c1:	xor    %edx,%edx
a7c3:	mov    0x40(%rsp),%r12
a7c8:	cmp    %r15d,%edx
a7cb:	jge    a8e0 <gsModExpBin_BNU+0x1e0>
a7d1:	mov    %edx,%eax
a7d3:	mov    %r15,%rcx
a7d6:	sub    %rax,%rcx
a7d9:	cmp    $0x3,%rcx
a7dd:	jbe    a8d0 <gsModExpBin_BNU+0x1d0>
a7e3:	mov    %rcx,%r8
a7e6:	and    $0xfffffffffffffffc,%r8
a7ea:	lea    -0x4(%r8),%rdx
a7ee:	mov    %rdx,%rdi
a7f1:	shr    $0x2,%rdi
a7f5:	inc    %rdi
a7f8:	mov    %edi,%esi
a7fa:	and    $0x3,%esi
a7fd:	mov    %ebp,%r9d
a800:	cmp    $0xc,%rdx
a804:	jae    a84c <gsModExpBin_BNU+0x14c>
a806:	xor    %ebp,%ebp
a808:	test   %rsi,%rsi
a80b:	jne    a896 <gsModExpBin_BNU+0x196>
a811:	jmpq   a8c0 <gsModExpBin_BNU+0x1c0>
a816:	mov    %ebp,%r9d
a819:	mov    %r8d,%ecx
a81c:	and    $0xfffffffc,%ecx
a81f:	lea    -0x4(%rcx),%rdi
a823:	mov    %rdi,%rbp
a826:	shr    $0x2,%rbp
a82a:	inc    %rbp
a82d:	mov    %ebp,%eax
a82f:	and    $0x3,%eax
a832:	cmp    $0xc,%rdi
a836:	jae    a92c <gsModExpBin_BNU+0x22c>
a83c:	xor    %ebp,%ebp
a83e:	test   %rax,%rax
a841:	jne    a99d <gsModExpBin_BNU+0x29d>
a847:	jmpq   a9cb <gsModExpBin_BNU+0x2cb>
a84c:	sub    %rsi,%rdi
a84f:	lea    0x70(%rbx,%rax,8),%rdx
a854:	xor    %ebp,%ebp
a856:	xorps  %xmm0,%xmm0
a859:	nopl   0x0(%rax)
a860:	movups %xmm0,-0x70(%rdx,%rbp,8)
a865:	movups %xmm0,-0x60(%rdx,%rbp,8)
a86a:	movups %xmm0,-0x50(%rdx,%rbp,8)
a86f:	movups %xmm0,-0x40(%rdx,%rbp,8)
a874:	movups %xmm0,-0x30(%rdx,%rbp,8)
a879:	movups %xmm0,-0x20(%rdx,%rbp,8)
a87e:	movups %xmm0,-0x10(%rdx,%rbp,8)
a883:	movups %xmm0,(%rdx,%rbp,8)
a887:	add    $0x10,%rbp
a88b:	add    $0xfffffffffffffffc,%rdi
a88f:	jne    a860 <gsModExpBin_BNU+0x160>
a891:	test   %rsi,%rsi
a894:	je     a8c0 <gsModExpBin_BNU+0x1c0>
a896:	add    %rax,%rbp
a899:	lea    0x10(%rbx,%rbp,8),%rdx
a89e:	neg    %rsi
a8a1:	xorps  %xmm0,%xmm0
a8a4:	nopw   %cs:0x0(%rax,%rax,1)
a8ae:	xchg   %ax,%ax
a8b0:	movups %xmm0,-0x10(%rdx)
a8b4:	movups %xmm0,(%rdx)
a8b7:	add    $0x20,%rdx
a8bb:	inc    %rsi
a8be:	jne    a8b0 <gsModExpBin_BNU+0x1b0>
a8c0:	cmp    %r8,%rcx
a8c3:	mov    %r9d,%ebp
a8c6:	je     a8e0 <gsModExpBin_BNU+0x1e0>
a8c8:	add    %r8,%rax
a8cb:	nopl   0x0(%rax,%rax,1)
a8d0:	movq   $0x0,(%rbx,%rax,8)
a8d8:	inc    %rax
a8db:	cmp    %rax,%r15
a8de:	jne    a8d0 <gsModExpBin_BNU+0x1d0>
a8e0:	mov    0x20(%r14),%rax
a8e4:	mov    %rbx,%rdi
a8e7:	mov    %rbx,%rsi
a8ea:	mov    %r14,%rdx
a8ed:	callq  *(%rax)
a8ef:	mov    %r12,(%rsp)
a8f3:	mov    %rbx,%rdi
a8f6:	mov    %rbx,%rsi
a8f9:	mov    %r15d,%edx
a8fc:	mov    %r13,%rcx
a8ff:	mov    %ebp,%r8d
a902:	mov    %r14,%r9
a905:	callq  9be0 <gsMontExpBin_BNU>
a90a:	mov    0x20(%r14),%rax
a90e:	mov    %rbx,%rdi
a911:	mov    %rbx,%rsi
a914:	mov    %r14,%rdx
a917:	callq  *0x8(%rax)
a91a:	mov    %r15d,%eax
a91d:	add    $0x8,%rsp
a921:	pop    %rbx
a922:	pop    %r12
a924:	pop    %r13
a926:	pop    %r14
a928:	pop    %r15
a92a:	pop    %rbp
a92b:	retq   
a92c:	mov    %rax,%rdi
a92f:	sub    %rbp,%rdi
a932:	xor    %ebp,%ebp
a934:	nopw   %cs:0x0(%rax,%rax,1)
a93e:	xchg   %ax,%ax
a940:	movups (%rsi,%rbp,8),%xmm0
a944:	movups 0x10(%rsi,%rbp,8),%xmm1
a949:	movups %xmm0,(%rbx,%rbp,8)
a94d:	movups %xmm1,0x10(%rbx,%rbp,8)
a952:	movups 0x20(%rsi,%rbp,8),%xmm0
a957:	movups 0x30(%rsi,%rbp,8),%xmm1
a95c:	movups %xmm0,0x20(%rbx,%rbp,8)
a961:	movups %xmm1,0x30(%rbx,%rbp,8)
a966:	movups 0x40(%rsi,%rbp,8),%xmm0
a96b:	movups 0x50(%rsi,%rbp,8),%xmm1
a970:	movups %xmm0,0x40(%rbx,%rbp,8)
a975:	movups %xmm1,0x50(%rbx,%rbp,8)
a97a:	movups 0x60(%rsi,%rbp,8),%xmm0
a97f:	movups 0x70(%rsi,%rbp,8),%xmm1
a984:	movups %xmm0,0x60(%rbx,%rbp,8)
a989:	movups %xmm1,0x70(%rbx,%rbp,8)
a98e:	add    $0x10,%rbp
a992:	add    $0x4,%rdi
a996:	jne    a940 <gsModExpBin_BNU+0x240>
a998:	test   %rax,%rax
a99b:	je     a9cb <gsModExpBin_BNU+0x2cb>
a99d:	lea    0x10(,%rbp,8),%rdi
a9a5:	neg    %rax
a9a8:	nopl   0x0(%rax,%rax,1)
a9b0:	movups -0x10(%rsi,%rdi,1),%xmm0
a9b5:	movups (%rsi,%rdi,1),%xmm1
a9b9:	movups %xmm0,-0x10(%rbx,%rdi,1)
a9be:	movups %xmm1,(%rbx,%rdi,1)
a9c2:	add    $0x20,%rdi
a9c6:	inc    %rax
a9c9:	jne    a9b0 <gsModExpBin_BNU+0x2b0>
a9cb:	cmp    %r8,%rcx
a9ce:	mov    %r9d,%ebp
a9d1:	jne    a74b <gsModExpBin_BNU+0x4b>
a9d7:	jmpq   a7c3 <gsModExpBin_BNU+0xc3>
a9dc:	nopl   0x0(%rax)
a9e0:	endbr64 
a9e4:	push   %rbp
a9e5:	push   %r15
a9e7:	push   %r14
a9e9:	push   %r13
a9eb:	push   %r12
a9ed:	push   %rbx
a9ee:	push   %rax
a9ef:	mov    %rcx,%r15
a9f2:	mov    %rdx,%r12
a9f5:	mov    %rsi,%r13
a9f8:	mov    %rdi,%rbp
a9fb:	mov    0xc(%rdx),%ebx
a9fe:	callq  3ec0 <gsMethod_RSA_gpr_public>
aa03:	cmp    %ebx,(%rax)
aa05:	jg     aa0f <gsRSApub_cipher+0x2f>
aa07:	mov    %rax,%r10
aa0a:	cmp    %ebx,0x4(%rax)
aa0d:	jge    aa17 <gsRSApub_cipher+0x37>
aa0f:	callq  3ec0 <gsMethod_RSA_gpr_public>
aa14:	mov    %rax,%r10
aa17:	mov    0x10(%rbp),%r14
aa1b:	mov    0x10(%r13),%rsi
aa1f:	mov    0x8(%r13),%edx
aa23:	mov    0x18(%r12),%rcx
aa28:	mov    0x10(%r12),%r8d
aa2d:	mov    0x20(%r12),%r9
aa32:	mov    %r15,(%rsp)
aa36:	mov    %r14,%rdi
aa39:	callq  *0x10(%r10)
aa3d:	test   %eax,%eax
aa3f:	jle    aa71 <gsRSApub_cipher+0x91>
aa41:	mov    %rbp,%r9
aa44:	movabs $0x8000000000000000,%rdx
aa4e:	movslq %eax,%rsi
aa51:	mov    %eax,%r8d
aa54:	and    $0x1,%r8d
aa58:	cmp    $0x1,%eax
aa5b:	jne    aa7d <gsRSApub_cipher+0x9d>
aa5d:	mov    $0xffffffffffffffff,%rcx
aa64:	test   %r8,%r8
aa67:	mov    %r9,%rbp
aa6a:	jne    aae2 <gsRSApub_cipher+0x102>
aa6c:	jmpq   aafe <gsRSApub_cipher+0x11e>
aa71:	mov    $0xffffffffffffffff,%rcx
aa78:	jmpq   aafe <gsRSApub_cipher+0x11e>
aa7d:	mov    $0xffffffffffffffff,%rdi
aa84:	nopw   %cs:0x0(%rax,%rax,1)
aa8e:	xchg   %ax,%ax
aa90:	mov    -0x10(%r14,%rsi,8),%rcx
aa95:	mov    -0x8(%r14,%rsi,8),%rbx
aa9a:	mov    %rbx,%rbp
aa9d:	xor    %rdx,%rbp
aaa0:	dec    %rbx
aaa3:	and    %rbp,%rbx
aaa6:	sar    $0x3f,%rbx
aaaa:	and    %rdi,%rbx
aaad:	mov    %rcx,%rdi
aab0:	xor    %rdx,%rdi
aab3:	dec    %rcx
aab6:	and    %rdi,%rcx
aab9:	sar    $0x3f,%rcx
aabd:	and    %rbx,%rcx
aac0:	mov    %ebx,%edi
aac2:	and    $0x1,%edi
aac5:	sub    %edi,%eax
aac7:	add    $0xfffffffffffffffe,%rsi
aacb:	mov    %ecx,%edi
aacd:	and    $0x1,%edi
aad0:	sub    %edi,%eax
aad2:	mov    %rcx,%rdi
aad5:	cmp    %rsi,%r8
aad8:	jne    aa90 <gsRSApub_cipher+0xb0>
aada:	test   %r8,%r8
aadd:	mov    %r9,%rbp
aae0:	je     aafe <gsRSApub_cipher+0x11e>
aae2:	mov    -0x8(%r14,%rsi,8),%rsi
aae7:	xor    %rsi,%rdx
aaea:	dec    %rsi
aaed:	and    %rdx,%rsi
aaf0:	sar    $0x3f,%rsi
aaf4:	and    %rsi,%rcx
aaf7:	mov    %ecx,%edx
aaf9:	and    $0x1,%edx
aafc:	sub    %edx,%eax
aafe:	mov    %ecx,%edx
ab00:	and    $0x1,%edx
ab03:	not    %ecx
ab05:	and    %eax,%ecx
ab07:	or     %edx,%ecx
ab09:	mov    %ecx,0x8(%rbp)
ab0c:	movl   $0x1,0x4(%rbp)
ab13:	add    $0x8,%rsp
ab17:	pop    %rbx
ab18:	pop    %r12
ab1a:	pop    %r13
ab1c:	pop    %r14
ab1e:	pop    %r15
ab20:	pop    %rbp
ab21:	retq   
ab22:	nopw   %cs:0x0(%rax,%rax,1)
ab2c:	nopl   0x0(%rax)
ab30:	endbr64 
ab34:	movslq %ecx,%rcx
ab37:	xor    %rax,%rax
ab3a:	cmp    $0x2,%rcx
ab3e:	jge    ab54 <cpAdd_BNU.ADD_GE2>
ab40:	add    %rax,%rax
ab43:	mov    (%rsi),%r8
ab46:	adc    (%rdx),%r8
ab49:	mov    %r8,(%rdi)
ab4c:	sbb    %rax,%rax
ab4f:	jmpq   ae03 <cpAdd_BNU.FINAL>
ab54:	jg     ab76 <cpAdd_BNU.ADD_GT2>
ab56:	add    %rax,%rax
ab59:	mov    (%rsi),%r8
ab5c:	adc    (%rdx),%r8
ab5f:	mov    0x8(%rsi),%r9
ab63:	adc    0x8(%rdx),%r9
ab67:	mov    %r8,(%rdi)
ab6a:	mov    %r9,0x8(%rdi)
ab6e:	sbb    %rax,%rax
ab71:	jmpq   ae03 <cpAdd_BNU.FINAL>
ab76:	cmp    $0x4,%rcx
ab7a:	jge    aba8 <cpAdd_BNU.ADD_GE4>
ab7c:	add    %rax,%rax
ab7f:	mov    (%rsi),%r8
ab82:	adc    (%rdx),%r8
ab85:	mov    0x8(%rsi),%r9
ab89:	adc    0x8(%rdx),%r9
ab8d:	mov    0x10(%rsi),%r10
ab91:	adc    0x10(%rdx),%r10
ab95:	mov    %r8,(%rdi)
ab98:	mov    %r9,0x8(%rdi)
ab9c:	mov    %r10,0x10(%rdi)
aba0:	sbb    %rax,%rax
aba3:	jmpq   ae03 <cpAdd_BNU.FINAL>
aba8:	jg     abe2 <cpAdd_BNU.ADD_GT4>
abaa:	add    %rax,%rax
abad:	mov    (%rsi),%r8
abb0:	adc    (%rdx),%r8
abb3:	mov    0x8(%rsi),%r9
abb7:	adc    0x8(%rdx),%r9
abbb:	mov    0x10(%rsi),%r10
abbf:	adc    0x10(%rdx),%r10
abc3:	mov    0x18(%rsi),%r11
abc7:	adc    0x18(%rdx),%r11
abcb:	mov    %r8,(%rdi)
abce:	mov    %r9,0x8(%rdi)
abd2:	mov    %r10,0x10(%rdi)
abd6:	mov    %r11,0x18(%rdi)
abda:	sbb    %rax,%rax
abdd:	jmpq   ae03 <cpAdd_BNU.FINAL>
abe2:	cmp    $0x6,%rcx
abe6:	jge    ac2c <cpAdd_BNU.ADD_GE6>
abe8:	add    %rax,%rax
abeb:	mov    (%rsi),%r8
abee:	adc    (%rdx),%r8
abf1:	mov    0x8(%rsi),%r9
abf5:	adc    0x8(%rdx),%r9
abf9:	mov    0x10(%rsi),%r10
abfd:	adc    0x10(%rdx),%r10
ac01:	mov    0x18(%rsi),%r11
ac05:	adc    0x18(%rdx),%r11
ac09:	mov    0x20(%rsi),%rcx
ac0d:	adc    0x20(%rdx),%rcx
ac11:	mov    %r8,(%rdi)
ac14:	mov    %r9,0x8(%rdi)
ac18:	mov    %r10,0x10(%rdi)
ac1c:	mov    %r11,0x18(%rdi)
ac20:	mov    %rcx,0x20(%rdi)
ac24:	sbb    %rax,%rax
ac27:	jmpq   ae03 <cpAdd_BNU.FINAL>
ac2c:	jg     ac7e <cpAdd_BNU.ADD_GT6>
ac2e:	add    %rax,%rax
ac31:	mov    (%rsi),%r8
ac34:	adc    (%rdx),%r8
ac37:	mov    0x8(%rsi),%r9
ac3b:	adc    0x8(%rdx),%r9
ac3f:	mov    0x10(%rsi),%r10
ac43:	adc    0x10(%rdx),%r10
ac47:	mov    0x18(%rsi),%r11
ac4b:	adc    0x18(%rdx),%r11
ac4f:	mov    0x20(%rsi),%rcx
ac53:	adc    0x20(%rdx),%rcx
ac57:	mov    0x28(%rsi),%rsi
ac5b:	adc    0x28(%rdx),%rsi
ac5f:	mov    %r8,(%rdi)
ac62:	mov    %r9,0x8(%rdi)
ac66:	mov    %r10,0x10(%rdi)
ac6a:	mov    %r11,0x18(%rdi)
ac6e:	mov    %rcx,0x20(%rdi)
ac72:	mov    %rsi,0x28(%rdi)
ac76:	sbb    %rax,%rax
ac79:	jmpq   ae03 <cpAdd_BNU.FINAL>
ac7e:	cmp    $0x8,%rcx
ac82:	jge    ace0 <cpAdd_BNU.ADD_GE8>
ac84:	add    %rax,%rax
ac87:	mov    (%rsi),%r8
ac8a:	adc    (%rdx),%r8
ac8d:	mov    0x8(%rsi),%r9
ac91:	adc    0x8(%rdx),%r9
ac95:	mov    0x10(%rsi),%r10
ac99:	adc    0x10(%rdx),%r10
ac9d:	mov    0x18(%rsi),%r11
aca1:	adc    0x18(%rdx),%r11
aca5:	mov    0x20(%rsi),%rcx
aca9:	adc    0x20(%rdx),%rcx
acad:	mov    %r8,(%rdi)
acb0:	mov    0x28(%rsi),%r8
acb4:	adc    0x28(%rdx),%r8
acb8:	mov    0x30(%rsi),%rsi
acbc:	adc    0x30(%rdx),%rsi
acc0:	mov    %r9,0x8(%rdi)
acc4:	mov    %r10,0x10(%rdi)
acc8:	mov    %r11,0x18(%rdi)
accc:	mov    %rcx,0x20(%rdi)
acd0:	mov    %r8,0x28(%rdi)
acd4:	mov    %rsi,0x30(%rdi)
acd8:	sbb    %rax,%rax
acdb:	jmpq   ae03 <cpAdd_BNU.FINAL>
ace0:	jg     ad4a <cpAdd_BNU.ADD_GT8>
ace2:	add    %rax,%rax
ace5:	mov    (%rsi),%r8
ace8:	adc    (%rdx),%r8
aceb:	mov    0x8(%rsi),%r9
acef:	adc    0x8(%rdx),%r9
acf3:	mov    0x10(%rsi),%r10
acf7:	adc    0x10(%rdx),%r10
acfb:	mov    0x18(%rsi),%r11
acff:	adc    0x18(%rdx),%r11
ad03:	mov    0x20(%rsi),%rcx
ad07:	adc    0x20(%rdx),%rcx
ad0b:	mov    %r8,(%rdi)
ad0e:	mov    0x28(%rsi),%r8
ad12:	adc    0x28(%rdx),%r8
ad16:	mov    %r9,0x8(%rdi)
ad1a:	mov    0x30(%rsi),%r9
ad1e:	adc    0x30(%rdx),%r9
ad22:	mov    0x38(%rsi),%rsi
ad26:	adc    0x38(%rdx),%rsi
ad2a:	mov    %r10,0x10(%rdi)
ad2e:	mov    %r11,0x18(%rdi)
ad32:	mov    %rcx,0x20(%rdi)
ad36:	mov    %r8,0x28(%rdi)
ad3a:	mov    %r9,0x30(%rdi)
ad3e:	mov    %rsi,0x38(%rdi)
ad42:	sbb    %rax,%rax
ad45:	jmpq   ae03 <cpAdd_BNU.FINAL>
ad4a:	mov    %rax,%r8
ad4d:	mov    %rcx,%rax
ad50:	and    $0x3,%rcx
ad54:	xor    %rax,%rcx
ad57:	lea    (%rsi,%rcx,8),%rsi
ad5b:	lea    (%rdx,%rcx,8),%rdx
ad5f:	lea    (%rdi,%rcx,8),%rdi
ad63:	neg    %rcx
ad66:	add    %r8,%r8
ad69:	jmp    ad70 <cpAdd_BNU.ADD_GLOOP>
ad6b:	nopl   0x0(%rax,%rax,1)
ad70:	mov    (%rsi,%rcx,8),%r8
ad74:	mov    0x8(%rsi,%rcx,8),%r9
ad79:	mov    0x10(%rsi,%rcx,8),%r10
ad7e:	mov    0x18(%rsi,%rcx,8),%r11
ad83:	adc    (%rdx,%rcx,8),%r8
ad87:	adc    0x8(%rdx,%rcx,8),%r9
ad8c:	adc    0x10(%rdx,%rcx,8),%r10
ad91:	adc    0x18(%rdx,%rcx,8),%r11
ad96:	mov    %r8,(%rdi,%rcx,8)
ad9a:	mov    %r9,0x8(%rdi,%rcx,8)
ad9f:	mov    %r10,0x10(%rdi,%rcx,8)
ada4:	mov    %r11,0x18(%rdi,%rcx,8)
ada9:	lea    0x4(%rcx),%rcx
adad:	jrcxz  adb1 <cpAdd_BNU.ADD_LLAST0>
adaf:	jmp    ad70 <cpAdd_BNU.ADD_GLOOP>
adb1:	sbb    %rcx,%rcx
adb4:	and    $0x3,%rax
adb8:	je     ae00 <cpAdd_BNU.FIN0>
adba:	test   $0x2,%rax
adc0:	je     adf1 <cpAdd_BNU.ADD_LLAST1>
adc2:	add    %rcx,%rcx
adc5:	mov    (%rsi),%r8
adc8:	mov    0x8(%rsi),%r9
adcc:	adc    (%rdx),%r8
adcf:	adc    0x8(%rdx),%r9
add3:	mov    %r8,(%rdi)
add6:	mov    %r9,0x8(%rdi)
adda:	sbb    %rcx,%rcx
addd:	test   $0x1,%rax
ade3:	je     ae00 <cpAdd_BNU.FIN0>
ade5:	add    $0x10,%rsi
ade9:	add    $0x10,%rdx
aded:	add    $0x10,%rdi
adf1:	add    %rcx,%rcx
adf4:	mov    (%rsi),%r8
adf7:	adc    (%rdx),%r8
adfa:	mov    %r8,(%rdi)
adfd:	sbb    %rcx,%rcx
ae00:	mov    %rcx,%rax
ae03:	neg    %rax
ae06:	retq   
ae07:	nopw   0x0(%rax,%rax,1)
ae10:	endbr64 
ae14:	push   %rbx
ae15:	push   %rbp
ae16:	push   %r12
ae18:	push   %r13
ae1a:	push   %r14
ae1c:	push   %r15
ae1e:	sub    $0x28,%rsp
ae22:	movslq %ecx,%rcx
ae25:	movslq %r9d,%r9
ae28:	mov    -0x4(%rdx,%rcx,4),%eax
ae2c:	test   %eax,%eax
ae2e:	jne    ae3a <..@47.fix_bnu_quit>
ae30:	sub    $0x1,%rcx
ae34:	jg     ae28 <..@47.fix_bnu_loop>
ae36:	add    $0x1,%rcx
ae3a:	mov    -0x4(%r8,%r9,4),%eax
ae3f:	test   %eax,%eax
ae41:	jne    ae4d <..@48.fix_bnu_quit>
ae43:	sub    $0x1,%r9
ae47:	jg     ae3a <..@47.fix_bnu_quit>
ae49:	add    $0x1,%r9
ae4d:	mov    %rdx,%r10
ae50:	mov    %rcx,%r11
ae53:	cmp    %r9,%rcx
ae56:	jae    ae7b <cpDiv_BNU32.spec_case2>
ae58:	test   %rdi,%rdi
ae5b:	je     ae69 <cpDiv_BNU32.spec_case1_quit>
ae5d:	movl   $0x0,(%rdi)
ae63:	movl   $0x1,(%rsi)
ae69:	mov    %rcx,%rax
ae6c:	add    $0x28,%rsp
ae70:	pop    %r15
ae72:	pop    %r14
ae74:	pop    %r13
ae76:	pop    %r12
ae78:	pop    %rbp
ae79:	pop    %rbx
ae7a:	retq   
ae7b:	cmp    $0x1,%r9
ae7f:	jne    aecf <cpDiv_BNU32.common_case>
ae81:	mov    (%r8),%ebx
ae84:	xor    %edx,%edx
ae86:	mov    -0x4(%r10,%r11,4),%eax
ae8b:	div    %ebx
ae8d:	test   %rdi,%rdi
ae90:	je     ae97 <cpDiv_BNU32.spec_case2_cont>
ae92:	mov    %eax,-0x4(%rdi,%r11,4)
ae97:	sub    $0x1,%r11
ae9b:	jg     ae86 <cpDiv_BNU32.spec_case2_loop>
ae9d:	test   %rdi,%rdi
aea0:	je     aeb6 <cpDiv_BNU32.spec_case2_quit>
aea2:	mov    -0x4(%rdi,%rcx,4),%eax
aea6:	test   %eax,%eax
aea8:	jne    aeb4 <..@52.fix_bnu_quit>
aeaa:	sub    $0x1,%rcx
aeae:	jg     aea2 <..@52.fix_bnu_loop>
aeb0:	add    $0x1,%rcx
aeb4:	mov    %ecx,(%rsi)
aeb6:	mov    %edx,(%r10)
aeb9:	mov    $0x1,%rax
aec0:	add    $0x28,%rsp
aec4:	pop    %r15
aec6:	pop    %r14
aec8:	pop    %r13
aeca:	pop    %r12
aecc:	pop    %rbp
aecd:	pop    %rbx
aece:	retq   
aecf:	xor    %eax,%eax
aed1:	mov    %eax,(%r10,%r11,4)
aed5:	mov    -0x4(%r8,%r9,4),%eax
aeda:	mov    $0x20,%ecx
aedf:	test   %eax,%eax
aee1:	je     af23 <..@56.nlz_quit>
aee3:	xor    %ecx,%ecx
aee5:	test   $0xffff0000,%eax
aeea:	jne    aef2 <..@56.nlz8>
aeec:	shl    $0x10,%eax
aeef:	add    $0x10,%ecx
aef2:	test   $0xff000000,%eax
aef7:	jne    aeff <..@56.nlz4>
aef9:	shl    $0x8,%eax
aefc:	add    $0x8,%ecx
aeff:	test   $0xf0000000,%eax
af04:	jne    af0c <..@56.nlz2>
af06:	shl    $0x4,%eax
af09:	add    $0x4,%ecx
af0c:	test   $0xc0000000,%eax
af11:	jne    af19 <..@56.nlz1>
af13:	shl    $0x2,%eax
af16:	add    $0x2,%ecx
af19:	test   $0x80000000,%eax
af1e:	jne    af23 <..@56.nlz_quit>
af20:	add    $0x1,%ecx
af23:	test   %ecx,%ecx
af25:	je     af7c <cpDiv_BNU32.division>
af27:	mov    %r9,%r15
af2a:	mov    -0x4(%r8,%r15,4),%r12d
af2f:	sub    $0x1,%r15
af33:	je     af4b <..@57.shl_bnu_quit>
af35:	mov    -0x4(%r8,%r15,4),%r13d
af3a:	shld   %cl,%r13d,%r12d
af3e:	mov    %r12d,(%r8,%r15,4)
af42:	mov    %r13d,%r12d
af45:	sub    $0x1,%r15
af49:	jg     af35 <..@57.shl_bnu_loop>
af4b:	shl    %cl,%r12d
af4e:	mov    %r12d,(%r8)
af51:	lea    0x1(%r11),%r15
af55:	mov    -0x4(%r10,%r15,4),%r12d
af5a:	sub    $0x1,%r15
af5e:	je     af76 <..@58.shl_bnu_quit>
af60:	mov    -0x4(%r10,%r15,4),%r13d
af65:	shld   %cl,%r13d,%r12d
af69:	mov    %r12d,(%r10,%r15,4)
af6d:	mov    %r13d,%r12d
af70:	sub    $0x1,%r15
af74:	jg     af60 <..@58.shl_bnu_loop>
af76:	shl    %cl,%r12d
af79:	mov    %r12d,(%r10)
af7c:	mov    -0x4(%r8,%r9,4),%ebx
af81:	mov    %r10,(%rsp)
af85:	mov    %r11,0x8(%rsp)
af8a:	sub    %r9,%r11
af8d:	mov    %r11,0x10(%rsp)
af92:	lea    (%r10,%r11,4),%r10
af96:	mov    -0x4(%r10,%r9,4),%rax
af9b:	xor    %rdx,%rdx
af9e:	div    %rbx
afa1:	mov    %rax,%r12
afa4:	mov    %rdx,%r13
afa7:	mov    -0x8(%r8,%r9,4),%ebp
afac:	movabs $0xffffffff00000000,%r15
afb6:	and    %rax,%r15
afb9:	jne    afd2 <cpDiv_BNU32.tune>
afbb:	mul    %rbp
afbe:	mov    %r13,%r14
afc1:	shl    $0x20,%r14
afc5:	mov    -0x8(%r10,%r9,4),%edx
afca:	or     %r14,%rdx
afcd:	cmp    %rdx,%rax
afd0:	jbe    afde <cpDiv_BNU32.mul_and_sub>
afd2:	sub    $0x1,%r12
afd6:	add    %ebx,%r13d
afd9:	mov    %r12,%rax
afdc:	jae    afac <cpDiv_BNU32.tune_loop>
afde:	mov    %r9,%r15
afe1:	mov    %r12d,%ebp
afe4:	xor    %r13,%r13
afe7:	xor    %r14,%r14
afea:	sub    $0x2,%r15
afee:	jl     b01b <..@59.mdc_short>
aff0:	mov    (%r8,%r13,1),%rax
aff4:	mul    %rbp
aff7:	add    %r14,%rax
affa:	adc    $0x0,%rdx
affe:	xor    %r14,%r14
b001:	sub    %rax,(%r10,%r13,1)
b005:	sbb    %rdx,%r14
b008:	neg    %r14
b00b:	add    $0x8,%r13
b00f:	sub    $0x2,%r15
b013:	jge    aff0 <..@59.mdc_loop>
b015:	add    $0x2,%r15
b019:	je     b034 <..@59.mdc_quit>
b01b:	mov    (%r8,%r13,1),%eax
b01f:	mul    %ebp
b021:	add    %r14d,%eax
b024:	adc    $0x0,%edx
b027:	xor    %r14d,%r14d
b02a:	sub    %eax,(%r10,%r13,1)
b02e:	sbb    %edx,%r14d
b031:	neg    %r14d
b034:	mov    %r14,%rbp
b037:	sub    %ebp,(%r10,%r9,4)
b03b:	jae    b093 <cpDiv_BNU32.store_duotation>
b03d:	sub    $0x1,%r12d
b041:	mov    %r9,%r15
b044:	xor    %rax,%rax
b047:	xor    %r13,%r13
b04a:	sub    $0x2,%r15
b04e:	jl     b077 <..@60.short_bnu>
b050:	clc    
b051:	mov    (%r10,%r13,8),%r14
b055:	mov    (%r8,%r13,8),%rdx
b059:	adc    %rdx,%r14
b05c:	mov    %r14,(%r10,%r13,8)
b060:	inc    %r13
b063:	dec    %r15
b066:	dec    %r15
b069:	jge    b051 <..@60.add_bnu_loop>
b06b:	setb   %al
b06e:	add    %r13,%r13
b071:	add    $0x2,%r15
b075:	je     b08f <..@60.add_bnu_exit>
b077:	shr    %eax
b079:	mov    (%r10,%r13,4),%r14d
b07d:	mov    (%r8,%r13,4),%edx
b081:	adc    %edx,%r14d
b084:	mov    %r14d,(%r10,%r13,4)
b088:	setb   %al
b08b:	add    $0x1,%r13
b08f:	add    %eax,(%r10,%r9,4)
b093:	test   %rdi,%rdi
b096:	je     b09c <cpDiv_BNU32.cont_division_loop>
b098:	mov    %r12d,(%rdi,%r11,4)
b09c:	sub    $0x4,%r10
b0a0:	sub    $0x1,%r11
b0a4:	jge    af96 <cpDiv_BNU32.division_loop>
b0aa:	mov    (%rsp),%r10
b0ae:	mov    0x8(%rsp),%r11
b0b3:	test   %ecx,%ecx
b0b5:	je     b113 <cpDiv_BNU32.store_results>
b0b7:	mov    %r9,%r15
b0ba:	push   %r8
b0bc:	mov    (%r8),%r13d
b0bf:	sub    $0x1,%r15
b0c3:	je     b0dd <..@61.shr_bnu_quit>
b0c5:	mov    0x4(%r8),%r12d
b0c9:	shrd   %cl,%r12d,%r13d
b0cd:	mov    %r13d,(%r8)
b0d0:	add    $0x4,%r8
b0d4:	mov    %r12d,%r13d
b0d7:	sub    $0x1,%r15
b0db:	jg     b0c5 <..@61.shr_bnu_loop>
b0dd:	shr    %cl,%r13d
b0e0:	mov    %r13d,(%r8)
b0e3:	pop    %r8
b0e5:	mov    %r11,%r15
b0e8:	push   %r10
b0ea:	mov    (%r10),%r13d
b0ed:	sub    $0x1,%r15
b0f1:	je     b10b <..@62.shr_bnu_quit>
b0f3:	mov    0x4(%r10),%r12d
b0f7:	shrd   %cl,%r12d,%r13d
b0fb:	mov    %r13d,(%r10)
b0fe:	add    $0x4,%r10
b102:	mov    %r12d,%r13d
b105:	sub    $0x1,%r15
b109:	jg     b0f3 <..@62.shr_bnu_loop>
b10b:	shr    %cl,%r13d
b10e:	mov    %r13d,(%r10)
b111:	pop    %r10
b113:	test   %rdi,%rdi
b116:	je     b135 <cpDiv_BNU32.quit>
b118:	mov    0x10(%rsp),%rcx
b11d:	add    $0x1,%rcx
b121:	mov    -0x4(%rdi,%rcx,4),%eax
b125:	test   %eax,%eax
b127:	jne    b133 <..@63.fix_bnu_quit>
b129:	sub    $0x1,%rcx
b12d:	jg     b121 <..@63.fix_bnu_loop>
b12f:	add    $0x1,%rcx
b133:	mov    %ecx,(%rsi)
b135:	mov    -0x4(%r10,%r11,4),%eax
b13a:	test   %eax,%eax
b13c:	jne    b148 <..@64.fix_bnu_quit>
b13e:	sub    $0x1,%r11
b142:	jg     b135 <cpDiv_BNU32.quit>
b144:	add    $0x1,%r11
b148:	mov    %r11,%rax
b14b:	add    $0x28,%rsp
b14f:	pop    %r15
b151:	pop    %r14
b153:	pop    %r13
b155:	pop    %r12
b157:	pop    %rbp
b158:	pop    %rbx
b159:	retq   
b15a:	nopw   0x0(%rax,%rax,1)
b160:	endbr64 
b164:	push   %rbx
b165:	push   %rbp
b166:	push   %r12
b168:	push   %r13
b16a:	push   %r14
b16c:	push   %r15
b16e:	sub    $0x18,%rsp
b172:	cmp    %r8d,%edx
b175:	jl     b4d0 <cpMulAdc_BNU_school.general_case_mul_entry>
b17b:	jg     b4f0 <cpMulAdc_BNU_school.general_case_mul>
b181:	cmp    $0x4,%edx
b184:	jg     b4f0 <cpMulAdc_BNU_school.general_case_mul>
b18a:	cmp    $0x3,%edx
b18d:	ja     b330 <cpMulAdc_BNU_school.mul_4x4>
b193:	je     b240 <cpMulAdc_BNU_school.mul_3x3>
b199:	jp     b1c0 <cpMulAdc_BNU_school.mul_2x2>
b19b:	nopl   0x0(%rax,%rax,1)
b1a0:	mov    (%rsi),%rax
b1a3:	mulq   (%rcx)
b1a6:	mov    %rax,(%rdi)
b1a9:	mov    %rdx,0x8(%rdi)
b1ad:	mov    0x8(%rdi),%rax
b1b1:	add    $0x18,%rsp
b1b5:	pop    %r15
b1b7:	pop    %r14
b1b9:	pop    %r13
b1bb:	pop    %r12
b1bd:	pop    %rbp
b1be:	pop    %rbx
b1bf:	retq   
b1c0:	mov    (%rcx),%r8
b1c3:	mov    0x8(%rcx),%r9
b1c7:	mov    (%rsi),%rbx
b1ca:	mov    %r8,%rax
b1cd:	mul    %rbx
b1d0:	mov    %rax,(%rdi)
b1d3:	mov    %rdx,%r8
b1d6:	mov    %r9,%rax
b1d9:	mul    %rbx
b1dc:	add    %rax,%r8
b1df:	adc    $0x0,%rdx
b1e3:	mov    %rdx,%r9
b1e6:	mov    0x8(%rsi),%rbx
b1ea:	mov    (%rcx),%rax
b1ed:	mul    %rbx
b1f0:	add    %rax,%r8
b1f3:	adc    $0x0,%rdx
b1f7:	mov    %r8,0x8(%rdi)
b1fb:	mov    %rdx,%rbp
b1fe:	mov    0x8(%rcx),%rax
b202:	mul    %rbx
b205:	add    %rax,%r9
b208:	adc    $0x0,%rdx
b20c:	add    %rbp,%r9
b20f:	adc    $0x0,%rdx
b213:	mov    %rdx,%r10
b216:	mov    %r9,0x10(%rdi)
b21a:	mov    %r10,0x18(%rdi)
b21e:	mov    0x18(%rdi),%rax
b222:	add    $0x18,%rsp
b226:	pop    %r15
b228:	pop    %r14
b22a:	pop    %r13
b22c:	pop    %r12
b22e:	pop    %rbp
b22f:	pop    %rbx
b230:	retq   
b231:	nopl   0x0(%rax,%rax,1)
b239:	nopl   0x0(%rax)
b240:	mov    (%rcx),%r8
b243:	mov    0x8(%rcx),%r9
b247:	mov    0x10(%rcx),%r10
b24b:	mov    (%rsi),%rbx
b24e:	mov    %r8,%rax
b251:	mul    %rbx
b254:	mov    %rax,(%rdi)
b257:	mov    %rdx,%r8
b25a:	mov    %r9,%rax
b25d:	mul    %rbx
b260:	add    %rax,%r8
b263:	adc    $0x0,%rdx
b267:	mov    %rdx,%r9
b26a:	mov    %r10,%rax
b26d:	mul    %rbx
b270:	add    %rax,%r9
b273:	adc    $0x0,%rdx
b277:	mov    %rdx,%r10
b27a:	mov    0x8(%rsi),%rbx
b27e:	mov    (%rcx),%rax
b281:	mul    %rbx
b284:	add    %rax,%r8
b287:	adc    $0x0,%rdx
b28b:	mov    %r8,0x8(%rdi)
b28f:	mov    %rdx,%rbp
b292:	mov    0x8(%rcx),%rax
b296:	mul    %rbx
b299:	add    %rax,%r9
b29c:	adc    $0x0,%rdx
b2a0:	add    %rbp,%r9
b2a3:	adc    $0x0,%rdx
b2a7:	mov    %rdx,%rbp
b2aa:	mov    0x10(%rcx),%rax
b2ae:	mul    %rbx
b2b1:	add    %rax,%r10
b2b4:	adc    $0x0,%rdx
b2b8:	add    %rbp,%r10
b2bb:	adc    $0x0,%rdx
b2bf:	mov    %rdx,%r11
b2c2:	mov    0x10(%rsi),%rbx
b2c6:	mov    (%rcx),%rax
b2c9:	mul    %rbx
b2cc:	add    %rax,%r9
b2cf:	adc    $0x0,%rdx
b2d3:	mov    %r9,0x10(%rdi)
b2d7:	mov    %rdx,%rbp
b2da:	mov    0x8(%rcx),%rax
b2de:	mul    %rbx
b2e1:	add    %rax,%r10
b2e4:	adc    $0x0,%rdx
b2e8:	add    %rbp,%r10
b2eb:	adc    $0x0,%rdx
b2ef:	mov    %rdx,%rbp
b2f2:	mov    0x10(%rcx),%rax
b2f6:	mul    %rbx
b2f9:	add    %rax,%r11
b2fc:	adc    $0x0,%rdx
b300:	add    %rbp,%r11
b303:	adc    $0x0,%rdx
b307:	mov    %rdx,%r12
b30a:	mov    %r10,0x18(%rdi)
b30e:	mov    %r11,0x20(%rdi)
b312:	mov    %r12,0x28(%rdi)
b316:	mov    0x28(%rdi),%rax
b31a:	add    $0x18,%rsp
b31e:	pop    %r15
b320:	pop    %r14
b322:	pop    %r13
b324:	pop    %r12
b326:	pop    %rbp
b327:	pop    %rbx
b328:	retq   
b329:	nopl   0x0(%rax)
b330:	mov    (%rcx),%r8
b333:	mov    0x8(%rcx),%r9
b337:	mov    0x10(%rcx),%r10
b33b:	mov    0x18(%rcx),%r11
b33f:	mov    (%rsi),%rbx
b342:	mov    %r8,%rax
b345:	mul    %rbx
b348:	mov    %rax,(%rdi)
b34b:	mov    %rdx,%r8
b34e:	mov    %r9,%rax
b351:	mul    %rbx
b354:	add    %rax,%r8
b357:	adc    $0x0,%rdx
b35b:	mov    %rdx,%r9
b35e:	mov    %r10,%rax
b361:	mul    %rbx
b364:	add    %rax,%r9
b367:	adc    $0x0,%rdx
b36b:	mov    %rdx,%r10
b36e:	mov    %r11,%rax
b371:	mul    %rbx
b374:	add    %rax,%r10
b377:	adc    $0x0,%rdx
b37b:	mov    %rdx,%r11
b37e:	mov    0x8(%rsi),%rbx
b382:	mov    (%rcx),%rax
b385:	mul    %rbx
b388:	add    %rax,%r8
b38b:	adc    $0x0,%rdx
b38f:	mov    %r8,0x8(%rdi)
b393:	mov    %rdx,%rbp
b396:	mov    0x8(%rcx),%rax
b39a:	mul    %rbx
b39d:	add    %rax,%r9
b3a0:	adc    $0x0,%rdx
b3a4:	add    %rbp,%r9
b3a7:	adc    $0x0,%rdx
b3ab:	mov    %rdx,%rbp
b3ae:	mov    0x10(%rcx),%rax
b3b2:	mul    %rbx
b3b5:	add    %rax,%r10
b3b8:	adc    $0x0,%rdx
b3bc:	add    %rbp,%r10
b3bf:	adc    $0x0,%rdx
b3c3:	mov    %rdx,%rbp
b3c6:	mov    0x18(%rcx),%rax
b3ca:	mul    %rbx
b3cd:	add    %rax,%r11
b3d0:	adc    $0x0,%rdx
b3d4:	add    %rbp,%r11
b3d7:	adc    $0x0,%rdx
b3db:	mov    %rdx,%r12
b3de:	mov    0x10(%rsi),%rbx
b3e2:	mov    (%rcx),%rax
b3e5:	mul    %rbx
b3e8:	add    %rax,%r9
b3eb:	adc    $0x0,%rdx
b3ef:	mov    %r9,0x10(%rdi)
b3f3:	mov    %rdx,%rbp
b3f6:	mov    0x8(%rcx),%rax
b3fa:	mul    %rbx
b3fd:	add    %rax,%r10
b400:	adc    $0x0,%rdx
b404:	add    %rbp,%r10
b407:	adc    $0x0,%rdx
b40b:	mov    %rdx,%rbp
b40e:	mov    0x10(%rcx),%rax
b412:	mul    %rbx
b415:	add    %rax,%r11
b418:	adc    $0x0,%rdx
b41c:	add    %rbp,%r11
b41f:	adc    $0x0,%rdx
b423:	mov    %rdx,%rbp
b426:	mov    0x18(%rcx),%rax
b42a:	mul    %rbx
b42d:	add    %rax,%r12
b430:	adc    $0x0,%rdx
b434:	add    %rbp,%r12
b437:	adc    $0x0,%rdx
b43b:	mov    %rdx,%r13
b43e:	mov    0x18(%rsi),%rbx
b442:	mov    (%rcx),%rax
b445:	mul    %rbx
b448:	add    %rax,%r10
b44b:	adc    $0x0,%rdx
b44f:	mov    %r10,0x18(%rdi)
b453:	mov    %rdx,%rbp
b456:	mov    0x8(%rcx),%rax
b45a:	mul    %rbx
b45d:	add    %rax,%r11
b460:	adc    $0x0,%rdx
b464:	add    %rbp,%r11
b467:	adc    $0x0,%rdx
b46b:	mov    %rdx,%rbp
b46e:	mov    0x10(%rcx),%rax
b472:	mul    %rbx
b475:	add    %rax,%r12
b478:	adc    $0x0,%rdx
b47c:	add    %rbp,%r12
b47f:	adc    $0x0,%rdx
b483:	mov    %rdx,%rbp
b486:	mov    0x18(%rcx),%rax
b48a:	mul    %rbx
b48d:	add    %rax,%r13
b490:	adc    $0x0,%rdx
b494:	add    %rbp,%r13
b497:	adc    $0x0,%rdx
b49b:	mov    %rdx,%r14
b49e:	mov    %r11,0x20(%rdi)
b4a2:	mov    %r12,0x28(%rdi)
b4a6:	mov    %r13,0x30(%rdi)
b4aa:	mov    %r14,0x38(%rdi)
b4ae:	mov    0x38(%rdi),%rax
b4b2:	add    $0x18,%rsp
b4b6:	pop    %r15
b4b8:	pop    %r14
b4ba:	pop    %r13
b4bc:	pop    %r12
b4be:	pop    %rbp
b4bf:	pop    %rbx
b4c0:	retq   
b4c1:	nopl   0x0(%rax,%rax,1)
b4c9:	nopl   0x0(%rax)
b4d0:	xor    %rcx,%rsi
b4d3:	xor    %r8d,%edx
b4d6:	xor    %rsi,%rcx
b4d9:	xor    %edx,%r8d
b4dc:	xor    %rcx,%rsi
b4df:	xor    %r8d,%edx
b4e2:	nopl   0x0(%rax,%rax,1)
b4ea:	nopw   0x0(%rax,%rax,1)
b4f0:	movslq %edx,%rdx
b4f3:	movslq %r8d,%r8
b4f6:	lea    -0x20(%rdi,%rdx,8),%rdi
b4fb:	lea    -0x20(%rsi,%rdx,8),%rsi
b500:	mov    $0x4,%rbx
b507:	sub    %rdx,%rbx
b50a:	mov    %rbx,(%rsp)
b50e:	mov    (%rsi,%rbx,8),%rax
b512:	mov    (%rcx),%r10
b515:	test   $0x1,%r8
b51c:	je     b6c2 <cpMulAdc_BNU_school.init_even_B>
b522:	xor    %r12,%r12
b525:	cmp    $0x0,%rbx
b529:	jge    b58d <cpMulAdc_BNU_school.skip_mul1>
b52b:	nopl   0x0(%rax,%rax,1)
b530:	mul    %r10
b533:	xor    %r13,%r13
b536:	add    %rax,%r12
b539:	mov    %r12,(%rdi,%rbx,8)
b53d:	mov    0x8(%rsi,%rbx,8),%rax
b542:	adc    %rdx,%r13
b545:	mul    %r10
b548:	xor    %r14,%r14
b54b:	add    %rax,%r13
b54e:	mov    %r13,0x8(%rdi,%rbx,8)
b553:	mov    0x10(%rsi,%rbx,8),%rax
b558:	adc    %rdx,%r14
b55b:	mul    %r10
b55e:	xor    %r15,%r15
b561:	add    %rax,%r14
b564:	mov    %r14,0x10(%rdi,%rbx,8)
b569:	mov    0x18(%rsi,%rbx,8),%rax
b56e:	adc    %rdx,%r15
b571:	mul    %r10
b574:	xor    %r12,%r12
b577:	add    %rax,%r15
b57a:	mov    %r15,0x18(%rdi,%rbx,8)
b57f:	mov    0x20(%rsi,%rbx,8),%rax
b584:	adc    %rdx,%r12
b587:	add    $0x4,%rbx
b58b:	jae    b530 <..@86.L_1>
b58d:	cmp    $0x2,%rbx
b591:	ja     b697 <cpMulAdc_BNU_school.fin_mul1x4n_1>
b597:	je     b658 <cpMulAdc_BNU_school.fin_mul1x4n_2>
b59d:	jp     b605 <cpMulAdc_BNU_school.fin_mul1x4n_3>
b59f:	mul    %r10
b5a2:	xor    %r13,%r13
b5a5:	add    %rax,%r12
b5a8:	mov    %r12,(%rdi)
b5ab:	mov    0x8(%rsi),%rax
b5af:	adc    %rdx,%r13
b5b2:	mul    %r10
b5b5:	xor    %r14,%r14
b5b8:	add    %rax,%r13
b5bb:	mov    %r13,0x8(%rdi)
b5bf:	mov    0x10(%rsi),%rax
b5c3:	adc    %rdx,%r14
b5c6:	mul    %r10
b5c9:	xor    %r15,%r15
b5cc:	add    %rax,%r14
b5cf:	mov    %r14,0x10(%rdi)
b5d3:	mov    0x18(%rsi),%rax
b5d7:	adc    %rdx,%r15
b5da:	mul    %r10
b5dd:	mov    (%rsp),%rbx
b5e1:	add    %rax,%r15
b5e4:	mov    %r15,0x18(%rdi)
b5e8:	mov    (%rsi,%rbx,8),%rax
b5ec:	adc    $0x0,%rdx
b5f0:	mov    %rdx,0x20(%rdi)
b5f4:	add    $0x8,%rdi
b5f8:	add    $0x8,%rcx
b5fc:	add    $0x1,%r8
b600:	jmpq   b850 <cpMulAdc_BNU_school.mla2x4n_4>
b605:	mul    %r10
b608:	xor    %r13,%r13
b60b:	add    %rax,%r12
b60e:	mov    %r12,0x8(%rdi)
b612:	mov    0x10(%rsi),%rax
b616:	adc    %rdx,%r13
b619:	mul    %r10
b61c:	xor    %r14,%r14
b61f:	add    %rax,%r13
b622:	mov    %r13,0x10(%rdi)
b626:	mov    0x18(%rsi),%rax
b62a:	adc    %rdx,%r14
b62d:	mul    %r10
b630:	mov    (%rsp),%rbx
b634:	add    %rax,%r14
b637:	mov    %r14,0x18(%rdi)
b63b:	mov    (%rsi,%rbx,8),%rax
b63f:	adc    $0x0,%rdx
b643:	mov    %rdx,0x20(%rdi)
b647:	add    $0x8,%rdi
b64b:	add    $0x8,%rcx
b64f:	add    $0x1,%r8
b653:	jmpq   ba60 <cpMulAdc_BNU_school.mla2x4n_3>
b658:	mul    %r10
b65b:	xor    %r13,%r13
b65e:	add    %rax,%r12
b661:	mov    %r12,0x10(%rdi)
b665:	mov    0x18(%rsi),%rax
b669:	adc    %rdx,%r13
b66c:	mul    %r10
b66f:	mov    (%rsp),%rbx
b673:	add    %rax,%r13
b676:	mov    %r13,0x18(%rdi)
b67a:	mov    (%rsi,%rbx,8),%rax
b67e:	adc    $0x0,%rdx
b682:	mov    %rdx,0x20(%rdi)
b686:	add    $0x8,%rdi
b68a:	add    $0x8,%rcx
b68e:	add    $0x1,%r8
b692:	jmpq   bc20 <cpMulAdc_BNU_school.mla2x4n_2>
b697:	mul    %r10
b69a:	mov    (%rsp),%rbx
b69e:	add    %rax,%r12
b6a1:	mov    %r12,0x18(%rdi)
b6a5:	mov    (%rsi,%rbx,8),%rax
b6a9:	adc    $0x0,%rdx
b6ad:	mov    %rdx,0x20(%rdi)
b6b1:	add    $0x8,%rdi
b6b5:	add    $0x8,%rcx
b6b9:	add    $0x1,%r8
b6bd:	jmpq   bd90 <cpMulAdc_BNU_school.mla2x4n_1>
b6c2:	mov    %rax,%rbp
b6c5:	mul    %r10
b6c8:	mov    0x8(%rcx),%r11
b6cc:	xor    %r14,%r14
b6cf:	mov    %rax,%r12
b6d2:	mov    %rbp,%rax
b6d5:	mov    %rdx,%r13
b6d8:	cmp    $0x0,%rbx
b6dc:	jge    b799 <cpMulAdc_BNU_school.skip_mul_nx2>
b6e2:	nopl   0x0(%rax,%rax,1)
b6ea:	nopw   0x0(%rax,%rax,1)
b6f0:	mul    %r11
b6f3:	xor    %r15,%r15
b6f6:	add    %rax,%r13
b6f9:	mov    0x8(%rsi,%rbx,8),%rax
b6fe:	adc    %rdx,%r14
b701:	mul    %r10
b704:	mov    %r12,(%rdi,%rbx,8)
b708:	add    %rax,%r13
b70b:	mov    0x8(%rsi,%rbx,8),%rax
b710:	adc    %rdx,%r14
b713:	adc    $0x0,%r15
b717:	mul    %r11
b71a:	xor    %r12,%r12
b71d:	add    %rax,%r14
b720:	mov    0x10(%rsi,%rbx,8),%rax
b725:	adc    %rdx,%r15
b728:	mul    %r10
b72b:	mov    %r13,0x8(%rdi,%rbx,8)
b730:	add    %rax,%r14
b733:	mov    0x10(%rsi,%rbx,8),%rax
b738:	adc    %rdx,%r15
b73b:	adc    $0x0,%r12
b73f:	mul    %r11
b742:	xor    %r13,%r13
b745:	add    %rax,%r15
b748:	mov    0x18(%rsi,%rbx,8),%rax
b74d:	adc    %rdx,%r12
b750:	mul    %r10
b753:	mov    %r14,0x10(%rdi,%rbx,8)
b758:	add    %rax,%r15
b75b:	mov    0x18(%rsi,%rbx,8),%rax
b760:	adc    %rdx,%r12
b763:	adc    $0x0,%r13
b767:	mul    %r11
b76a:	xor    %r14,%r14
b76d:	add    %rax,%r12
b770:	mov    0x20(%rsi,%rbx,8),%rax
b775:	adc    %rdx,%r13
b778:	mul    %r10
b77b:	mov    %r15,0x18(%rdi,%rbx,8)
b780:	add    %rax,%r12
b783:	mov    0x20(%rsi,%rbx,8),%rax
b788:	adc    %rdx,%r13
b78b:	adc    $0x0,%r14
b78f:	add    $0x4,%rbx
b793:	jae    b6f0 <..@94.L_1>
b799:	cmp    $0x2,%rbx
b79d:	ja     bd63 <cpMulAdc_BNU_school.fin_mul2x4n_1>
b7a3:	je     bbcc <cpMulAdc_BNU_school.fin_mul2x4n_2>
b7a9:	jp     b9e3 <cpMulAdc_BNU_school.fin_mul2x4n_3>
b7af:	mul    %r11
b7b2:	xor    %r15,%r15
b7b5:	add    %rax,%r13
b7b8:	mov    0x8(%rsi),%rax
b7bc:	adc    %rdx,%r14
b7bf:	mul    %r10
b7c2:	mov    %r12,(%rdi)
b7c5:	add    %rax,%r13
b7c8:	mov    0x8(%rsi),%rax
b7cc:	adc    %rdx,%r14
b7cf:	adc    $0x0,%r15
b7d3:	mul    %r11
b7d6:	xor    %r12,%r12
b7d9:	add    %rax,%r14
b7dc:	mov    0x10(%rsi),%rax
b7e0:	adc    %rdx,%r15
b7e3:	mul    %r10
b7e6:	mov    %r13,0x8(%rdi)
b7ea:	add    %rax,%r14
b7ed:	mov    0x10(%rsi),%rax
b7f1:	adc    %rdx,%r15
b7f4:	adc    $0x0,%r12
b7f8:	mul    %r11
b7fb:	xor    %r13,%r13
b7fe:	add    %rax,%r15
b801:	mov    0x18(%rsi),%rax
b805:	adc    %rdx,%r12
b808:	mul    %r10
b80b:	mov    %r14,0x10(%rdi)
b80f:	add    %rax,%r15
b812:	mov    0x18(%rsi),%rax
b816:	adc    %rdx,%r12
b819:	adc    $0x0,%r13
b81d:	mul    %r11
b820:	add    $0x10,%rdi
b824:	mov    (%rsp),%rbx
b828:	mov    %r15,0x8(%rdi)
b82c:	add    %rax,%r12
b82f:	mov    (%rsi,%rbx,8),%rax
b833:	adc    %r13,%rdx
b836:	mov    %r12,0x10(%rdi)
b83a:	mov    %rdx,0x18(%rdi)
b83e:	add    $0x10,%rcx
b842:	nopl   0x0(%rax,%rax,1)
b84a:	nopw   0x0(%rax,%rax,1)
b850:	sub    $0x2,%r8
b854:	je     beaa <cpMulAdc_BNU_school.quit>
b85a:	mov    (%rcx),%r10
b85d:	mul    %r10
b860:	mov    0x8(%rcx),%r11
b864:	xor    %r14,%r14
b867:	mov    %rax,%r12
b86a:	mov    (%rsi,%rbx,8),%rax
b86e:	mov    %rdx,%r13
b871:	cmp    $0x0,%rbx
b875:	je     b93c <cpMulAdc_BNU_school.skip_mla_x2>
b87b:	nopl   0x0(%rax,%rax,1)
b880:	mul    %r11
b883:	xor    %r15,%r15
b886:	add    %rax,%r13
b889:	mov    0x8(%rsi,%rbx,8),%rax
b88e:	adc    %rdx,%r14
b891:	mul    %r10
b894:	add    (%rdi,%rbx,8),%r12
b898:	adc    %rax,%r13
b89b:	mov    0x8(%rsi,%rbx,8),%rax
b8a0:	adc    %rdx,%r14
b8a3:	mov    %r12,(%rdi,%rbx,8)
b8a7:	adc    $0x0,%r15
b8ab:	mul    %r11
b8ae:	xor    %r12,%r12
b8b1:	add    %rax,%r14
b8b4:	mov    0x10(%rsi,%rbx,8),%rax
b8b9:	adc    %rdx,%r15
b8bc:	mul    %r10
b8bf:	add    0x8(%rdi,%rbx,8),%r13
b8c4:	adc    %rax,%r14
b8c7:	mov    0x10(%rsi,%rbx,8),%rax
b8cc:	adc    %rdx,%r15
b8cf:	mov    %r13,0x8(%rdi,%rbx,8)
b8d4:	adc    $0x0,%r12
b8d8:	mul    %r11
b8db:	xor    %r13,%r13
b8de:	add    %rax,%r15
b8e1:	mov    0x18(%rsi,%rbx,8),%rax
b8e6:	adc    %rdx,%r12
b8e9:	mul    %r10
b8ec:	add    0x10(%rdi,%rbx,8),%r14
b8f1:	adc    %rax,%r15
b8f4:	mov    0x18(%rsi,%rbx,8),%rax
b8f9:	adc    %rdx,%r12
b8fc:	mov    %r14,0x10(%rdi,%rbx,8)
b901:	adc    $0x0,%r13
b905:	mul    %r11
b908:	xor    %r14,%r14
b90b:	add    %rax,%r12
b90e:	mov    0x20(%rsi,%rbx,8),%rax
b913:	adc    %rdx,%r13
b916:	mul    %r10
b919:	add    0x18(%rdi,%rbx,8),%r15
b91e:	adc    %rax,%r12
b921:	mov    0x20(%rsi,%rbx,8),%rax
b926:	adc    %rdx,%r13
b929:	mov    %r15,0x18(%rdi,%rbx,8)
b92e:	adc    $0x0,%r14
b932:	add    $0x4,%rbx
b936:	jae    b880 <..@103.L_1>
b93c:	mul    %r11
b93f:	xor    %r15,%r15
b942:	add    %rax,%r13
b945:	mov    0x8(%rsi),%rax
b949:	adc    %rdx,%r14
b94c:	mul    %r10
b94f:	add    (%rdi),%r12
b952:	adc    %rax,%r13
b955:	mov    0x8(%rsi),%rax
b959:	adc    %rdx,%r14
b95c:	mov    %r12,(%rdi)
b95f:	adc    $0x0,%r15
b963:	mul    %r11
b966:	xor    %r12,%r12
b969:	add    %rax,%r14
b96c:	mov    0x10(%rsi),%rax
b970:	adc    %rdx,%r15
b973:	mul    %r10
b976:	add    0x8(%rdi),%r13
b97a:	adc    %rax,%r14
b97d:	mov    0x10(%rsi),%rax
b981:	adc    %rdx,%r15
b984:	mov    %r13,0x8(%rdi)
b988:	adc    $0x0,%r12
b98c:	mul    %r11
b98f:	xor    %r13,%r13
b992:	add    %rax,%r15
b995:	mov    0x18(%rsi),%rax
b999:	adc    %rdx,%r12
b99c:	mul    %r10
b99f:	add    0x10(%rdi),%r14
b9a3:	adc    %rax,%r15
b9a6:	mov    0x18(%rsi),%rax
b9aa:	adc    %rdx,%r12
b9ad:	mov    %r14,0x10(%rdi)
b9b1:	adc    $0x0,%r13
b9b5:	mul    %r11
b9b8:	add    $0x10,%rdi
b9bc:	mov    (%rsp),%rbx
b9c0:	add    0x8(%rdi),%r15
b9c4:	mov    %r15,0x8(%rdi)
b9c8:	adc    %rax,%r12
b9cb:	mov    (%rsi,%rbx,8),%rax
b9cf:	adc    %r13,%rdx
b9d2:	mov    %r12,0x10(%rdi)
b9d6:	mov    %rdx,0x18(%rdi)
b9da:	add    $0x10,%rcx
b9de:	jmpq   b850 <cpMulAdc_BNU_school.mla2x4n_4>
b9e3:	mul    %r11
b9e6:	xor    %r15,%r15
b9e9:	add    %rax,%r13
b9ec:	mov    0x10(%rsi),%rax
b9f0:	adc    %rdx,%r14
b9f3:	mul    %r10
b9f6:	mov    %r12,0x8(%rdi)
b9fa:	add    %rax,%r13
b9fd:	mov    0x10(%rsi),%rax
ba01:	adc    %rdx,%r14
ba04:	adc    $0x0,%r15
ba08:	mul    %r11
ba0b:	xor    %r12,%r12
ba0e:	add    %rax,%r14
ba11:	mov    0x18(%rsi),%rax
ba15:	adc    %rdx,%r15
ba18:	mul    %r10
ba1b:	mov    %r13,0x10(%rdi)
ba1f:	add    %rax,%r14
ba22:	mov    0x18(%rsi),%rax
ba26:	adc    %rdx,%r15
ba29:	adc    $0x0,%r12
ba2d:	mul    %r11
ba30:	add    $0x10,%rdi
ba34:	mov    (%rsp),%rbx
ba38:	mov    %r14,0x8(%rdi)
ba3c:	add    %rax,%r15
ba3f:	mov    (%rsi,%rbx,8),%rax
ba43:	adc    %r12,%rdx
ba46:	mov    %r15,0x10(%rdi)
ba4a:	mov    %rdx,0x18(%rdi)
ba4e:	add    $0x10,%rcx
ba52:	nopl   0x0(%rax,%rax,1)
ba5a:	nopw   0x0(%rax,%rax,1)
ba60:	sub    $0x2,%r8
ba64:	je     beaa <cpMulAdc_BNU_school.quit>
ba6a:	mov    (%rcx),%r10
ba6d:	mul    %r10
ba70:	mov    0x8(%rcx),%r11
ba74:	xor    %r14,%r14
ba77:	mov    %rax,%r12
ba7a:	mov    (%rsi,%rbx,8),%rax
ba7e:	mov    %rdx,%r13
ba81:	nopl   0x0(%rax,%rax,1)
ba89:	nopl   0x0(%rax)
ba90:	mul    %r11
ba93:	xor    %r15,%r15
ba96:	add    %rax,%r13
ba99:	mov    0x8(%rsi,%rbx,8),%rax
ba9e:	adc    %rdx,%r14
baa1:	mul    %r10
baa4:	add    (%rdi,%rbx,8),%r12
baa8:	adc    %rax,%r13
baab:	mov    0x8(%rsi,%rbx,8),%rax
bab0:	adc    %rdx,%r14
bab3:	mov    %r12,(%rdi,%rbx,8)
bab7:	adc    $0x0,%r15
babb:	mul    %r11
babe:	xor    %r12,%r12
bac1:	add    %rax,%r14
bac4:	mov    0x10(%rsi,%rbx,8),%rax
bac9:	adc    %rdx,%r15
bacc:	mul    %r10
bacf:	add    0x8(%rdi,%rbx,8),%r13
bad4:	adc    %rax,%r14
bad7:	mov    0x10(%rsi,%rbx,8),%rax
badc:	adc    %rdx,%r15
badf:	mov    %r13,0x8(%rdi,%rbx,8)
bae4:	adc    $0x0,%r12
bae8:	mul    %r11
baeb:	xor    %r13,%r13
baee:	add    %rax,%r15
baf1:	mov    0x18(%rsi,%rbx,8),%rax
baf6:	adc    %rdx,%r12
baf9:	mul    %r10
bafc:	add    0x10(%rdi,%rbx,8),%r14
bb01:	adc    %rax,%r15
bb04:	mov    0x18(%rsi,%rbx,8),%rax
bb09:	adc    %rdx,%r12
bb0c:	mov    %r14,0x10(%rdi,%rbx,8)
bb11:	adc    $0x0,%r13
bb15:	mul    %r11
bb18:	xor    %r14,%r14
bb1b:	add    %rax,%r12
bb1e:	mov    0x20(%rsi,%rbx,8),%rax
bb23:	adc    %rdx,%r13
bb26:	mul    %r10
bb29:	add    0x18(%rdi,%rbx,8),%r15
bb2e:	adc    %rax,%r12
bb31:	mov    0x20(%rsi,%rbx,8),%rax
bb36:	adc    %rdx,%r13
bb39:	mov    %r15,0x18(%rdi,%rbx,8)
bb3e:	adc    $0x0,%r14
bb42:	add    $0x4,%rbx
bb46:	jae    ba90 <..@113.L_1>
bb4c:	mul    %r11
bb4f:	xor    %r15,%r15
bb52:	add    %rax,%r13
bb55:	mov    0x10(%rsi),%rax
bb59:	adc    %rdx,%r14
bb5c:	mul    %r10
bb5f:	add    0x8(%rdi),%r12
bb63:	adc    %rax,%r13
bb66:	mov    0x10(%rsi),%rax
bb6a:	adc    %rdx,%r14
bb6d:	mov    %r12,0x8(%rdi)
bb71:	adc    $0x0,%r15
bb75:	mul    %r11
bb78:	xor    %r12,%r12
bb7b:	add    %rax,%r14
bb7e:	mov    0x18(%rsi),%rax
bb82:	adc    %rdx,%r15
bb85:	mul    %r10
bb88:	add    0x10(%rdi),%r13
bb8c:	adc    %rax,%r14
bb8f:	mov    0x18(%rsi),%rax
bb93:	adc    %rdx,%r15
bb96:	mov    %r13,0x10(%rdi)
bb9a:	adc    $0x0,%r12
bb9e:	mul    %r11
bba1:	add    $0x10,%rdi
bba5:	mov    (%rsp),%rbx
bba9:	add    0x8(%rdi),%r14
bbad:	mov    %r14,0x8(%rdi)
bbb1:	adc    %rax,%r15
bbb4:	mov    (%rsi,%rbx,8),%rax
bbb8:	adc    %r12,%rdx
bbbb:	mov    %r15,0x10(%rdi)
bbbf:	mov    %rdx,0x18(%rdi)
bbc3:	add    $0x10,%rcx
bbc7:	jmpq   ba60 <cpMulAdc_BNU_school.mla2x4n_3>
bbcc:	mul    %r11
bbcf:	xor    %r15,%r15
bbd2:	add    %rax,%r13
bbd5:	mov    0x18(%rsi),%rax
bbd9:	adc    %rdx,%r14
bbdc:	mul    %r10
bbdf:	mov    %r12,0x10(%rdi)
bbe3:	add    %rax,%r13
bbe6:	mov    0x18(%rsi),%rax
bbea:	adc    %rdx,%r14
bbed:	adc    $0x0,%r15
bbf1:	mul    %r11
bbf4:	add    $0x10,%rdi
bbf8:	mov    (%rsp),%rbx
bbfc:	mov    %r13,0x8(%rdi)
bc00:	add    %rax,%r14
bc03:	mov    (%rsi,%rbx,8),%rax
bc07:	adc    %r15,%rdx
bc0a:	mov    %r14,0x10(%rdi)
bc0e:	mov    %rdx,0x18(%rdi)
bc12:	add    $0x10,%rcx
bc16:	nopl   0x0(%rax,%rax,1)
bc1e:	xchg   %ax,%ax
bc20:	sub    $0x2,%r8
bc24:	je     beaa <cpMulAdc_BNU_school.quit>
bc2a:	mov    (%rcx),%r10
bc2d:	mul    %r10
bc30:	mov    0x8(%rcx),%r11
bc34:	xor    %r14,%r14
bc37:	mov    %rax,%r12
bc3a:	mov    (%rsi,%rbx,8),%rax
bc3e:	mov    %rdx,%r13
bc41:	nopl   0x0(%rax,%rax,1)
bc49:	nopl   0x0(%rax)
bc50:	mul    %r11
bc53:	xor    %r15,%r15
bc56:	add    %rax,%r13
bc59:	mov    0x8(%rsi,%rbx,8),%rax
bc5e:	adc    %rdx,%r14
bc61:	mul    %r10
bc64:	add    (%rdi,%rbx,8),%r12
bc68:	adc    %rax,%r13
bc6b:	mov    0x8(%rsi,%rbx,8),%rax
bc70:	adc    %rdx,%r14
bc73:	mov    %r12,(%rdi,%rbx,8)
bc77:	adc    $0x0,%r15
bc7b:	mul    %r11
bc7e:	xor    %r12,%r12
bc81:	add    %rax,%r14
bc84:	mov    0x10(%rsi,%rbx,8),%rax
bc89:	adc    %rdx,%r15
bc8c:	mul    %r10
bc8f:	add    0x8(%rdi,%rbx,8),%r13
bc94:	adc    %rax,%r14
bc97:	mov    0x10(%rsi,%rbx,8),%rax
bc9c:	adc    %rdx,%r15
bc9f:	mov    %r13,0x8(%rdi,%rbx,8)
bca4:	adc    $0x0,%r12
bca8:	mul    %r11
bcab:	xor    %r13,%r13
bcae:	add    %rax,%r15
bcb1:	mov    0x18(%rsi,%rbx,8),%rax
bcb6:	adc    %rdx,%r12
bcb9:	mul    %r10
bcbc:	add    0x10(%rdi,%rbx,8),%r14
bcc1:	adc    %rax,%r15
bcc4:	mov    0x18(%rsi,%rbx,8),%rax
bcc9:	adc    %rdx,%r12
bccc:	mov    %r14,0x10(%rdi,%rbx,8)
bcd1:	adc    $0x0,%r13
bcd5:	mul    %r11
bcd8:	xor    %r14,%r14
bcdb:	add    %rax,%r12
bcde:	mov    0x20(%rsi,%rbx,8),%rax
bce3:	adc    %rdx,%r13
bce6:	mul    %r10
bce9:	add    0x18(%rdi,%rbx,8),%r15
bcee:	adc    %rax,%r12
bcf1:	mov    0x20(%rsi,%rbx,8),%rax
bcf6:	adc    %rdx,%r13
bcf9:	mov    %r15,0x18(%rdi,%rbx,8)
bcfe:	adc    $0x0,%r14
bd02:	add    $0x4,%rbx
bd06:	jae    bc50 <..@123.L_1>
bd0c:	mul    %r11
bd0f:	xor    %r15,%r15
bd12:	add    %rax,%r13
bd15:	mov    0x18(%rsi),%rax
bd19:	adc    %rdx,%r14
bd1c:	mul    %r10
bd1f:	add    0x10(%rdi),%r12
bd23:	adc    %rax,%r13
bd26:	mov    0x18(%rsi),%rax
bd2a:	adc    %rdx,%r14
bd2d:	mov    %r12,0x10(%rdi)
bd31:	adc    $0x0,%r15
bd35:	mul    %r11
bd38:	add    $0x10,%rdi
bd3c:	mov    (%rsp),%rbx
bd40:	add    0x8(%rdi),%r13
bd44:	mov    %r13,0x8(%rdi)
bd48:	adc    %rax,%r14
bd4b:	mov    (%rsi,%rbx,8),%rax
bd4f:	adc    %r15,%rdx
bd52:	mov    %r14,0x10(%rdi)
bd56:	mov    %rdx,0x18(%rdi)
bd5a:	add    $0x10,%rcx
bd5e:	jmpq   bc20 <cpMulAdc_BNU_school.mla2x4n_2>
bd63:	mul    %r11
bd66:	add    $0x10,%rdi
bd6a:	mov    (%rsp),%rbx
bd6e:	mov    %r12,0x8(%rdi)
bd72:	add    %rax,%r13
bd75:	mov    (%rsi,%rbx,8),%rax
bd79:	adc    %r14,%rdx
bd7c:	mov    %r13,0x10(%rdi)
bd80:	mov    %rdx,0x18(%rdi)
bd84:	add    $0x10,%rcx
bd88:	nopl   0x0(%rax,%rax,1)
bd90:	sub    $0x2,%r8
bd94:	je     beaa <cpMulAdc_BNU_school.quit>
bd9a:	mov    (%rcx),%r10
bd9d:	mul    %r10
bda0:	mov    0x8(%rcx),%r11
bda4:	xor    %r14,%r14
bda7:	mov    %rax,%r12
bdaa:	mov    (%rsi,%rbx,8),%rax
bdae:	mov    %rdx,%r13
bdb1:	nopl   0x0(%rax,%rax,1)
bdb9:	nopl   0x0(%rax)
bdc0:	mul    %r11
bdc3:	xor    %r15,%r15
bdc6:	add    %rax,%r13
bdc9:	mov    0x8(%rsi,%rbx,8),%rax
bdce:	adc    %rdx,%r14
bdd1:	mul    %r10
bdd4:	add    (%rdi,%rbx,8),%r12
bdd8:	adc    %rax,%r13
bddb:	mov    0x8(%rsi,%rbx,8),%rax
bde0:	adc    %rdx,%r14
bde3:	mov    %r12,(%rdi,%rbx,8)
bde7:	adc    $0x0,%r15
bdeb:	mul    %r11
bdee:	xor    %r12,%r12
bdf1:	add    %rax,%r14
bdf4:	mov    0x10(%rsi,%rbx,8),%rax
bdf9:	adc    %rdx,%r15
bdfc:	mul    %r10
bdff:	add    0x8(%rdi,%rbx,8),%r13
be04:	adc    %rax,%r14
be07:	mov    0x10(%rsi,%rbx,8),%rax
be0c:	adc    %rdx,%r15
be0f:	mov    %r13,0x8(%rdi,%rbx,8)
be14:	adc    $0x0,%r12
be18:	mul    %r11
be1b:	xor    %r13,%r13
be1e:	add    %rax,%r15
be21:	mov    0x18(%rsi,%rbx,8),%rax
be26:	adc    %rdx,%r12
be29:	mul    %r10
be2c:	add    0x10(%rdi,%rbx,8),%r14
be31:	adc    %rax,%r15
be34:	mov    0x18(%rsi,%rbx,8),%rax
be39:	adc    %rdx,%r12
be3c:	mov    %r14,0x10(%rdi,%rbx,8)
be41:	adc    $0x0,%r13
be45:	mul    %r11
be48:	xor    %r14,%r14
be4b:	add    %rax,%r12
be4e:	mov    0x20(%rsi,%rbx,8),%rax
be53:	adc    %rdx,%r13
be56:	mul    %r10
be59:	add    0x18(%rdi,%rbx,8),%r15
be5e:	adc    %rax,%r12
be61:	mov    0x20(%rsi,%rbx,8),%rax
be66:	adc    %rdx,%r13
be69:	mov    %r15,0x18(%rdi,%rbx,8)
be6e:	adc    $0x0,%r14
be72:	add    $0x4,%rbx
be76:	jae    bdc0 <..@133.L_1>
be7c:	mul    %r11
be7f:	add    $0x10,%rdi
be83:	mov    (%rsp),%rbx
be87:	add    0x8(%rdi),%r12
be8b:	mov    %r12,0x8(%rdi)
be8f:	adc    %rax,%r13
be92:	mov    (%rsi,%rbx,8),%rax
be96:	adc    %r14,%rdx
be99:	mov    %r13,0x10(%rdi)
be9d:	mov    %rdx,0x18(%rdi)
bea1:	add    $0x10,%rcx
bea5:	jmpq   bd90 <cpMulAdc_BNU_school.mla2x4n_1>
beaa:	mov    %rdx,%rax
bead:	add    $0x18,%rsp
beb1:	pop    %r15
beb3:	pop    %r14
beb5:	pop    %r13
beb7:	pop    %r12
beb9:	pop    %rbp
beba:	pop    %rbx
bebb:	retq   
bebc:	nopl   0x0(%rax)
bec0:	endbr64 
bec4:	push   %rbx
bec5:	push   %rbp
bec6:	push   %r12
bec8:	push   %r13
beca:	push   %r14
becc:	push   %r15
bece:	sub    $0x28,%rsp
bed2:	cmp    $0x4,%edx
bed5:	jg     c140 <cpSqrAdc_BNU_school.more_then_4>
bedb:	cmp    $0x3,%edx
bede:	jg     c030 <cpSqrAdc_BNU_school.SQR4>
bee4:	je     bf80 <cpSqrAdc_BNU_school.SQR3>
beea:	jp     bf20 <cpSqrAdc_BNU_school.SQR2>
beec:	nopl   0x0(%rax)
bef0:	mov    (%rsi),%rax
bef3:	mul    %rax
bef6:	mov    %rax,(%rdi)
bef9:	mov    %rdx,%rax
befc:	mov    %rdx,0x8(%rdi)
bf00:	mov    %rdx,%rax
bf03:	add    $0x28,%rsp
bf07:	pop    %r15
bf09:	pop    %r14
bf0b:	pop    %r13
bf0d:	pop    %r12
bf0f:	pop    %rbp
bf10:	pop    %rbx
bf11:	retq   
bf12:	nopl   0x0(%rax,%rax,1)
bf1a:	nopw   0x0(%rax,%rax,1)
bf20:	mov    (%rsi),%rax
bf23:	mulq   0x8(%rsi)
bf27:	xor    %rcx,%rcx
bf2a:	mov    %rax,%r10
bf2d:	mov    %rdx,%r11
bf30:	mov    (%rsi),%rax
bf33:	mul    %rax
bf36:	add    %r10,%r10
bf39:	adc    %r11,%r11
bf3c:	adc    $0x0,%rcx
bf40:	mov    %rax,%r8
bf43:	mov    %rdx,%r9
bf46:	mov    0x8(%rsi),%rax
bf4a:	mul    %rax
bf4d:	mov    %r8,(%rdi)
bf50:	add    %r10,%r9
bf53:	mov    %r9,0x8(%rdi)
bf57:	adc    %r11,%rax
bf5a:	mov    %rax,0x10(%rdi)
bf5e:	adc    %rcx,%rdx
bf61:	mov    %rdx,0x18(%rdi)
bf65:	mov    %rdx,%rax
bf68:	add    $0x28,%rsp
bf6c:	pop    %r15
bf6e:	pop    %r14
bf70:	pop    %r13
bf72:	pop    %r12
bf74:	pop    %rbp
bf75:	pop    %rbx
bf76:	retq   
bf77:	nopl   0x0(%rax,%rax,1)
bf7f:	nop
bf80:	mov    (%rsi),%r8
bf83:	mov    0x8(%rsi),%r9
bf87:	mov    0x10(%rsi),%r10
bf8b:	mov    %r8,%rcx
bf8e:	mov    %r9,%rax
bf91:	mul    %rcx
bf94:	mov    %rax,%r8
bf97:	mov    %rdx,%r9
bf9a:	mov    %r10,%rax
bf9d:	mul    %rcx
bfa0:	add    %rax,%r9
bfa3:	adc    $0x0,%rdx
bfa7:	mov    %rdx,%r10
bfaa:	mov    0x8(%rsi),%rax
bfae:	mulq   0x10(%rsi)
bfb2:	xor    %r11,%r11
bfb5:	add    %rax,%r10
bfb8:	adc    %rdx,%r11
bfbb:	xor    %rcx,%rcx
bfbe:	add    %r8,%r8
bfc1:	adc    %r9,%r9
bfc4:	adc    %r10,%r10
bfc7:	adc    %r11,%r11
bfca:	adc    %rcx,%rcx
bfcd:	mov    (%rsi),%rax
bfd0:	mul    %rax
bfd3:	mov    %rax,%r12
bfd6:	mov    %rdx,%r13
bfd9:	mov    0x8(%rsi),%rax
bfdd:	mul    %rax
bfe0:	mov    %rax,%r14
bfe3:	mov    %rdx,%r15
bfe6:	mov    0x10(%rsi),%rax
bfea:	mul    %rax
bfed:	mov    %r12,(%rdi)
bff0:	add    %r8,%r13
bff3:	mov    %r13,0x8(%rdi)
bff7:	adc    %r9,%r14
bffa:	mov    %r14,0x10(%rdi)
bffe:	adc    %r10,%r15
c001:	mov    %r15,0x18(%rdi)
c005:	adc    %r11,%rax
c008:	mov    %rax,0x20(%rdi)
c00c:	adc    %rcx,%rdx
c00f:	mov    %rdx,0x28(%rdi)
c013:	mov    %rdx,%rax
c016:	add    $0x28,%rsp
c01a:	pop    %r15
c01c:	pop    %r14
c01e:	pop    %r13
c020:	pop    %r12
c022:	pop    %rbp
c023:	pop    %rbx
c024:	retq   
c025:	nopl   0x0(%rax,%rax,1)
c02d:	nopl   (%rax)
c030:	mov    (%rsi),%r8
c033:	mov    0x8(%rsi),%r9
c037:	mov    0x10(%rsi),%r10
c03b:	mov    0x18(%rsi),%r11
c03f:	mov    %r8,%rcx
c042:	mov    %r9,%rax
c045:	mul    %rcx
c048:	mov    %rax,%r8
c04b:	mov    %rdx,%r9
c04e:	mov    %r10,%rax
c051:	mul    %rcx
c054:	add    %rax,%r9
c057:	adc    $0x0,%rdx
c05b:	mov    %rdx,%r10
c05e:	mov    %r11,%rax
c061:	mul    %rcx
c064:	add    %rax,%r10
c067:	adc    $0x0,%rdx
c06b:	mov    %rdx,%r11
c06e:	mov    0x8(%rsi),%rcx
c072:	mov    0x10(%rsi),%rax
c076:	mul    %rcx
c079:	xor    %r12,%r12
c07c:	add    %rax,%r10
c07f:	mov    0x18(%rsi),%rax
c083:	adc    %rdx,%r11
c086:	adc    $0x0,%r12
c08a:	mul    %rcx
c08d:	mov    0x10(%rsi),%rcx
c091:	add    %rax,%r11
c094:	mov    0x18(%rsi),%rax
c098:	adc    %rdx,%r12
c09b:	mul    %rcx
c09e:	xor    %r13,%r13
c0a1:	add    %rax,%r12
c0a4:	adc    %rdx,%r13
c0a7:	mov    (%rsi),%rax
c0aa:	xor    %rcx,%rcx
c0ad:	add    %r8,%r8
c0b0:	adc    %r9,%r9
c0b3:	adc    %r10,%r10
c0b6:	adc    %r11,%r11
c0b9:	adc    %r12,%r12
c0bc:	adc    %r13,%r13
c0bf:	adc    $0x0,%rcx
c0c3:	mul    %rax
c0c6:	mov    %rax,(%rdi)
c0c9:	mov    0x8(%rsi),%rax
c0cd:	mov    %rdx,%rbp
c0d0:	mul    %rax
c0d3:	add    %rbp,%r8
c0d6:	adc    %rax,%r9
c0d9:	mov    0x10(%rsi),%rax
c0dd:	mov    %r8,0x8(%rdi)
c0e1:	adc    $0x0,%rdx
c0e5:	mov    %r9,0x10(%rdi)
c0e9:	mov    %rdx,%rbp
c0ec:	mul    %rax
c0ef:	add    %rbp,%r10
c0f2:	adc    %rax,%r11
c0f5:	mov    0x18(%rsi),%rax
c0f9:	mov    %r10,0x18(%rdi)
c0fd:	adc    $0x0,%rdx
c101:	mov    %r11,0x20(%rdi)
c105:	mov    %rdx,%rbp
c108:	mul    %rax
c10b:	add    %rbp,%r12
c10e:	adc    %rax,%r13
c111:	mov    %r12,0x28(%rdi)
c115:	adc    $0x0,%rdx
c119:	mov    %r13,0x30(%rdi)
c11d:	add    %rcx,%rdx
c120:	mov    %rdx,0x38(%rdi)
c124:	mov    %rdx,%rax
c127:	add    $0x28,%rsp
c12b:	pop    %r15
c12d:	pop    %r14
c12f:	pop    %r13
c131:	pop    %r12
c133:	pop    %rbp
c134:	pop    %rbx
c135:	retq   
c136:	nopl   0x0(%rax,%rax,1)
c13e:	xchg   %ax,%ax
c140:	cmp    $0x8,%edx
c143:	jg     cb90 <cpSqrAdc_BNU_school.general_case>
c149:	cmp    $0x7,%edx
c14c:	jg     c7f0 <cpSqrAdc_BNU_school.SQR8>
c152:	je     c510 <cpSqrAdc_BNU_school.SQR7>
c158:	jp     c2f0 <cpSqrAdc_BNU_school.SQR6>
c15e:	xchg   %ax,%ax
c160:	mov    (%rsi),%r8
c163:	mov    0x8(%rsi),%r9
c167:	mov    0x10(%rsi),%r10
c16b:	mov    0x18(%rsi),%r11
c16f:	mov    0x20(%rsi),%r12
c173:	mov    %r8,%rcx
c176:	mov    %r9,%rax
c179:	mul    %rcx
c17c:	mov    %rax,%r8
c17f:	mov    %rdx,%r9
c182:	mov    %r10,%rax
c185:	mul    %rcx
c188:	add    %rax,%r9
c18b:	adc    $0x0,%rdx
c18f:	mov    %rdx,%r10
c192:	mov    %r11,%rax
c195:	mul    %rcx
c198:	add    %rax,%r10
c19b:	adc    $0x0,%rdx
c19f:	mov    %rdx,%r11
c1a2:	mov    %r12,%rax
c1a5:	mul    %rcx
c1a8:	add    %rax,%r11
c1ab:	adc    $0x0,%rdx
c1af:	mov    %rdx,%r12
c1b2:	mov    0x8(%rsi),%rcx
c1b6:	mov    0x10(%rsi),%rax
c1ba:	mul    %rcx
c1bd:	add    %rax,%r10
c1c0:	adc    $0x0,%rdx
c1c4:	mov    %rdx,%rbp
c1c7:	mov    0x18(%rsi),%rax
c1cb:	mul    %rcx
c1ce:	add    %rax,%r11
c1d1:	adc    $0x0,%rdx
c1d5:	add    %rbp,%r11
c1d8:	adc    $0x0,%rdx
c1dc:	mov    %rdx,%rbp
c1df:	mov    0x20(%rsi),%rax
c1e3:	mul    %rcx
c1e6:	add    %rax,%r12
c1e9:	adc    $0x0,%rdx
c1ed:	add    %rbp,%r12
c1f0:	adc    $0x0,%rdx
c1f4:	mov    %rdx,%rbp
c1f7:	mov    %rbp,%r13
c1fa:	mov    0x10(%rsi),%rcx
c1fe:	mov    0x18(%rsi),%rax
c202:	mul    %rcx
c205:	xor    %r14,%r14
c208:	add    %rax,%r12
c20b:	mov    0x20(%rsi),%rax
c20f:	adc    %rdx,%r13
c212:	adc    $0x0,%r14
c216:	mul    %rcx
c219:	mov    0x18(%rsi),%rcx
c21d:	add    %rax,%r13
c220:	mov    0x20(%rsi),%rax
c224:	adc    %rdx,%r14
c227:	mul    %rcx
c22a:	xor    %r15,%r15
c22d:	add    %rax,%r14
c230:	adc    %rdx,%r15
c233:	mov    (%rsi),%rax
c236:	xor    %rcx,%rcx
c239:	add    %r8,%r8
c23c:	adc    %r9,%r9
c23f:	adc    %r10,%r10
c242:	adc    %r11,%r11
c245:	adc    %r12,%r12
c248:	adc    %r13,%r13
c24b:	adc    %r14,%r14
c24e:	adc    %r15,%r15
c251:	adc    $0x0,%rcx
c255:	mul    %rax
c258:	mov    %rax,(%rdi)
c25b:	mov    0x8(%rsi),%rax
c25f:	mov    %rdx,%rbp
c262:	mul    %rax
c265:	add    %rbp,%r8
c268:	adc    %rax,%r9
c26b:	mov    0x10(%rsi),%rax
c26f:	mov    %r8,0x8(%rdi)
c273:	adc    $0x0,%rdx
c277:	mov    %r9,0x10(%rdi)
c27b:	mov    %rdx,%rbp
c27e:	mul    %rax
c281:	add    %rbp,%r10
c284:	adc    %rax,%r11
c287:	mov    0x18(%rsi),%rax
c28b:	mov    %r10,0x18(%rdi)
c28f:	adc    $0x0,%rdx
c293:	mov    %r11,0x20(%rdi)
c297:	mov    %rdx,%rbp
c29a:	mul    %rax
c29d:	add    %rbp,%r12
c2a0:	adc    %rax,%r13
c2a3:	mov    0x20(%rsi),%rax
c2a7:	mov    %r12,0x28(%rdi)
c2ab:	adc    $0x0,%rdx
c2af:	mov    %r13,0x30(%rdi)
c2b3:	mov    %rdx,%rbp
c2b6:	mul    %rax
c2b9:	add    %rbp,%r14
c2bc:	adc    %rax,%r15
c2bf:	mov    %r14,0x38(%rdi)
c2c3:	adc    $0x0,%rdx
c2c7:	mov    %r15,0x40(%rdi)
c2cb:	add    %rcx,%rdx
c2ce:	mov    %rdx,0x48(%rdi)
c2d2:	mov    %rdx,%rax
c2d5:	add    $0x28,%rsp
c2d9:	pop    %r15
c2db:	pop    %r14
c2dd:	pop    %r13
c2df:	pop    %r12
c2e1:	pop    %rbp
c2e2:	pop    %rbx
c2e3:	retq   
c2e4:	nopl   0x0(%rax,%rax,1)
c2ec:	nopl   0x0(%rax)
c2f0:	mov    (%rsi),%r8
c2f3:	mov    0x8(%rsi),%r9
c2f7:	mov    0x10(%rsi),%r10
c2fb:	mov    0x18(%rsi),%r11
c2ff:	mov    0x20(%rsi),%r12
c303:	mov    0x28(%rsi),%r13
c307:	mov    %r8,%rcx
c30a:	mov    %r9,%rax
c30d:	mul    %rcx
c310:	mov    %rax,%r8
c313:	mov    %rdx,%r9
c316:	mov    %r10,%rax
c319:	mul    %rcx
c31c:	add    %rax,%r9
c31f:	adc    $0x0,%rdx
c323:	mov    %rdx,%r10
c326:	mov    %r11,%rax
c329:	mul    %rcx
c32c:	add    %rax,%r10
c32f:	adc    $0x0,%rdx
c333:	mov    %rdx,%r11
c336:	mov    %r12,%rax
c339:	mul    %rcx
c33c:	add    %rax,%r11
c33f:	adc    $0x0,%rdx
c343:	mov    %rdx,%r12
c346:	mov    %r13,%rax
c349:	mul    %rcx
c34c:	add    %rax,%r12
c34f:	adc    $0x0,%rdx
c353:	mov    %rdx,%r13
c356:	mov    0x8(%rsi),%rcx
c35a:	mov    0x10(%rsi),%rax
c35e:	mul    %rcx
c361:	add    %rax,%r10
c364:	adc    $0x0,%rdx
c368:	mov    %rdx,%rbp
c36b:	mov    0x18(%rsi),%rax
c36f:	mul    %rcx
c372:	add    %rax,%r11
c375:	adc    $0x0,%rdx
c379:	add    %rbp,%r11
c37c:	adc    $0x0,%rdx
c380:	mov    %rdx,%rbp
c383:	mov    0x20(%rsi),%rax
c387:	mul    %rcx
c38a:	add    %rax,%r12
c38d:	adc    $0x0,%rdx
c391:	add    %rbp,%r12
c394:	adc    $0x0,%rdx
c398:	mov    %rdx,%rbp
c39b:	mov    0x28(%rsi),%rax
c39f:	mul    %rcx
c3a2:	add    %rax,%r13
c3a5:	adc    $0x0,%rdx
c3a9:	add    %rbp,%r13
c3ac:	adc    $0x0,%rdx
c3b0:	mov    %rdx,%rbp
c3b3:	mov    %rbp,%r14
c3b6:	mov    0x10(%rsi),%rcx
c3ba:	mov    0x18(%rsi),%rax
c3be:	mul    %rcx
c3c1:	add    %rax,%r12
c3c4:	adc    $0x0,%rdx
c3c8:	mov    %rdx,%rbp
c3cb:	mov    0x20(%rsi),%rax
c3cf:	mul    %rcx
c3d2:	add    %rax,%r13
c3d5:	adc    $0x0,%rdx
c3d9:	add    %rbp,%r13
c3dc:	adc    $0x0,%rdx
c3e0:	mov    %rdx,%rbp
c3e3:	mov    0x28(%rsi),%rax
c3e7:	mul    %rcx
c3ea:	add    %rax,%r14
c3ed:	adc    $0x0,%rdx
c3f1:	add    %rbp,%r14
c3f4:	adc    $0x0,%rdx
c3f8:	mov    %rdx,%rbp
c3fb:	mov    %rbp,%r15
c3fe:	mov    0x18(%rsi),%rcx
c402:	mov    0x20(%rsi),%rax
c406:	mul    %rcx
c409:	xor    %rbx,%rbx
c40c:	add    %rax,%r14
c40f:	mov    0x28(%rsi),%rax
c413:	adc    %rdx,%r15
c416:	adc    $0x0,%rbx
c41a:	mul    %rcx
c41d:	mov    0x20(%rsi),%rcx
c421:	add    %rax,%r15
c424:	mov    0x28(%rsi),%rax
c428:	adc    %rdx,%rbx
c42b:	mul    %rcx
c42e:	xor    %rbp,%rbp
c431:	add    %rax,%rbx
c434:	adc    %rdx,%rbp
c437:	mov    (%rsi),%rax
c43a:	xor    %rcx,%rcx
c43d:	add    %r8,%r8
c440:	adc    %r9,%r9
c443:	adc    %r10,%r10
c446:	adc    %r11,%r11
c449:	adc    %r12,%r12
c44c:	adc    %r13,%r13
c44f:	adc    %r14,%r14
c452:	adc    %r15,%r15
c455:	adc    %rbx,%rbx
c458:	adc    %rbp,%rbp
c45b:	adc    $0x0,%rcx
c45f:	mov    %rcx,(%rsp)
c463:	mul    %rax
c466:	mov    %rax,(%rdi)
c469:	mov    0x8(%rsi),%rax
c46d:	mov    %rdx,%rcx
c470:	mul    %rax
c473:	add    %rcx,%r8
c476:	adc    %rax,%r9
c479:	mov    0x10(%rsi),%rax
c47d:	mov    %r8,0x8(%rdi)
c481:	adc    $0x0,%rdx
c485:	mov    %r9,0x10(%rdi)
c489:	mov    %rdx,%rcx
c48c:	mul    %rax
c48f:	add    %rcx,%r10
c492:	adc    %rax,%r11
c495:	mov    0x18(%rsi),%rax
c499:	mov    %r10,0x18(%rdi)
c49d:	adc    $0x0,%rdx
c4a1:	mov    %r11,0x20(%rdi)
c4a5:	mov    %rdx,%rcx
c4a8:	mul    %rax
c4ab:	add    %rcx,%r12
c4ae:	adc    %rax,%r13
c4b1:	mov    0x20(%rsi),%rax
c4b5:	mov    %r12,0x28(%rdi)
c4b9:	adc    $0x0,%rdx
c4bd:	mov    %r13,0x30(%rdi)
c4c1:	mov    %rdx,%rcx
c4c4:	mul    %rax
c4c7:	add    %rcx,%r14
c4ca:	adc    %rax,%r15
c4cd:	mov    0x28(%rsi),%rax
c4d1:	mov    %r14,0x38(%rdi)
c4d5:	adc    $0x0,%rdx
c4d9:	mov    %r15,0x40(%rdi)
c4dd:	mov    %rdx,%rcx
c4e0:	mul    %rax
c4e3:	add    %rcx,%rbx
c4e6:	adc    %rax,%rbp
c4e9:	mov    %rbx,0x48(%rdi)
c4ed:	adc    (%rsp),%rdx
c4f1:	mov    %rbp,0x50(%rdi)
c4f5:	mov    %rdx,0x58(%rdi)
c4f9:	mov    %rdx,%rax
c4fc:	add    $0x28,%rsp
c500:	pop    %r15
c502:	pop    %r14
c504:	pop    %r13
c506:	pop    %r12
c508:	pop    %rbp
c509:	pop    %rbx
c50a:	retq   
c50b:	nopl   0x0(%rax,%rax,1)
c510:	mov    (%rsi),%r8
c513:	mov    0x8(%rsi),%r9
c517:	mov    0x10(%rsi),%r10
c51b:	mov    0x18(%rsi),%r11
c51f:	mov    0x20(%rsi),%r12
c523:	mov    0x28(%rsi),%r13
c527:	mov    0x30(%rsi),%r14
c52b:	mov    %r8,%rcx
c52e:	mov    %r9,%rax
c531:	mul    %rcx
c534:	mov    %rax,%r8
c537:	mov    %rdx,%r9
c53a:	mov    %r10,%rax
c53d:	mul    %rcx
c540:	add    %rax,%r9
c543:	adc    $0x0,%rdx
c547:	mov    %rdx,%r10
c54a:	mov    %r11,%rax
c54d:	mul    %rcx
c550:	add    %rax,%r10
c553:	adc    $0x0,%rdx
c557:	mov    %rdx,%r11
c55a:	mov    %r12,%rax
c55d:	mul    %rcx
c560:	add    %rax,%r11
c563:	adc    $0x0,%rdx
c567:	mov    %rdx,%r12
c56a:	mov    %r13,%rax
c56d:	mul    %rcx
c570:	add    %rax,%r12
c573:	adc    $0x0,%rdx
c577:	mov    %rdx,%r13
c57a:	mov    %r14,%rax
c57d:	mul    %rcx
c580:	add    %rax,%r13
c583:	adc    $0x0,%rdx
c587:	mov    %rdx,%r14
c58a:	mov    0x8(%rsi),%rcx
c58e:	mov    0x10(%rsi),%rax
c592:	mul    %rcx
c595:	add    %rax,%r10
c598:	adc    $0x0,%rdx
c59c:	mov    %rdx,%rbp
c59f:	mov    0x18(%rsi),%rax
c5a3:	mul    %rcx
c5a6:	add    %rax,%r11
c5a9:	adc    $0x0,%rdx
c5ad:	add    %rbp,%r11
c5b0:	adc    $0x0,%rdx
c5b4:	mov    %rdx,%rbp
c5b7:	mov    0x20(%rsi),%rax
c5bb:	mul    %rcx
c5be:	add    %rax,%r12
c5c1:	adc    $0x0,%rdx
c5c5:	add    %rbp,%r12
c5c8:	adc    $0x0,%rdx
c5cc:	mov    %rdx,%rbp
c5cf:	mov    0x28(%rsi),%rax
c5d3:	mul    %rcx
c5d6:	add    %rax,%r13
c5d9:	adc    $0x0,%rdx
c5dd:	add    %rbp,%r13
c5e0:	adc    $0x0,%rdx
c5e4:	mov    %rdx,%rbp
c5e7:	mov    0x30(%rsi),%rax
c5eb:	mul    %rcx
c5ee:	add    %rax,%r14
c5f1:	adc    $0x0,%rdx
c5f5:	add    %rbp,%r14
c5f8:	adc    $0x0,%rdx
c5fc:	mov    %rdx,%rbp
c5ff:	mov    %rbp,%r15
c602:	mov    0x10(%rsi),%rcx
c606:	xor    %rbx,%rbx
c609:	mov    0x18(%rsi),%rax
c60d:	mul    %rcx
c610:	add    %rax,%r12
c613:	adc    $0x0,%rdx
c617:	mov    %rdx,%rbp
c61a:	mov    0x20(%rsi),%rax
c61e:	mul    %rcx
c621:	add    %rax,%r13
c624:	adc    $0x0,%rdx
c628:	add    %rbp,%r13
c62b:	adc    $0x0,%rdx
c62f:	mov    %rdx,%rbp
c632:	mov    0x28(%rsi),%rax
c636:	mul    %rcx
c639:	add    %rax,%r14
c63c:	adc    $0x0,%rdx
c640:	add    %rbp,%r14
c643:	adc    $0x0,%rdx
c647:	mov    %rdx,%rbp
c64a:	add    %rbp,%r15
c64d:	adc    $0x0,%rbx
c651:	mov    0x18(%rsi),%rax
c655:	mulq   0x20(%rsi)
c659:	add    %rax,%r14
c65c:	adc    $0x0,%rdx
c660:	add    %rdx,%r15
c663:	adc    $0x0,%rbx
c667:	mov    (%rsi),%rax
c66a:	xor    %rcx,%rcx
c66d:	add    %r8,%r8
c670:	adc    %r9,%r9
c673:	adc    %r10,%r10
c676:	adc    %r11,%r11
c679:	adc    %r12,%r12
c67c:	adc    %r13,%r13
c67f:	adc    %r14,%r14
c682:	adc    $0x0,%rcx
c686:	mul    %rax
c689:	mov    %rax,(%rdi)
c68c:	mov    0x8(%rsi),%rax
c690:	mov    %rdx,%rbp
c693:	mul    %rax
c696:	add    %rbp,%r8
c699:	adc    %rax,%r9
c69c:	mov    0x10(%rsi),%rax
c6a0:	mov    %r8,0x8(%rdi)
c6a4:	adc    $0x0,%rdx
c6a8:	mov    %r9,0x10(%rdi)
c6ac:	mov    %rdx,%rbp
c6af:	mul    %rax
c6b2:	add    %rbp,%r10
c6b5:	adc    %rax,%r11
c6b8:	mov    0x18(%rsi),%rax
c6bc:	mov    %r10,0x18(%rdi)
c6c0:	adc    $0x0,%rdx
c6c4:	mov    %r11,0x20(%rdi)
c6c8:	mov    %rdx,%rbp
c6cb:	mul    %rax
c6ce:	add    %rbp,%r12
c6d1:	adc    %rax,%r13
c6d4:	mov    %r12,0x28(%rdi)
c6d8:	adc    %rdx,%r14
c6db:	mov    %r13,0x30(%rdi)
c6df:	adc    $0x0,%rcx
c6e3:	mov    %r14,0x38(%rdi)
c6e7:	mov    0x10(%rsi),%rax
c6eb:	xor    %r8,%r8
c6ee:	mulq   0x30(%rsi)
c6f2:	add    %rax,%r15
c6f5:	adc    $0x0,%rdx
c6f9:	add    %rdx,%rbx
c6fc:	adc    $0x0,%r8
c700:	mov    0x18(%rsi),%r14
c704:	mov    0x28(%rsi),%rax
c708:	mul    %r14
c70b:	add    %rax,%r15
c70e:	mov    0x30(%rsi),%rax
c712:	adc    %rdx,%rbx
c715:	adc    $0x0,%r8
c719:	mul    %r14
c71c:	add    %rax,%rbx
c71f:	adc    %rdx,%r8
c722:	mov    0x20(%rsi),%r14
c726:	xor    %r9,%r9
c729:	mov    0x28(%rsi),%rax
c72d:	mul    %r14
c730:	add    %rax,%rbx
c733:	mov    0x30(%rsi),%rax
c737:	adc    %rdx,%r8
c73a:	adc    $0x0,%r9
c73e:	mul    %r14
c741:	add    %rax,%r8
c744:	adc    %rdx,%r9
c747:	mov    0x28(%rsi),%r14
c74b:	xor    %r10,%r10
c74e:	mov    0x30(%rsi),%rax
c752:	mul    %r14
c755:	add    %rax,%r9
c758:	adc    %rdx,%r10
c75b:	mov    0x20(%rsi),%rax
c75f:	xor    %r11,%r11
c762:	add    %r15,%r15
c765:	adc    %rbx,%rbx
c768:	adc    %r8,%r8
c76b:	adc    %r9,%r9
c76e:	adc    %r10,%r10
c771:	adc    $0x0,%r11
c775:	mul    %rax
c778:	add    %rcx,%r15
c77b:	adc    $0x0,%rdx
c77f:	xor    %rcx,%rcx
c782:	add    %rax,%r15
c785:	mov    0x28(%rsi),%rax
c789:	adc    %rdx,%rbx
c78c:	mov    %r15,0x40(%rdi)
c790:	adc    $0x0,%rcx
c794:	mov    %rbx,0x48(%rdi)
c798:	mul    %rax
c79b:	add    %rcx,%r8
c79e:	adc    $0x0,%rdx
c7a2:	xor    %rcx,%rcx
c7a5:	add    %rax,%r8
c7a8:	mov    0x30(%rsi),%rax
c7ac:	adc    %rdx,%r9
c7af:	mov    %r8,0x50(%rdi)
c7b3:	adc    $0x0,%rcx
c7b7:	mov    %r9,0x58(%rdi)
c7bb:	mul    %rax
c7be:	add    %rcx,%r10
c7c1:	adc    $0x0,%rdx
c7c5:	add    %rax,%r10
c7c8:	adc    %r11,%rdx
c7cb:	mov    %r10,0x60(%rdi)
c7cf:	mov    %rdx,0x68(%rdi)
c7d3:	mov    %rdx,%rax
c7d6:	add    $0x28,%rsp
c7da:	pop    %r15
c7dc:	pop    %r14
c7de:	pop    %r13
c7e0:	pop    %r12
c7e2:	pop    %rbp
c7e3:	pop    %rbx
c7e4:	retq   
c7e5:	nopl   0x0(%rax,%rax,1)
c7ed:	nopl   (%rax)
c7f0:	mov    (%rsi),%r8
c7f3:	mov    0x8(%rsi),%r9
c7f7:	mov    0x10(%rsi),%r10
c7fb:	mov    0x18(%rsi),%r11
c7ff:	mov    0x20(%rsi),%r12
c803:	mov    0x28(%rsi),%r13
c807:	mov    0x30(%rsi),%r14
c80b:	mov    0x38(%rsi),%r15
c80f:	mov    %r8,%rcx
c812:	mov    %r9,%rax
c815:	mul    %rcx
c818:	mov    %rax,%r8
c81b:	mov    %rdx,%r9
c81e:	mov    %r10,%rax
c821:	mul    %rcx
c824:	add    %rax,%r9
c827:	adc    $0x0,%rdx
c82b:	mov    %rdx,%r10
c82e:	mov    %r11,%rax
c831:	mul    %rcx
c834:	add    %rax,%r10
c837:	adc    $0x0,%rdx
c83b:	mov    %rdx,%r11
c83e:	mov    %r12,%rax
c841:	mul    %rcx
c844:	add    %rax,%r11
c847:	adc    $0x0,%rdx
c84b:	mov    %rdx,%r12
c84e:	mov    %r13,%rax
c851:	mul    %rcx
c854:	add    %rax,%r12
c857:	adc    $0x0,%rdx
c85b:	mov    %rdx,%r13
c85e:	mov    %r14,%rax
c861:	mul    %rcx
c864:	add    %rax,%r13
c867:	adc    $0x0,%rdx
c86b:	mov    %rdx,%r14
c86e:	mov    %r15,%rax
c871:	mul    %rcx
c874:	add    %rax,%r14
c877:	adc    $0x0,%rdx
c87b:	mov    %rdx,%r15
c87e:	mov    0x8(%rsi),%rcx
c882:	xor    %rbx,%rbx
c885:	mov    0x10(%rsi),%rax
c889:	mul    %rcx
c88c:	add    %rax,%r10
c88f:	adc    $0x0,%rdx
c893:	mov    %rdx,%rbp
c896:	mov    0x18(%rsi),%rax
c89a:	mul    %rcx
c89d:	add    %rax,%r11
c8a0:	adc    $0x0,%rdx
c8a4:	add    %rbp,%r11
c8a7:	adc    $0x0,%rdx
c8ab:	mov    %rdx,%rbp
c8ae:	mov    0x20(%rsi),%rax
c8b2:	mul    %rcx
c8b5:	add    %rax,%r12
c8b8:	adc    $0x0,%rdx
c8bc:	add    %rbp,%r12
c8bf:	adc    $0x0,%rdx
c8c3:	mov    %rdx,%rbp
c8c6:	mov    0x28(%rsi),%rax
c8ca:	mul    %rcx
c8cd:	add    %rax,%r13
c8d0:	adc    $0x0,%rdx
c8d4:	add    %rbp,%r13
c8d7:	adc    $0x0,%rdx
c8db:	mov    %rdx,%rbp
c8de:	mov    0x30(%rsi),%rax
c8e2:	mul    %rcx
c8e5:	add    %rax,%r14
c8e8:	adc    $0x0,%rdx
c8ec:	add    %rbp,%r14
c8ef:	adc    $0x0,%rdx
c8f3:	mov    %rdx,%rbp
c8f6:	add    %rbp,%r15
c8f9:	adc    $0x0,%rbx
c8fd:	mov    0x10(%rsi),%rcx
c901:	mov    0x18(%rsi),%rax
c905:	mul    %rcx
c908:	add    %rax,%r12
c90b:	adc    $0x0,%rdx
c90f:	mov    %rdx,%rbp
c912:	mov    0x20(%rsi),%rax
c916:	mul    %rcx
c919:	add    %rax,%r13
c91c:	adc    $0x0,%rdx
c920:	add    %rbp,%r13
c923:	adc    $0x0,%rdx
c927:	mov    %rdx,%rbp
c92a:	mov    0x28(%rsi),%rax
c92e:	mul    %rcx
c931:	add    %rax,%r14
c934:	adc    $0x0,%rdx
c938:	add    %rbp,%r14
c93b:	adc    $0x0,%rdx
c93f:	mov    %rdx,%rbp
c942:	add    %rbp,%r15
c945:	adc    $0x0,%rbx
c949:	mov    0x18(%rsi),%rax
c94d:	mulq   0x20(%rsi)
c951:	add    %rax,%r14
c954:	adc    $0x0,%rdx
c958:	add    %rdx,%r15
c95b:	adc    $0x0,%rbx
c95f:	xor    %rcx,%rcx
c962:	add    %r8,%r8
c965:	adc    %r9,%r9
c968:	adc    %r10,%r10
c96b:	adc    %r11,%r11
c96e:	adc    %r12,%r12
c971:	adc    %r13,%r13
c974:	adc    %r14,%r14
c977:	adc    $0x0,%rcx
c97b:	mov    (%rsi),%rax
c97e:	mul    %rax
c981:	mov    %rax,(%rdi)
c984:	mov    %rdx,%rbp
c987:	mov    0x8(%rsi),%rax
c98b:	mul    %rax
c98e:	add    %rbp,%r8
c991:	adc    %rax,%r9
c994:	mov    %r8,0x8(%rdi)
c998:	adc    $0x0,%rdx
c99c:	mov    %r9,0x10(%rdi)
c9a0:	mov    %rdx,%rbp
c9a3:	mov    0x10(%rsi),%rax
c9a7:	mul    %rax
c9aa:	mov    %rax,%r8
c9ad:	mov    %rdx,%r9
c9b0:	mov    0x18(%rsi),%rax
c9b4:	mul    %rax
c9b7:	add    %rbp,%r10
c9ba:	adc    %r8,%r11
c9bd:	mov    %r10,0x18(%rdi)
c9c1:	adc    %r9,%r12
c9c4:	mov    %r11,0x20(%rdi)
c9c8:	adc    %rax,%r13
c9cb:	mov    %r12,0x28(%rdi)
c9cf:	adc    %rdx,%r14
c9d2:	mov    %r13,0x30(%rdi)
c9d6:	adc    $0x0,%rcx
c9da:	mov    %r14,0x38(%rdi)
c9de:	mov    0x8(%rsi),%rax
c9e2:	xor    %r8,%r8
c9e5:	mulq   0x38(%rsi)
c9e9:	add    %rax,%r15
c9ec:	adc    $0x0,%rdx
c9f0:	add    %rdx,%rbx
c9f3:	adc    $0x0,%r8
c9f7:	mov    0x10(%rsi),%r14
c9fb:	mov    0x30(%rsi),%rax
c9ff:	mul    %r14
ca02:	add    %rax,%r15
ca05:	adc    $0x0,%rdx
ca09:	add    %rdx,%rbx
ca0c:	adc    $0x0,%r8
ca10:	mov    0x38(%rsi),%rax
ca14:	xor    %r9,%r9
ca17:	mul    %r14
ca1a:	add    %rax,%rbx
ca1d:	adc    $0x0,%rdx
ca21:	add    %rdx,%r8
ca24:	adc    $0x0,%r9
ca28:	mov    0x18(%rsi),%r14
ca2c:	mov    0x28(%rsi),%rax
ca30:	mul    %r14
ca33:	add    %rax,%r15
ca36:	adc    $0x0,%rdx
ca3a:	add    %rdx,%rbx
ca3d:	adc    $0x0,%r8
ca41:	adc    $0x0,%r9
ca45:	mov    0x30(%rsi),%rax
ca49:	mul    %r14
ca4c:	add    %rax,%rbx
ca4f:	adc    $0x0,%rdx
ca53:	add    %rdx,%r8
ca56:	adc    $0x0,%r9
ca5a:	mov    0x38(%rsi),%rax
ca5e:	mul    %r14
ca61:	add    %rax,%r8
ca64:	adc    $0x0,%rdx
ca68:	add    %rdx,%r9
ca6b:	mov    0x20(%rsi),%r14
ca6f:	mov    0x28(%rsi),%rax
ca73:	mul    %r14
ca76:	add    %rax,%rbx
ca79:	adc    $0x0,%rdx
ca7d:	mov    %rdx,%r10
ca80:	mov    0x30(%rsi),%rax
ca84:	mul    %r14
ca87:	add    %rax,%r8
ca8a:	adc    $0x0,%rdx
ca8e:	add    %r10,%r8
ca91:	adc    $0x0,%rdx
ca95:	mov    %rdx,%r10
ca98:	mov    0x38(%rsi),%rax
ca9c:	mul    %r14
ca9f:	add    %rax,%r9
caa2:	adc    $0x0,%rdx
caa6:	add    %r10,%r9
caa9:	adc    $0x0,%rdx
caad:	mov    %rdx,%r10
cab0:	mov    0x28(%rsi),%r14
cab4:	mov    0x30(%rsi),%rax
cab8:	mul    %r14
cabb:	add    %rax,%r9
cabe:	adc    $0x0,%rdx
cac2:	mov    %rdx,%r11
cac5:	mov    0x38(%rsi),%rax
cac9:	mul    %r14
cacc:	add    %rax,%r10
cacf:	adc    $0x0,%rdx
cad3:	add    %r11,%r10
cad6:	adc    $0x0,%rdx
cada:	mov    %rdx,%r11
cadd:	mov    0x30(%rsi),%rax
cae1:	mulq   0x38(%rsi)
cae5:	add    %rax,%r11
cae8:	adc    $0x0,%rdx
caec:	mov    %rdx,%r12
caef:	xor    %r13,%r13
caf2:	add    %r15,%r15
caf5:	adc    %rbx,%rbx
caf8:	adc    %r8,%r8
cafb:	adc    %r9,%r9
cafe:	adc    %r10,%r10
cb01:	adc    %r11,%r11
cb04:	adc    %r12,%r12
cb07:	adc    $0x0,%r13
cb0b:	mov    0x20(%rsi),%rax
cb0f:	mul    %rax
cb12:	add    %rcx,%rax
cb15:	adc    $0x0,%rdx
cb19:	add    %r15,%rax
cb1c:	adc    $0x0,%rdx
cb20:	mov    %rax,0x40(%rdi)
cb24:	mov    %rdx,%rcx
cb27:	mov    0x28(%rsi),%rax
cb2b:	mul    %rax
cb2e:	add    %rcx,%rbx
cb31:	adc    %rax,%r8
cb34:	mov    %rbx,0x48(%rdi)
cb38:	adc    $0x0,%rdx
cb3c:	mov    %r8,0x50(%rdi)
cb40:	mov    %rdx,%rcx
cb43:	mov    0x30(%rsi),%rax
cb47:	mul    %rax
cb4a:	mov    %rax,%r15
cb4d:	mov    %rdx,%rbx
cb50:	mov    0x38(%rsi),%rax
cb54:	mul    %rax
cb57:	add    %rcx,%r9
cb5a:	adc    %r15,%r10
cb5d:	mov    %r9,0x58(%rdi)
cb61:	adc    %rbx,%r11
cb64:	mov    %r10,0x60(%rdi)
cb68:	adc    %rax,%r12
cb6b:	mov    %r11,0x68(%rdi)
cb6f:	adc    %rdx,%r13
cb72:	mov    %r12,0x70(%rdi)
cb76:	mov    %r13,0x78(%rdi)
cb7a:	mov    %rdx,%rax
cb7d:	add    $0x28,%rsp
cb81:	pop    %r15
cb83:	pop    %r14
cb85:	pop    %r13
cb87:	pop    %r12
cb89:	pop    %rbp
cb8a:	pop    %rbx
cb8b:	retq   
cb8c:	nopl   0x0(%rax)
cb90:	movslq %edx,%rdx
cb93:	mov    %rdi,(%rsp)
cb97:	mov    %rsi,0x8(%rsp)
cb9c:	mov    %rdx,0x10(%rsp)
cba1:	mov    %rdx,%r8
cba4:	mov    $0x2,%rax
cbab:	mov    $0x1,%rbx
cbb2:	test   $0x1,%r8
cbb9:	cmove  %rbx,%rax
cbbd:	sub    %rax,%rdx
cbc0:	lea    (%rsi,%rax,8),%rsi
cbc4:	lea    (%rdi,%rax,8),%rdi
cbc8:	lea    -0x20(%rsi,%rdx,8),%rsi
cbcd:	lea    -0x20(%rdi,%rdx,8),%rdi
cbd2:	mov    $0x4,%rcx
cbd9:	sub    %rdx,%rcx
cbdc:	test   $0x1,%r8
cbe3:	jne    ccc9 <cpSqrAdc_BNU_school.init_odd_len_operation>
cbe9:	mov    -0x8(%rsi,%rcx,8),%r10
cbee:	mov    (%rsi,%rcx,8),%rax
cbf2:	xor    %r12,%r12
cbf5:	cmp    $0x0,%rcx
cbf9:	jge    cc5d <cpSqrAdc_BNU_school.skip_mul1>
cbfb:	mov    %rcx,%rbx
cbfe:	xchg   %ax,%ax
cc00:	mul    %r10
cc03:	xor    %r13,%r13
cc06:	add    %rax,%r12
cc09:	mov    %r12,(%rdi,%rbx,8)
cc0d:	mov    0x8(%rsi,%rbx,8),%rax
cc12:	adc    %rdx,%r13
cc15:	mul    %r10
cc18:	xor    %r14,%r14
cc1b:	add    %rax,%r13
cc1e:	mov    %r13,0x8(%rdi,%rbx,8)
cc23:	mov    0x10(%rsi,%rbx,8),%rax
cc28:	adc    %rdx,%r14
cc2b:	mul    %r10
cc2e:	xor    %r15,%r15
cc31:	add    %rax,%r14
cc34:	mov    %r14,0x10(%rdi,%rbx,8)
cc39:	mov    0x18(%rsi,%rbx,8),%rax
cc3e:	adc    %rdx,%r15
cc41:	mul    %r10
cc44:	xor    %r12,%r12
cc47:	add    %rax,%r15
cc4a:	mov    %r15,0x18(%rdi,%rbx,8)
cc4f:	mov    0x20(%rsi,%rbx,8),%rax
cc54:	adc    %rdx,%r12
cc57:	add    $0x4,%rbx
cc5b:	jae    cc00 <..@154.L_1>
cc5d:	cmp    $0x1,%rbx
cc61:	jne    ccaa <cpSqrAdc_BNU_school.fin_mulx1_3>
cc63:	mul    %r10
cc66:	xor    %r13,%r13
cc69:	add    %rax,%r12
cc6c:	mov    %r12,0x8(%rdi)
cc70:	mov    0x10(%rsi),%rax
cc74:	adc    %rdx,%r13
cc77:	mul    %r10
cc7a:	xor    %r14,%r14
cc7d:	add    %rax,%r13
cc80:	mov    %r13,0x10(%rdi)
cc84:	mov    0x18(%rsi),%rax
cc88:	adc    %rdx,%r14
cc8b:	mul    %r10
cc8e:	add    $0x2,%rcx
cc92:	add    %rax,%r14
cc95:	mov    %r14,0x18(%rdi)
cc99:	adc    $0x0,%rdx
cc9d:	mov    %rdx,0x20(%rdi)
cca1:	add    $0x8,%rdi
cca5:	jmpq   cfbf <cpSqrAdc_BNU_school.odd_pass_pairs>
ccaa:	mul    %r10
ccad:	add    $0x2,%rcx
ccb1:	add    %rax,%r12
ccb4:	mov    %r12,0x18(%rdi)
ccb8:	adc    $0x0,%rdx
ccbc:	mov    %rdx,0x20(%rdi)
ccc0:	add    $0x8,%rdi
ccc4:	jmpq   ce50 <cpSqrAdc_BNU_school.even_pass_pairs>
ccc9:	mov    -0x10(%rsi,%rcx,8),%r10
ccce:	mov    -0x8(%rsi,%rcx,8),%r11
ccd3:	mov    %r11,%rax
ccd6:	mul    %r10
ccd9:	mov    %rax,-0x8(%rdi,%rcx,8)
ccde:	mov    (%rsi,%rcx,8),%rax
cce2:	mov    %rdx,%r12
cce5:	mul    %r10
cce8:	xor    %r13,%r13
cceb:	xor    %r14,%r14
ccee:	add    %rax,%r12
ccf1:	mov    (%rsi,%rcx,8),%rax
ccf5:	adc    %rdx,%r13
ccf8:	cmp    $0x0,%rcx
ccfc:	jge    cdb9 <cpSqrAdc_BNU_school.skip_mul_nx2>
cd02:	mov    %rcx,%rbx
cd05:	nopl   0x0(%rax,%rax,1)
cd0d:	nopl   (%rax)
cd10:	mul    %r11
cd13:	xor    %r15,%r15
cd16:	add    %rax,%r13
cd19:	mov    0x8(%rsi,%rbx,8),%rax
cd1e:	adc    %rdx,%r14
cd21:	mul    %r10
cd24:	mov    %r12,(%rdi,%rbx,8)
cd28:	add    %rax,%r13
cd2b:	mov    0x8(%rsi,%rbx,8),%rax
cd30:	adc    %rdx,%r14
cd33:	adc    $0x0,%r15
cd37:	mul    %r11
cd3a:	xor    %r12,%r12
cd3d:	add    %rax,%r14
cd40:	mov    0x10(%rsi,%rbx,8),%rax
cd45:	adc    %rdx,%r15
cd48:	mul    %r10
cd4b:	mov    %r13,0x8(%rdi,%rbx,8)
cd50:	add    %rax,%r14
cd53:	mov    0x10(%rsi,%rbx,8),%rax
cd58:	adc    %rdx,%r15
cd5b:	adc    $0x0,%r12
cd5f:	mul    %r11
cd62:	xor    %r13,%r13
cd65:	add    %rax,%r15
cd68:	mov    0x18(%rsi,%rbx,8),%rax
cd6d:	adc    %rdx,%r12
cd70:	mul    %r10
cd73:	mov    %r14,0x10(%rdi,%rbx,8)
cd78:	add    %rax,%r15
cd7b:	mov    0x18(%rsi,%rbx,8),%rax
cd80:	adc    %rdx,%r12
cd83:	adc    $0x0,%r13
cd87:	mul    %r11
cd8a:	xor    %r14,%r14
cd8d:	add    %rax,%r12
cd90:	mov    0x20(%rsi,%rbx,8),%rax
cd95:	adc    %rdx,%r13
cd98:	mul    %r10
cd9b:	mov    %r15,0x18(%rdi,%rbx,8)
cda0:	add    %rax,%r12
cda3:	mov    0x20(%rsi,%rbx,8),%rax
cda8:	adc    %rdx,%r13
cdab:	adc    $0x0,%r14
cdaf:	add    $0x4,%rbx
cdb3:	jae    cd10 <..@160.L_1>
cdb9:	cmp    $0x1,%rbx
cdbd:	jne    ce2b <cpSqrAdc_BNU_school.fin_mul2x_3>
cdbf:	mul    %r11
cdc2:	xor    %r15,%r15
cdc5:	add    %rax,%r13
cdc8:	mov    0x10(%rsi),%rax
cdcc:	adc    %rdx,%r14
cdcf:	mul    %r10
cdd2:	mov    %r12,0x8(%rdi)
cdd6:	add    %rax,%r13
cdd9:	mov    0x10(%rsi),%rax
cddd:	adc    %rdx,%r14
cde0:	adc    $0x0,%r15
cde4:	mul    %r11
cde7:	xor    %r12,%r12
cdea:	add    %rax,%r14
cded:	mov    0x18(%rsi),%rax
cdf1:	adc    %rdx,%r15
cdf4:	mul    %r10
cdf7:	mov    %r13,0x10(%rdi)
cdfb:	add    %rax,%r14
cdfe:	mov    0x18(%rsi),%rax
ce02:	adc    %rdx,%r15
ce05:	adc    $0x0,%r12
ce09:	mul    %r11
ce0c:	add    $0x2,%rcx
ce10:	mov    %r14,0x18(%rdi)
ce14:	add    %rax,%r15
ce17:	adc    %r12,%rdx
ce1a:	mov    %r15,0x20(%rdi)
ce1e:	mov    %rdx,0x28(%rdi)
ce22:	add    $0x10,%rdi
ce26:	jmpq   cfbf <cpSqrAdc_BNU_school.odd_pass_pairs>
ce2b:	mul    %r11
ce2e:	add    $0x2,%rcx
ce32:	mov    %r12,0x18(%rdi)
ce36:	add    %rax,%r13
ce39:	adc    %r14,%rdx
ce3c:	mov    %r13,0x20(%rdi)
ce40:	mov    %rdx,0x28(%rdi)
ce44:	add    $0x10,%rdi
ce48:	nopl   0x0(%rax,%rax,1)
ce50:	mov    -0x10(%rsi,%rcx,8),%r10
ce55:	mov    -0x8(%rsi,%rcx,8),%r11
ce5a:	mov    %r11,%rax
ce5d:	mul    %r10
ce60:	xor    %r12,%r12
ce63:	add    %rax,-0x8(%rdi,%rcx,8)
ce68:	mov    (%rsi,%rcx,8),%rax
ce6c:	adc    %rdx,%r12
ce6f:	mul    %r10
ce72:	xor    %r13,%r13
ce75:	xor    %r14,%r14
ce78:	add    %rax,%r12
ce7b:	mov    (%rsi,%rcx,8),%rax
ce7f:	adc    %rdx,%r13
ce82:	cmp    $0x0,%rcx
ce86:	jge    cf4c <cpSqrAdc_BNU_school.skip1>
ce8c:	mov    %rcx,%rbx
ce8f:	nop
ce90:	mul    %r11
ce93:	xor    %r15,%r15
ce96:	add    %rax,%r13
ce99:	mov    0x8(%rsi,%rbx,8),%rax
ce9e:	adc    %rdx,%r14
cea1:	mul    %r10
cea4:	add    (%rdi,%rbx,8),%r12
cea8:	adc    %rax,%r13
ceab:	mov    0x8(%rsi,%rbx,8),%rax
ceb0:	adc    %rdx,%r14
ceb3:	mov    %r12,(%rdi,%rbx,8)
ceb7:	adc    $0x0,%r15
cebb:	mul    %r11
cebe:	xor    %r12,%r12
cec1:	add    %rax,%r14
cec4:	mov    0x10(%rsi,%rbx,8),%rax
cec9:	adc    %rdx,%r15
cecc:	mul    %r10
cecf:	add    0x8(%rdi,%rbx,8),%r13
ced4:	adc    %rax,%r14
ced7:	mov    0x10(%rsi,%rbx,8),%rax
cedc:	adc    %rdx,%r15
cedf:	mov    %r13,0x8(%rdi,%rbx,8)
cee4:	adc    $0x0,%r12
cee8:	mul    %r11
ceeb:	xor    %r13,%r13
ceee:	add    %rax,%r15
cef1:	mov    0x18(%rsi,%rbx,8),%rax
cef6:	adc    %rdx,%r12
cef9:	mul    %r10
cefc:	add    0x10(%rdi,%rbx,8),%r14
cf01:	adc    %rax,%r15
cf04:	mov    0x18(%rsi,%rbx,8),%rax
cf09:	adc    %rdx,%r12
cf0c:	mov    %r14,0x10(%rdi,%rbx,8)
cf11:	adc    $0x0,%r13
cf15:	mul    %r11
cf18:	xor    %r14,%r14
cf1b:	add    %rax,%r12
cf1e:	mov    0x20(%rsi,%rbx,8),%rax
cf23:	adc    %rdx,%r13
cf26:	mul    %r10
cf29:	add    0x18(%rdi,%rbx,8),%r15
cf2e:	adc    %rax,%r12
cf31:	mov    0x20(%rsi,%rbx,8),%rax
cf36:	adc    %rdx,%r13
cf39:	mov    %r15,0x18(%rdi,%rbx,8)
cf3e:	adc    $0x0,%r14
cf42:	add    $0x4,%rbx
cf46:	jae    ce90 <..@170.L_1>
cf4c:	mul    %r11
cf4f:	xor    %r15,%r15
cf52:	add    %rax,%r13
cf55:	mov    0x10(%rsi),%rax
cf59:	adc    %rdx,%r14
cf5c:	mul    %r10
cf5f:	add    0x8(%rdi),%r12
cf63:	mov    %r12,0x8(%rdi)
cf67:	adc    %rax,%r13
cf6a:	adc    %rdx,%r14
cf6d:	adc    $0x0,%r15
cf71:	mov    0x10(%rsi),%rax
cf75:	mul    %r11
cf78:	xor    %r12,%r12
cf7b:	add    %rax,%r14
cf7e:	adc    %rdx,%r15
cf81:	mov    0x18(%rsi),%rax
cf85:	mul    %r10
cf88:	add    0x10(%rdi),%r13
cf8c:	mov    %r13,0x10(%rdi)
cf90:	adc    %rax,%r14
cf93:	adc    %rdx,%r15
cf96:	adc    $0x0,%r12
cf9a:	mov    0x18(%rsi),%rax
cf9e:	mul    %r11
cfa1:	add    $0x2,%rcx
cfa5:	add    0x18(%rdi),%r14
cfa9:	mov    %r14,0x18(%rdi)
cfad:	adc    %rax,%r15
cfb0:	adc    %r12,%rdx
cfb3:	mov    %r15,0x20(%rdi)
cfb7:	mov    %rdx,0x28(%rdi)
cfbb:	add    $0x10,%rdi
cfbf:	mov    -0x10(%rsi,%rcx,8),%r10
cfc4:	mov    -0x8(%rsi,%rcx,8),%r11
cfc9:	mov    %r11,%rax
cfcc:	mul    %r10
cfcf:	xor    %r12,%r12
cfd2:	add    %rax,-0x8(%rdi,%rcx,8)
cfd7:	mov    (%rsi,%rcx,8),%rax
cfdb:	adc    %rdx,%r12
cfde:	mul    %r10
cfe1:	xor    %r13,%r13
cfe4:	xor    %r14,%r14
cfe7:	add    %rax,%r12
cfea:	mov    (%rsi,%rcx,8),%rax
cfee:	adc    %rdx,%r13
cff1:	cmp    $0x0,%rcx
cff5:	jge    d0bc <cpSqrAdc_BNU_school.skip2>
cffb:	mov    %rcx,%rbx
cffe:	xchg   %ax,%ax
d000:	mul    %r11
d003:	xor    %r15,%r15
d006:	add    %rax,%r13
d009:	mov    0x8(%rsi,%rbx,8),%rax
d00e:	adc    %rdx,%r14
d011:	mul    %r10
d014:	add    (%rdi,%rbx,8),%r12
d018:	adc    %rax,%r13
d01b:	mov    0x8(%rsi,%rbx,8),%rax
d020:	adc    %rdx,%r14
d023:	mov    %r12,(%rdi,%rbx,8)
d027:	adc    $0x0,%r15
d02b:	mul    %r11
d02e:	xor    %r12,%r12
d031:	add    %rax,%r14
d034:	mov    0x10(%rsi,%rbx,8),%rax
d039:	adc    %rdx,%r15
d03c:	mul    %r10
d03f:	add    0x8(%rdi,%rbx,8),%r13
d044:	adc    %rax,%r14
d047:	mov    0x10(%rsi,%rbx,8),%rax
d04c:	adc    %rdx,%r15
d04f:	mov    %r13,0x8(%rdi,%rbx,8)
d054:	adc    $0x0,%r12
d058:	mul    %r11
d05b:	xor    %r13,%r13
d05e:	add    %rax,%r15
d061:	mov    0x18(%rsi,%rbx,8),%rax
d066:	adc    %rdx,%r12
d069:	mul    %r10
d06c:	add    0x10(%rdi,%rbx,8),%r14
d071:	adc    %rax,%r15
d074:	mov    0x18(%rsi,%rbx,8),%rax
d079:	adc    %rdx,%r12
d07c:	mov    %r14,0x10(%rdi,%rbx,8)
d081:	adc    $0x0,%r13
d085:	mul    %r11
d088:	xor    %r14,%r14
d08b:	add    %rax,%r12
d08e:	mov    0x20(%rsi,%rbx,8),%rax
d093:	adc    %rdx,%r13
d096:	mul    %r10
d099:	add    0x18(%rdi,%rbx,8),%r15
d09e:	adc    %rax,%r12
d0a1:	mov    0x20(%rsi,%rbx,8),%rax
d0a6:	adc    %rdx,%r13
d0a9:	mov    %r15,0x18(%rdi,%rbx,8)
d0ae:	adc    $0x0,%r14
d0b2:	add    $0x4,%rbx
d0b6:	jae    d000 <..@176.L_1>
d0bc:	mul    %r11
d0bf:	add    $0x2,%rcx
d0c3:	add    0x18(%rdi),%r12
d0c7:	mov    %r12,0x18(%rdi)
d0cb:	adc    %rax,%r13
d0ce:	adc    %r14,%rdx
d0d1:	mov    %r13,0x20(%rdi)
d0d5:	mov    %rdx,0x28(%rdi)
d0d9:	add    $0x10,%rdi
d0dd:	cmp    $0x4,%rcx
d0e1:	jl     ce50 <cpSqrAdc_BNU_school.even_pass_pairs>
d0e7:	mov    (%rsp),%rdi
d0eb:	mov    0x8(%rsp),%rsi
d0f0:	mov    0x10(%rsp),%rcx
d0f5:	xor    %rbx,%rbx
d0f8:	xor    %r12,%r12
d0fb:	xor    %r13,%r13
d0fe:	lea    (%rdi,%rcx,8),%rax
d102:	lea    (%rsi,%rcx,8),%rsi
d106:	mov    %r12,(%rdi)
d109:	mov    %r12,-0x8(%rax,%rcx,8)
d10e:	neg    %rcx
d111:	nopl   0x0(%rax,%rax,1)
d119:	nopl   0x0(%rax)
d120:	mov    (%rsi,%rcx,8),%rax
d124:	mul    %rax
d127:	mov    (%rdi),%r14
d12a:	mov    0x8(%rdi),%r15
d12e:	add    $0x1,%r12
d132:	adc    %r14,%r14
d135:	adc    %r15,%r15
d138:	sbb    %r12,%r12
d13b:	add    $0x1,%r13
d13f:	adc    %rax,%r14
d142:	adc    %rdx,%r15
d145:	sbb    %r13,%r13
d148:	mov    %r14,(%rdi)
d14b:	mov    %r15,0x8(%rdi)
d14f:	add    $0x10,%rdi
d153:	add    $0x1,%rcx
d157:	jne    d120 <cpSqrAdc_BNU_school.add_diag_loop>
d159:	mov    %r15,%rax
d15c:	add    $0x28,%rsp
d160:	pop    %r15
d162:	pop    %r14
d164:	pop    %r13
d166:	pop    %r12
d168:	pop    %rbp
d169:	pop    %rbx
d16a:	retq   
d16b:	nopl   0x0(%rax,%rax,1)
d170:	endbr64 
d174:	movslq %ecx,%rcx
d177:	xor    %rax,%rax
d17a:	cmp    $0x2,%rcx
d17e:	jge    d194 <cpSub_BNU.SUB_GE2>
d180:	add    %rax,%rax
d183:	mov    (%rsi),%r8
d186:	sbb    (%rdx),%r8
d189:	mov    %r8,(%rdi)
d18c:	sbb    %rax,%rax
d18f:	jmpq   d443 <cpSub_BNU.FINAL>
d194:	jg     d1b6 <cpSub_BNU.SUB_GT2>
d196:	add    %rax,%rax
d199:	mov    (%rsi),%r8
d19c:	sbb    (%rdx),%r8
d19f:	mov    0x8(%rsi),%r9
d1a3:	sbb    0x8(%rdx),%r9
d1a7:	mov    %r8,(%rdi)
d1aa:	mov    %r9,0x8(%rdi)
d1ae:	sbb    %rax,%rax
d1b1:	jmpq   d443 <cpSub_BNU.FINAL>
d1b6:	cmp    $0x4,%rcx
d1ba:	jge    d1e8 <cpSub_BNU.SUB_GE4>
d1bc:	add    %rax,%rax
d1bf:	mov    (%rsi),%r8
d1c2:	sbb    (%rdx),%r8
d1c5:	mov    0x8(%rsi),%r9
d1c9:	sbb    0x8(%rdx),%r9
d1cd:	mov    0x10(%rsi),%r10
d1d1:	sbb    0x10(%rdx),%r10
d1d5:	mov    %r8,(%rdi)
d1d8:	mov    %r9,0x8(%rdi)
d1dc:	mov    %r10,0x10(%rdi)
d1e0:	sbb    %rax,%rax
d1e3:	jmpq   d443 <cpSub_BNU.FINAL>
d1e8:	jg     d222 <cpSub_BNU.SUB_GT4>
d1ea:	add    %rax,%rax
d1ed:	mov    (%rsi),%r8
d1f0:	sbb    (%rdx),%r8
d1f3:	mov    0x8(%rsi),%r9
d1f7:	sbb    0x8(%rdx),%r9
d1fb:	mov    0x10(%rsi),%r10
d1ff:	sbb    0x10(%rdx),%r10
d203:	mov    0x18(%rsi),%r11
d207:	sbb    0x18(%rdx),%r11
d20b:	mov    %r8,(%rdi)
d20e:	mov    %r9,0x8(%rdi)
d212:	mov    %r10,0x10(%rdi)
d216:	mov    %r11,0x18(%rdi)
d21a:	sbb    %rax,%rax
d21d:	jmpq   d443 <cpSub_BNU.FINAL>
d222:	cmp    $0x6,%rcx
d226:	jge    d26c <cpSub_BNU.SUB_GE6>
d228:	add    %rax,%rax
d22b:	mov    (%rsi),%r8
d22e:	sbb    (%rdx),%r8
d231:	mov    0x8(%rsi),%r9
d235:	sbb    0x8(%rdx),%r9
d239:	mov    0x10(%rsi),%r10
d23d:	sbb    0x10(%rdx),%r10
d241:	mov    0x18(%rsi),%r11
d245:	sbb    0x18(%rdx),%r11
d249:	mov    0x20(%rsi),%rcx
d24d:	sbb    0x20(%rdx),%rcx
d251:	mov    %r8,(%rdi)
d254:	mov    %r9,0x8(%rdi)
d258:	mov    %r10,0x10(%rdi)
d25c:	mov    %r11,0x18(%rdi)
d260:	mov    %rcx,0x20(%rdi)
d264:	sbb    %rax,%rax
d267:	jmpq   d443 <cpSub_BNU.FINAL>
d26c:	jg     d2be <cpSub_BNU.SUB_GT6>
d26e:	add    %rax,%rax
d271:	mov    (%rsi),%r8
d274:	sbb    (%rdx),%r8
d277:	mov    0x8(%rsi),%r9
d27b:	sbb    0x8(%rdx),%r9
d27f:	mov    0x10(%rsi),%r10
d283:	sbb    0x10(%rdx),%r10
d287:	mov    0x18(%rsi),%r11
d28b:	sbb    0x18(%rdx),%r11
d28f:	mov    0x20(%rsi),%rcx
d293:	sbb    0x20(%rdx),%rcx
d297:	mov    0x28(%rsi),%rsi
d29b:	sbb    0x28(%rdx),%rsi
d29f:	mov    %r8,(%rdi)
d2a2:	mov    %r9,0x8(%rdi)
d2a6:	mov    %r10,0x10(%rdi)
d2aa:	mov    %r11,0x18(%rdi)
d2ae:	mov    %rcx,0x20(%rdi)
d2b2:	mov    %rsi,0x28(%rdi)
d2b6:	sbb    %rax,%rax
d2b9:	jmpq   d443 <cpSub_BNU.FINAL>
d2be:	cmp    $0x8,%rcx
d2c2:	jge    d320 <cpSub_BNU.SUB_GE8>
d2c4:	add    %rax,%rax
d2c7:	mov    (%rsi),%r8
d2ca:	sbb    (%rdx),%r8
d2cd:	mov    0x8(%rsi),%r9
d2d1:	sbb    0x8(%rdx),%r9
d2d5:	mov    0x10(%rsi),%r10
d2d9:	sbb    0x10(%rdx),%r10
d2dd:	mov    0x18(%rsi),%r11
d2e1:	sbb    0x18(%rdx),%r11
d2e5:	mov    0x20(%rsi),%rcx
d2e9:	sbb    0x20(%rdx),%rcx
d2ed:	mov    %r8,(%rdi)
d2f0:	mov    0x28(%rsi),%r8
d2f4:	sbb    0x28(%rdx),%r8
d2f8:	mov    0x30(%rsi),%rsi
d2fc:	sbb    0x30(%rdx),%rsi
d300:	mov    %r9,0x8(%rdi)
d304:	mov    %r10,0x10(%rdi)
d308:	mov    %r11,0x18(%rdi)
d30c:	mov    %rcx,0x20(%rdi)
d310:	mov    %r8,0x28(%rdi)
d314:	mov    %rsi,0x30(%rdi)
d318:	sbb    %rax,%rax
d31b:	jmpq   d443 <cpSub_BNU.FINAL>
d320:	jg     d38a <cpSub_BNU.SUB_GT8>
d322:	add    %rax,%rax
d325:	mov    (%rsi),%r8
d328:	sbb    (%rdx),%r8
d32b:	mov    0x8(%rsi),%r9
d32f:	sbb    0x8(%rdx),%r9
d333:	mov    0x10(%rsi),%r10
d337:	sbb    0x10(%rdx),%r10
d33b:	mov    0x18(%rsi),%r11
d33f:	sbb    0x18(%rdx),%r11
d343:	mov    0x20(%rsi),%rcx
d347:	sbb    0x20(%rdx),%rcx
d34b:	mov    %r8,(%rdi)
d34e:	mov    0x28(%rsi),%r8
d352:	sbb    0x28(%rdx),%r8
d356:	mov    %r9,0x8(%rdi)
d35a:	mov    0x30(%rsi),%r9
d35e:	sbb    0x30(%rdx),%r9
d362:	mov    0x38(%rsi),%rsi
d366:	sbb    0x38(%rdx),%rsi
d36a:	mov    %r10,0x10(%rdi)
d36e:	mov    %r11,0x18(%rdi)
d372:	mov    %rcx,0x20(%rdi)
d376:	mov    %r8,0x28(%rdi)
d37a:	mov    %r9,0x30(%rdi)
d37e:	mov    %rsi,0x38(%rdi)
d382:	sbb    %rax,%rax
d385:	jmpq   d443 <cpSub_BNU.FINAL>
d38a:	mov    %rax,%r8
d38d:	mov    %rcx,%rax
d390:	and    $0x3,%rcx
d394:	xor    %rax,%rcx
d397:	lea    (%rsi,%rcx,8),%rsi
d39b:	lea    (%rdx,%rcx,8),%rdx
d39f:	lea    (%rdi,%rcx,8),%rdi
d3a3:	neg    %rcx
d3a6:	add    %r8,%r8
d3a9:	jmp    d3b0 <cpSub_BNU.SUB_GLOOP>
d3ab:	nopl   0x0(%rax,%rax,1)
d3b0:	mov    (%rsi,%rcx,8),%r8
d3b4:	mov    0x8(%rsi,%rcx,8),%r9
d3b9:	mov    0x10(%rsi,%rcx,8),%r10
d3be:	mov    0x18(%rsi,%rcx,8),%r11
d3c3:	sbb    (%rdx,%rcx,8),%r8
d3c7:	sbb    0x8(%rdx,%rcx,8),%r9
d3cc:	sbb    0x10(%rdx,%rcx,8),%r10
d3d1:	sbb    0x18(%rdx,%rcx,8),%r11
d3d6:	mov    %r8,(%rdi,%rcx,8)
d3da:	mov    %r9,0x8(%rdi,%rcx,8)
d3df:	mov    %r10,0x10(%rdi,%rcx,8)
d3e4:	mov    %r11,0x18(%rdi,%rcx,8)
d3e9:	lea    0x4(%rcx),%rcx
d3ed:	jrcxz  d3f1 <cpSub_BNU.SUB_LLAST0>
d3ef:	jmp    d3b0 <cpSub_BNU.SUB_GLOOP>
d3f1:	sbb    %rcx,%rcx
d3f4:	and    $0x3,%rax
d3f8:	je     d440 <cpSub_BNU.FIN0>
d3fa:	test   $0x2,%rax
d400:	je     d431 <cpSub_BNU.SUB_LLAST1>
d402:	add    %rcx,%rcx
d405:	mov    (%rsi),%r8
d408:	mov    0x8(%rsi),%r9
d40c:	sbb    (%rdx),%r8
d40f:	sbb    0x8(%rdx),%r9
d413:	mov    %r8,(%rdi)
d416:	mov    %r9,0x8(%rdi)
d41a:	sbb    %rcx,%rcx
d41d:	test   $0x1,%rax
d423:	je     d440 <cpSub_BNU.FIN0>
d425:	add    $0x10,%rsi
d429:	add    $0x10,%rdx
d42d:	add    $0x10,%rdi
d431:	add    %rcx,%rcx
d434:	mov    (%rsi),%r8
d437:	sbb    (%rdx),%r8
d43a:	mov    %r8,(%rdi)
d43d:	sbb    %rcx,%rcx
d440:	mov    %rcx,%rax
d443:	neg    %rax
d446:	retq   
d447:	nopw   0x0(%rax,%rax,1)
d450:	endbr64 
d454:	push   %rbx
d455:	push   %rbp
d456:	push   %r12
d458:	push   %r13
d45a:	push   %r14
d45c:	push   %r15
d45e:	sub    $0x28,%rsp
d462:	movq   $0x0,0x10(%rsp)
d46b:	movslq %ecx,%rcx
d46e:	mov    %r8,%r15
d471:	cmp    $0x5,%rcx
d475:	jge    d910 <cpMontRedAdc_BNU.general_case>
d47b:	cmp    $0x3,%rcx
d47f:	ja     d6f0 <cpMontRedAdc_BNU.mSize_4>
d485:	je     d5a0 <cpMontRedAdc_BNU.mSize_3>
d48b:	jp     d4e0 <cpMontRedAdc_BNU.mSize_2>
d48d:	nopl   (%rax)
d490:	mov    (%rsi),%r8
d493:	mov    0x8(%rsi),%r9
d497:	mov    %rdx,%rsi
d49a:	mov    %r8,%rbp
d49d:	imul   %r15,%rbp
d4a1:	mov    (%rsi),%rax
d4a4:	mul    %rbp
d4a7:	xor    %rbx,%rbx
d4aa:	add    %rax,%r8
d4ad:	adc    %rdx,%r9
d4b0:	adc    $0x0,%rbx
d4b4:	add    0x10(%rsp),%r9
d4b9:	adc    $0x0,%rbx
d4bd:	mov    %rbx,0x10(%rsp)
d4c2:	mov    %r9,%r8
d4c5:	sub    (%rsi),%r9
d4c8:	sbb    $0x0,%rbx
d4cc:	cmovb  %r8,%r9
d4d0:	mov    %r9,(%rdi)
d4d3:	jmpq   e5ed <cpMontRedAdc_BNU.quit>
d4d8:	nopl   0x0(%rax,%rax,1)
d4e0:	mov    (%rsi),%r8
d4e3:	mov    0x8(%rsi),%r9
d4e7:	mov    0x10(%rsi),%r10
d4eb:	mov    0x18(%rsi),%r11
d4ef:	mov    %rdx,%rsi
d4f2:	mov    %r8,%rbp
d4f5:	imul   %r15,%rbp
d4f9:	mov    (%rsi),%rax
d4fc:	mul    %rbp
d4ff:	xor    %rbx,%rbx
d502:	add    %rax,%r8
d505:	mov    0x8(%rsi),%rax
d509:	adc    %rdx,%rbx
d50c:	mul    %rbp
d50f:	add    %rbx,%r9
d512:	adc    $0x0,%rdx
d516:	xor    %rbx,%rbx
d519:	add    %rax,%r9
d51c:	adc    %rdx,%r10
d51f:	adc    $0x0,%rbx
d523:	add    0x10(%rsp),%r10
d528:	adc    $0x0,%rbx
d52c:	mov    %rbx,0x10(%rsp)
d531:	mov    %r9,%rbp
d534:	imul   %r15,%rbp
d538:	mov    (%rsi),%rax
d53b:	mul    %rbp
d53e:	xor    %rbx,%rbx
d541:	add    %rax,%r9
d544:	mov    0x8(%rsi),%rax
d548:	adc    %rdx,%rbx
d54b:	mul    %rbp
d54e:	add    %rbx,%r10
d551:	adc    $0x0,%rdx
d555:	xor    %rbx,%rbx
d558:	add    %rax,%r10
d55b:	adc    %rdx,%r11
d55e:	adc    $0x0,%rbx
d562:	add    0x10(%rsp),%r11
d567:	adc    $0x0,%rbx
d56b:	mov    %rbx,0x10(%rsp)
d570:	mov    %r10,%r8
d573:	sub    (%rsi),%r10
d576:	mov    %r11,%r9
d579:	sbb    0x8(%rsi),%r11
d57d:	sbb    $0x0,%rbx
d581:	cmovb  %r8,%r10
d585:	mov    %r10,(%rdi)
d588:	cmovb  %r9,%r11
d58c:	mov    %r11,0x8(%rdi)
d590:	jmpq   e5ed <cpMontRedAdc_BNU.quit>
d595:	nopl   0x0(%rax,%rax,1)
d59d:	nopl   (%rax)
d5a0:	mov    (%rsi),%r8
d5a3:	mov    0x8(%rsi),%r9
d5a7:	mov    0x10(%rsi),%r10
d5ab:	mov    0x18(%rsi),%r11
d5af:	mov    0x20(%rsi),%r12
d5b3:	mov    0x28(%rsi),%r13
d5b7:	mov    %rdx,%rsi
d5ba:	mov    %r8,%rbp
d5bd:	imul   %r15,%rbp
d5c1:	mov    (%rsi),%rax
d5c4:	mul    %rbp
d5c7:	xor    %rbx,%rbx
d5ca:	add    %rax,%r8
d5cd:	mov    0x8(%rsi),%rax
d5d1:	adc    %rdx,%rbx
d5d4:	mul    %rbp
d5d7:	add    %rbx,%r9
d5da:	adc    $0x0,%rdx
d5de:	xor    %rbx,%rbx
d5e1:	add    %rax,%r9
d5e4:	mov    0x10(%rsi),%rax
d5e8:	adc    %rdx,%rbx
d5eb:	mul    %rbp
d5ee:	add    %rbx,%r10
d5f1:	adc    $0x0,%rdx
d5f5:	xor    %rbx,%rbx
d5f8:	add    %rax,%r10
d5fb:	adc    %rdx,%r11
d5fe:	adc    $0x0,%rbx
d602:	add    0x10(%rsp),%r11
d607:	adc    $0x0,%rbx
d60b:	mov    %rbx,0x10(%rsp)
d610:	mov    %r9,%rbp
d613:	imul   %r15,%rbp
d617:	mov    (%rsi),%rax
d61a:	mul    %rbp
d61d:	xor    %rbx,%rbx
d620:	add    %rax,%r9
d623:	mov    0x8(%rsi),%rax
d627:	adc    %rdx,%rbx
d62a:	mul    %rbp
d62d:	add    %rbx,%r10
d630:	adc    $0x0,%rdx
d634:	xor    %rbx,%rbx
d637:	add    %rax,%r10
d63a:	mov    0x10(%rsi),%rax
d63e:	adc    %rdx,%rbx
d641:	mul    %rbp
d644:	add    %rbx,%r11
d647:	adc    $0x0,%rdx
d64b:	xor    %rbx,%rbx
d64e:	add    %rax,%r11
d651:	adc    %rdx,%r12
d654:	adc    $0x0,%rbx
d658:	add    0x10(%rsp),%r12
d65d:	adc    $0x0,%rbx
d661:	mov    %rbx,0x10(%rsp)
d666:	mov    %r10,%rbp
d669:	imul   %r15,%rbp
d66d:	mov    (%rsi),%rax
d670:	mul    %rbp
d673:	xor    %rbx,%rbx
d676:	add    %rax,%r10
d679:	mov    0x8(%rsi),%rax
d67d:	adc    %rdx,%rbx
d680:	mul    %rbp
d683:	add    %rbx,%r11
d686:	adc    $0x0,%rdx
d68a:	xor    %rbx,%rbx
d68d:	add    %rax,%r11
d690:	mov    0x10(%rsi),%rax
d694:	adc    %rdx,%rbx
d697:	mul    %rbp
d69a:	add    %rbx,%r12
d69d:	adc    $0x0,%rdx
d6a1:	xor    %rbx,%rbx
d6a4:	add    %rax,%r12
d6a7:	adc    %rdx,%r13
d6aa:	adc    $0x0,%rbx
d6ae:	add    0x10(%rsp),%r13
d6b3:	adc    $0x0,%rbx
d6b7:	mov    %rbx,0x10(%rsp)
d6bc:	mov    %r11,%r8
d6bf:	sub    (%rsi),%r11
d6c2:	mov    %r12,%r9
d6c5:	sbb    0x8(%rsi),%r12
d6c9:	mov    %r13,%r10
d6cc:	sbb    0x10(%rsi),%r13
d6d0:	sbb    $0x0,%rbx
d6d4:	cmovb  %r8,%r11
d6d8:	mov    %r11,(%rdi)
d6db:	cmovb  %r9,%r12
d6df:	mov    %r12,0x8(%rdi)
d6e3:	cmovb  %r10,%r13
d6e7:	mov    %r13,0x10(%rdi)
d6eb:	jmpq   e5ed <cpMontRedAdc_BNU.quit>
d6f0:	mov    (%rsi),%r8
d6f3:	mov    0x8(%rsi),%r9
d6f7:	mov    0x10(%rsi),%r10
d6fb:	mov    0x18(%rsi),%r11
d6ff:	mov    0x20(%rsi),%r12
d703:	mov    0x28(%rsi),%r13
d707:	mov    0x30(%rsi),%r14
d70b:	mov    0x38(%rsi),%rcx
d70f:	mov    %rdx,%rsi
d712:	mov    %r8,%rbp
d715:	imul   %r15,%rbp
d719:	mov    (%rsi),%rax
d71c:	mul    %rbp
d71f:	xor    %rbx,%rbx
d722:	add    %rax,%r8
d725:	mov    0x8(%rsi),%rax
d729:	adc    %rdx,%rbx
d72c:	mul    %rbp
d72f:	add    %rbx,%r9
d732:	adc    $0x0,%rdx
d736:	xor    %rbx,%rbx
d739:	add    %rax,%r9
d73c:	mov    0x10(%rsi),%rax
d740:	adc    %rdx,%rbx
d743:	mul    %rbp
d746:	add    %rbx,%r10
d749:	adc    $0x0,%rdx
d74d:	xor    %rbx,%rbx
d750:	add    %rax,%r10
d753:	mov    0x18(%rsi),%rax
d757:	adc    %rdx,%rbx
d75a:	mul    %rbp
d75d:	add    %rbx,%r11
d760:	adc    $0x0,%rdx
d764:	xor    %rbx,%rbx
d767:	add    %rax,%r11
d76a:	adc    %rdx,%r12
d76d:	adc    $0x0,%rbx
d771:	add    0x10(%rsp),%r12
d776:	adc    $0x0,%rbx
d77a:	mov    %rbx,0x10(%rsp)
d77f:	mov    %r9,%rbp
d782:	imul   %r15,%rbp
d786:	mov    (%rsi),%rax
d789:	mul    %rbp
d78c:	xor    %rbx,%rbx
d78f:	add    %rax,%r9
d792:	mov    0x8(%rsi),%rax
d796:	adc    %rdx,%rbx
d799:	mul    %rbp
d79c:	add    %rbx,%r10
d79f:	adc    $0x0,%rdx
d7a3:	xor    %rbx,%rbx
d7a6:	add    %rax,%r10
d7a9:	mov    0x10(%rsi),%rax
d7ad:	adc    %rdx,%rbx
d7b0:	mul    %rbp
d7b3:	add    %rbx,%r11
d7b6:	adc    $0x0,%rdx
d7ba:	xor    %rbx,%rbx
d7bd:	add    %rax,%r11
d7c0:	mov    0x18(%rsi),%rax
d7c4:	adc    %rdx,%rbx
d7c7:	mul    %rbp
d7ca:	add    %rbx,%r12
d7cd:	adc    $0x0,%rdx
d7d1:	xor    %rbx,%rbx
d7d4:	add    %rax,%r12
d7d7:	adc    %rdx,%r13
d7da:	adc    $0x0,%rbx
d7de:	add    0x10(%rsp),%r13
d7e3:	adc    $0x0,%rbx
d7e7:	mov    %rbx,0x10(%rsp)
d7ec:	mov    %r10,%rbp
d7ef:	imul   %r15,%rbp
d7f3:	mov    (%rsi),%rax
d7f6:	mul    %rbp
d7f9:	xor    %rbx,%rbx
d7fc:	add    %rax,%r10
d7ff:	mov    0x8(%rsi),%rax
d803:	adc    %rdx,%rbx
d806:	mul    %rbp
d809:	add    %rbx,%r11
d80c:	adc    $0x0,%rdx
d810:	xor    %rbx,%rbx
d813:	add    %rax,%r11
d816:	mov    0x10(%rsi),%rax
d81a:	adc    %rdx,%rbx
d81d:	mul    %rbp
d820:	add    %rbx,%r12
d823:	adc    $0x0,%rdx
d827:	xor    %rbx,%rbx
d82a:	add    %rax,%r12
d82d:	mov    0x18(%rsi),%rax
d831:	adc    %rdx,%rbx
d834:	mul    %rbp
d837:	add    %rbx,%r13
d83a:	adc    $0x0,%rdx
d83e:	xor    %rbx,%rbx
d841:	add    %rax,%r13
d844:	adc    %rdx,%r14
d847:	adc    $0x0,%rbx
d84b:	add    0x10(%rsp),%r14
d850:	adc    $0x0,%rbx
d854:	mov    %rbx,0x10(%rsp)
d859:	mov    %r11,%rbp
d85c:	imul   %r15,%rbp
d860:	mov    (%rsi),%rax
d863:	mul    %rbp
d866:	xor    %rbx,%rbx
d869:	add    %rax,%r11
d86c:	mov    0x8(%rsi),%rax
d870:	adc    %rdx,%rbx
d873:	mul    %rbp
d876:	add    %rbx,%r12
d879:	adc    $0x0,%rdx
d87d:	xor    %rbx,%rbx
d880:	add    %rax,%r12
d883:	mov    0x10(%rsi),%rax
d887:	adc    %rdx,%rbx
d88a:	mul    %rbp
d88d:	add    %rbx,%r13
d890:	adc    $0x0,%rdx
d894:	xor    %rbx,%rbx
d897:	add    %rax,%r13
d89a:	mov    0x18(%rsi),%rax
d89e:	adc    %rdx,%rbx
d8a1:	mul    %rbp
d8a4:	add    %rbx,%r14
d8a7:	adc    $0x0,%rdx
d8ab:	xor    %rbx,%rbx
d8ae:	add    %rax,%r14
d8b1:	adc    %rdx,%rcx
d8b4:	adc    $0x0,%rbx
d8b8:	add    0x10(%rsp),%rcx
d8bd:	adc    $0x0,%rbx
d8c1:	mov    %rbx,0x10(%rsp)
d8c6:	mov    %r12,%r8
d8c9:	sub    (%rsi),%r12
d8cc:	mov    %r13,%r9
d8cf:	sbb    0x8(%rsi),%r13
d8d3:	mov    %r14,%r10
d8d6:	sbb    0x10(%rsi),%r14
d8da:	mov    %rcx,%r11
d8dd:	sbb    0x18(%rsi),%rcx
d8e1:	sbb    $0x0,%rbx
d8e5:	cmovb  %r8,%r12
d8e9:	mov    %r12,(%rdi)
d8ec:	cmovb  %r9,%r13
d8f0:	mov    %r13,0x8(%rdi)
d8f4:	cmovb  %r10,%r14
d8f8:	mov    %r14,0x10(%rdi)
d8fc:	cmovb  %r11,%rcx
d900:	mov    %rcx,0x18(%rdi)
d904:	jmpq   e5ed <cpMontRedAdc_BNU.quit>
d909:	nopl   0x0(%rax)
d910:	lea    -0x20(%rdi,%rcx,8),%rdi
d915:	mov    %rdi,(%rsp)
d919:	mov    %rsi,%rdi
d91c:	mov    %rdx,%rsi
d91f:	lea    -0x20(%rdi,%rcx,8),%rdi
d924:	lea    -0x20(%rsi,%rcx,8),%rsi
d929:	mov    $0x4,%rbx
d930:	sub    %rcx,%rbx
d933:	mov    %rbx,0x18(%rsp)
d938:	mov    $0x3,%rdx
d93f:	and    %rcx,%rdx
d942:	test   $0x1,%rcx
d949:	je     db50 <cpMontRedAdc_BNU.even_len_Modulus>
d94f:	mov    (%rdi,%rbx,8),%r9
d953:	imul   %r15,%r9
d957:	mov    (%rsi,%rbx,8),%rax
d95b:	mul    %r9
d95e:	mov    %rax,%r11
d961:	mov    0x8(%rsi,%rbx,8),%rax
d966:	mov    %rdx,%r12
d969:	add    $0x1,%rbx
d96d:	je     d9e0 <cpMontRedAdc_BNU.skip_mlax1>
d96f:	nop
d970:	mul    %r9
d973:	xor    %r13,%r13
d976:	add    -0x8(%rdi,%rbx,8),%r11
d97b:	adc    %rax,%r12
d97e:	mov    0x8(%rsi,%rbx,8),%rax
d983:	adc    %rdx,%r13
d986:	mov    %r11,-0x8(%rdi,%rbx,8)
d98b:	mul    %r9
d98e:	xor    %r14,%r14
d991:	add    (%rdi,%rbx,8),%r12
d995:	adc    %rax,%r13
d998:	mov    0x10(%rsi,%rbx,8),%rax
d99d:	adc    %rdx,%r14
d9a0:	mov    %r12,(%rdi,%rbx,8)
d9a4:	mul    %r9
d9a7:	xor    %r11,%r11
d9aa:	add    0x8(%rdi,%rbx,8),%r13
d9af:	adc    %rax,%r14
d9b2:	mov    0x18(%rsi,%rbx,8),%rax
d9b7:	adc    %rdx,%r11
d9ba:	mov    %r13,0x8(%rdi,%rbx,8)
d9bf:	mul    %r9
d9c2:	xor    %r12,%r12
d9c5:	add    0x10(%rdi,%rbx,8),%r14
d9ca:	adc    %rax,%r11
d9cd:	mov    0x20(%rsi,%rbx,8),%rax
d9d2:	adc    %rdx,%r12
d9d5:	mov    %r14,0x10(%rdi,%rbx,8)
d9da:	add    $0x4,%rbx
d9de:	jae    d970 <..@76.L_1>
d9e0:	mul    %r9
d9e3:	xor    %r13,%r13
d9e6:	add    %r11,-0x8(%rdi,%rbx,8)
d9eb:	adc    %rax,%r12
d9ee:	adc    %rdx,%r13
d9f1:	cmp    $0x2,%rbx
d9f5:	ja     db15 <cpMontRedAdc_BNU.fin_mla1x4n_2>
d9fb:	je     dad1 <cpMontRedAdc_BNU.fin_mla1x4n_3>
da01:	jp     da75 <cpMontRedAdc_BNU.fin_mla1x4n_4>
da03:	mov    0x8(%rsi),%rax
da07:	mov    0x18(%rsp),%rbx
da0c:	mul    %r9
da0f:	xor    %r14,%r14
da12:	add    (%rdi),%r12
da15:	adc    %rax,%r13
da18:	mov    0x10(%rsi),%rax
da1c:	adc    %rdx,%r14
da1f:	mov    %r12,(%rdi)
da22:	mul    %r9
da25:	xor    %r11,%r11
da28:	add    0x8(%rdi),%r13
da2c:	adc    %rax,%r14
da2f:	mov    0x18(%rsi),%rax
da33:	adc    %rdx,%r11
da36:	mov    %r13,0x8(%rdi)
da3a:	mul    %r9
da3d:	add    0x10(%rdi),%r14
da41:	adc    %rax,%r11
da44:	adc    $0x0,%rdx
da48:	xor    %rax,%rax
da4b:	mov    %r14,0x10(%rdi)
da4f:	add    0x18(%rdi),%r11
da53:	adc    0x20(%rdi),%rdx
da57:	adc    $0x0,%rax
da5b:	mov    %r11,0x18(%rdi)
da5f:	mov    %rdx,0x20(%rdi)
da63:	mov    %rax,0x10(%rsp)
da68:	add    $0x8,%rdi
da6c:	sub    $0x1,%rcx
da70:	jmpq   e3c0 <cpMontRedAdc_BNU.mla2x4n_1>
da75:	mov    0x10(%rsi),%rax
da79:	mov    0x18(%rsp),%rbx
da7e:	mul    %r9
da81:	xor    %r11,%r14
da84:	add    0x8(%rdi),%r12
da88:	adc    %rax,%r13
da8b:	mov    0x18(%rsi),%rax
da8f:	adc    %rdx,%r14
da92:	mov    %r12,0x8(%rdi)
da96:	mul    %r9
da99:	add    0x10(%rdi),%r13
da9d:	adc    %rax,%r14
daa0:	adc    $0x0,%rdx
daa4:	xor    %rax,%rax
daa7:	mov    %r13,0x10(%rdi)
daab:	add    0x18(%rdi),%r14
daaf:	adc    0x20(%rdi),%rdx
dab3:	adc    $0x0,%rax
dab7:	mov    %r14,0x18(%rdi)
dabb:	mov    %rdx,0x20(%rdi)
dabf:	mov    %rax,0x10(%rsp)
dac4:	add    $0x8,%rdi
dac8:	sub    $0x1,%rcx
dacc:	jmpq   db70 <cpMontRedAdc_BNU.mla2x4n_4>
dad1:	mov    0x18(%rsi),%rax
dad5:	mov    0x18(%rsp),%rbx
dada:	mul    %r9
dadd:	add    0x10(%rdi),%r12
dae1:	adc    %rax,%r13
dae4:	adc    $0x0,%rdx
dae8:	xor    %rax,%rax
daeb:	mov    %r12,0x10(%rdi)
daef:	add    0x18(%rdi),%r13
daf3:	adc    0x20(%rdi),%rdx
daf7:	adc    $0x0,%rax
dafb:	mov    %r13,0x18(%rdi)
daff:	mov    %rdx,0x20(%rdi)
db03:	mov    %rax,0x10(%rsp)
db08:	add    $0x8,%rdi
db0c:	sub    $0x1,%rcx
db10:	jmpq   de70 <cpMontRedAdc_BNU.mla2x4n_3>
db15:	mov    0x18(%rsp),%rbx
db1a:	xor    %rax,%rax
db1d:	add    0x18(%rdi),%r12
db21:	adc    0x20(%rdi),%r13
db25:	adc    $0x0,%rax
db29:	mov    %r12,0x18(%rdi)
db2d:	mov    %r13,0x20(%rdi)
db31:	mov    %rax,0x10(%rsp)
db36:	add    $0x8,%rdi
db3a:	sub    $0x1,%rcx
db3e:	jmpq   e140 <cpMontRedAdc_BNU.mla2x4n_2>
db43:	nopl   0x0(%rax,%rax,1)
db4b:	nopl   0x0(%rax,%rax,1)
db50:	xor    %rax,%rax
db53:	cmp    $0x2,%rdx
db57:	ja     e3c0 <cpMontRedAdc_BNU.mla2x4n_1>
db5d:	je     e140 <cpMontRedAdc_BNU.mla2x4n_2>
db63:	jp     de70 <cpMontRedAdc_BNU.mla2x4n_3>
db69:	nopl   0x0(%rax)
db70:	mov    (%rdi,%rbx,8),%r9
db74:	imul   %r15,%r9
db78:	mov    (%rsi,%rbx,8),%rax
db7c:	mul    %r9
db7f:	mov    0x8(%rsi,%rbx,8),%r10
db84:	imul   %r9,%r10
db88:	mov    %rax,%r11
db8b:	mov    %rdx,%r12
db8e:	add    (%rdi,%rbx,8),%rax
db92:	adc    0x8(%rdi,%rbx,8),%rdx
db97:	add    %rdx,%r10
db9a:	imul   %r15,%r10
db9e:	mov    (%rsi,%rbx,8),%rax
dba2:	xor    %r13,%r13
dba5:	nopl   0x0(%rax,%rax,1)
dbad:	nopl   (%rax)
dbb0:	mul    %r10
dbb3:	xor    %r14,%r14
dbb6:	add    %rax,%r12
dbb9:	mov    0x8(%rsi,%rbx,8),%rax
dbbe:	adc    %rdx,%r13
dbc1:	mul    %r9
dbc4:	add    (%rdi,%rbx,8),%r11
dbc8:	adc    %rax,%r12
dbcb:	mov    0x8(%rsi,%rbx,8),%rax
dbd0:	adc    %rdx,%r13
dbd3:	mov    %r11,(%rdi,%rbx,8)
dbd7:	adc    $0x0,%r14
dbdb:	mul    %r10
dbde:	xor    %r11,%r11
dbe1:	add    %rax,%r13
dbe4:	mov    0x10(%rsi,%rbx,8),%rax
dbe9:	adc    %rdx,%r14
dbec:	mul    %r9
dbef:	add    0x8(%rdi,%rbx,8),%r12
dbf4:	adc    %rax,%r13
dbf7:	mov    0x10(%rsi,%rbx,8),%rax
dbfc:	adc    %rdx,%r14
dbff:	mov    %r12,0x8(%rdi,%rbx,8)
dc04:	adc    $0x0,%r11
dc08:	mul    %r10
dc0b:	xor    %r12,%r12
dc0e:	add    %rax,%r14
dc11:	mov    0x18(%rsi,%rbx,8),%rax
dc16:	adc    %rdx,%r11
dc19:	mul    %r9
dc1c:	add    0x10(%rdi,%rbx,8),%r13
dc21:	adc    %rax,%r14
dc24:	mov    0x18(%rsi,%rbx,8),%rax
dc29:	adc    %rdx,%r11
dc2c:	mov    %r13,0x10(%rdi,%rbx,8)
dc31:	adc    $0x0,%r12
dc35:	mul    %r10
dc38:	xor    %r13,%r13
dc3b:	add    %rax,%r11
dc3e:	mov    0x20(%rsi,%rbx,8),%rax
dc43:	adc    %rdx,%r12
dc46:	mul    %r9
dc49:	add    0x18(%rdi,%rbx,8),%r14
dc4e:	adc    %rax,%r11
dc51:	mov    0x20(%rsi,%rbx,8),%rax
dc56:	adc    %rdx,%r12
dc59:	mov    %r14,0x18(%rdi,%rbx,8)
dc5e:	adc    $0x0,%r13
dc62:	add    $0x4,%rbx
dc66:	jae    dbb0 <..@91.L_1>
dc6c:	mul    %r10
dc6f:	xor    %r14,%r14
dc72:	add    %rax,%r12
dc75:	mov    0x8(%rsi),%rax
dc79:	adc    %rdx,%r13
dc7c:	mul    %r9
dc7f:	add    (%rdi),%r11
dc82:	adc    %rax,%r12
dc85:	mov    0x8(%rsi),%rax
dc89:	adc    %rdx,%r13
dc8c:	mov    %r11,(%rdi)
dc8f:	adc    $0x0,%r14
dc93:	mul    %r10
dc96:	xor    %r11,%r11
dc99:	add    %rax,%r13
dc9c:	mov    0x10(%rsi),%rax
dca0:	adc    %rdx,%r14
dca3:	mul    %r9
dca6:	add    0x8(%rdi),%r12
dcaa:	adc    %rax,%r13
dcad:	mov    0x10(%rsi),%rax
dcb1:	adc    %rdx,%r14
dcb4:	mov    %r12,0x8(%rdi)
dcb8:	adc    $0x0,%r11
dcbc:	mul    %r10
dcbf:	xor    %r12,%r12
dcc2:	add    %rax,%r14
dcc5:	mov    0x18(%rsi),%rax
dcc9:	adc    %rdx,%r11
dccc:	mul    %r9
dccf:	add    0x10(%rdi),%r13
dcd3:	adc    %rax,%r14
dcd6:	mov    0x18(%rsi),%rax
dcda:	adc    %rdx,%r11
dcdd:	mov    %r13,0x10(%rdi)
dce1:	adc    $0x0,%r12
dce5:	mul    %r10
dce8:	mov    0x18(%rsp),%rbx
dced:	add    0x18(%rdi),%r14
dcf1:	adc    %rax,%r11
dcf4:	mov    %r14,0x18(%rdi)
dcf8:	adc    %rdx,%r12
dcfb:	xor    %rax,%rax
dcfe:	add    0x20(%rdi),%r11
dd02:	adc    0x28(%rdi),%r12
dd06:	adc    $0x0,%rax
dd0a:	add    0x10(%rsp),%r11
dd0f:	adc    $0x0,%r12
dd13:	adc    $0x0,%rax
dd17:	mov    %r11,0x20(%rdi)
dd1b:	mov    %r12,0x28(%rdi)
dd1f:	mov    %rax,0x10(%rsp)
dd24:	add    $0x10,%rdi
dd28:	sub    $0x2,%rcx
dd2c:	jne    db70 <cpMontRedAdc_BNU.mla2x4n_4>
dd32:	mov    (%rsp),%rdx
dd36:	xor    %rcx,%rcx
dd39:	nopl   0x0(%rax)
dd40:	add    %rcx,%rcx
dd43:	mov    (%rdi,%rbx,8),%r11
dd47:	sbb    (%rsi,%rbx,8),%r11
dd4b:	mov    %r11,(%rdx,%rbx,8)
dd4f:	mov    0x8(%rdi,%rbx,8),%r12
dd54:	sbb    0x8(%rsi,%rbx,8),%r12
dd59:	mov    %r12,0x8(%rdx,%rbx,8)
dd5e:	mov    0x10(%rdi,%rbx,8),%r13
dd63:	sbb    0x10(%rsi,%rbx,8),%r13
dd68:	mov    %r13,0x10(%rdx,%rbx,8)
dd6d:	mov    0x18(%rdi,%rbx,8),%r14
dd72:	sbb    0x18(%rsi,%rbx,8),%r14
dd77:	mov    %r14,0x18(%rdx,%rbx,8)
dd7c:	sbb    %rcx,%rcx
dd7f:	add    $0x4,%rbx
dd83:	jae    dd40 <..@96.L_1>
dd85:	add    %rcx,%rcx
dd88:	mov    0x18(%rsp),%rbx
dd8d:	mov    (%rdi),%r11
dd90:	sbb    (%rsi),%r11
dd93:	mov    %r11,(%rdx)
dd96:	mov    0x8(%rdi),%r12
dd9a:	sbb    0x8(%rsi),%r12
dd9e:	mov    %r12,0x8(%rdx)
dda2:	mov    0x10(%rdi),%r13
dda6:	sbb    0x10(%rsi),%r13
ddaa:	mov    %r13,0x10(%rdx)
ddae:	mov    0x18(%rdi),%r14
ddb2:	sbb    0x18(%rsi),%r14
ddb6:	mov    %r14,0x18(%rdx)
ddba:	sbb    $0x0,%rax
ddbe:	sbb    %rcx,%rcx
ddc1:	mov    %rcx,%r14
ddc4:	nopl   0x0(%rax,%rax,1)
ddcc:	nopl   0x0(%rax)
ddd0:	add    %r14,%r14
ddd3:	mov    (%rdx,%rbx,8),%r11
ddd7:	mov    (%rdi,%rbx,8),%r12
dddb:	mov    0x8(%rdx,%rbx,8),%r13
dde0:	mov    0x8(%rdi,%rbx,8),%r14
dde5:	cmovb  %r12,%r11
dde9:	mov    %r11,(%rdx,%rbx,8)
dded:	cmovb  %r14,%r13
ddf1:	mov    %r13,0x8(%rdx,%rbx,8)
ddf6:	mov    0x10(%rdx,%rbx,8),%r11
ddfb:	mov    0x10(%rdi,%rbx,8),%r12
de00:	mov    0x18(%rdx,%rbx,8),%r13
de05:	mov    0x18(%rdi,%rbx,8),%r14
de0a:	cmovb  %r12,%r11
de0e:	mov    %r11,0x10(%rdx,%rbx,8)
de13:	cmovb  %r14,%r13
de17:	mov    %r13,0x18(%rdx,%rbx,8)
de1c:	mov    %rcx,%r14
de1f:	add    $0x4,%rbx
de23:	jae    ddd0 <..@101.L_1>
de25:	add    %rcx,%rcx
de28:	mov    0x18(%rsp),%rbx
de2d:	mov    (%rdx),%r11
de30:	mov    (%rdi),%r12
de33:	cmovb  %r12,%r11
de37:	mov    %r11,(%rdx)
de3a:	mov    0x8(%rdx),%r13
de3e:	mov    0x8(%rdi),%r14
de42:	cmovb  %r14,%r13
de46:	mov    %r13,0x8(%rdx)
de4a:	mov    0x10(%rdx),%r11
de4e:	mov    0x10(%rdi),%r12
de52:	cmovb  %r12,%r11
de56:	mov    %r11,0x10(%rdx)
de5a:	mov    0x18(%rdx),%r13
de5e:	mov    0x18(%rdi),%r14
de62:	cmovb  %r14,%r13
de66:	mov    %r13,0x18(%rdx)
de6a:	jmpq   e5ed <cpMontRedAdc_BNU.quit>
de6f:	nop
de70:	mov    (%rdi,%rbx,8),%r9
de74:	imul   %r15,%r9
de78:	mov    (%rsi,%rbx,8),%rax
de7c:	mul    %r9
de7f:	mov    0x8(%rsi,%rbx,8),%r10
de84:	imul   %r9,%r10
de88:	mov    %rax,%r11
de8b:	mov    %rdx,%r12
de8e:	add    (%rdi,%rbx,8),%rax
de92:	adc    0x8(%rdi,%rbx,8),%rdx
de97:	add    %rdx,%r10
de9a:	imul   %r15,%r10
de9e:	mov    (%rsi,%rbx,8),%rax
dea2:	xor    %r13,%r13
dea5:	nopl   0x0(%rax,%rax,1)
dead:	nopl   (%rax)
deb0:	mul    %r10
deb3:	xor    %r14,%r14
deb6:	add    %rax,%r12
deb9:	mov    0x8(%rsi,%rbx,8),%rax
debe:	adc    %rdx,%r13
dec1:	mul    %r9
dec4:	add    (%rdi,%rbx,8),%r11
dec8:	adc    %rax,%r12
decb:	mov    0x8(%rsi,%rbx,8),%rax
ded0:	adc    %rdx,%r13
ded3:	mov    %r11,(%rdi,%rbx,8)
ded7:	adc    $0x0,%r14
dedb:	mul    %r10
dede:	xor    %r11,%r11
dee1:	add    %rax,%r13
dee4:	mov    0x10(%rsi,%rbx,8),%rax
dee9:	adc    %rdx,%r14
deec:	mul    %r9
deef:	add    0x8(%rdi,%rbx,8),%r12
def4:	adc    %rax,%r13
def7:	mov    0x10(%rsi,%rbx,8),%rax
defc:	adc    %rdx,%r14
deff:	mov    %r12,0x8(%rdi,%rbx,8)
df04:	adc    $0x0,%r11
df08:	mul    %r10
df0b:	xor    %r12,%r12
df0e:	add    %rax,%r14
df11:	mov    0x18(%rsi,%rbx,8),%rax
df16:	adc    %rdx,%r11
df19:	mul    %r9
df1c:	add    0x10(%rdi,%rbx,8),%r13
df21:	adc    %rax,%r14
df24:	mov    0x18(%rsi,%rbx,8),%rax
df29:	adc    %rdx,%r11
df2c:	mov    %r13,0x10(%rdi,%rbx,8)
df31:	adc    $0x0,%r12
df35:	mul    %r10
df38:	xor    %r13,%r13
df3b:	add    %rax,%r11
df3e:	mov    0x20(%rsi,%rbx,8),%rax
df43:	adc    %rdx,%r12
df46:	mul    %r9
df49:	add    0x18(%rdi,%rbx,8),%r14
df4e:	adc    %rax,%r11
df51:	mov    0x20(%rsi,%rbx,8),%rax
df56:	adc    %rdx,%r12
df59:	mov    %r14,0x18(%rdi,%rbx,8)
df5e:	adc    $0x0,%r13
df62:	add    $0x4,%rbx
df66:	jae    deb0 <..@110.L_1>
df6c:	mul    %r10
df6f:	xor    %r14,%r14
df72:	add    %rax,%r12
df75:	mov    0x10(%rsi),%rax
df79:	adc    %rdx,%r13
df7c:	mul    %r9
df7f:	add    0x8(%rdi),%r11
df83:	adc    %rax,%r12
df86:	mov    0x10(%rsi),%rax
df8a:	adc    %rdx,%r13
df8d:	mov    %r11,0x8(%rdi)
df91:	adc    $0x0,%r14
df95:	mul    %r10
df98:	xor    %r11,%r11
df9b:	add    %rax,%r13
df9e:	mov    0x18(%rsi),%rax
dfa2:	adc    %rdx,%r14
dfa5:	mul    %r9
dfa8:	add    0x10(%rdi),%r12
dfac:	adc    %rax,%r13
dfaf:	mov    0x18(%rsi),%rax
dfb3:	adc    %rdx,%r14
dfb6:	mov    %r12,0x10(%rdi)
dfba:	adc    $0x0,%r11
dfbe:	mul    %r10
dfc1:	mov    0x18(%rsp),%rbx
dfc6:	add    0x18(%rdi),%r13
dfca:	adc    %rax,%r14
dfcd:	mov    %r13,0x18(%rdi)
dfd1:	adc    %rdx,%r11
dfd4:	xor    %rax,%rax
dfd7:	add    0x20(%rdi),%r14
dfdb:	adc    0x28(%rdi),%r11
dfdf:	adc    $0x0,%rax
dfe3:	add    0x10(%rsp),%r14
dfe8:	adc    $0x0,%r11
dfec:	adc    $0x0,%rax
dff0:	mov    %r14,0x20(%rdi)
dff4:	mov    %r11,0x28(%rdi)
dff8:	mov    %rax,0x10(%rsp)
dffd:	add    $0x10,%rdi
e001:	sub    $0x2,%rcx
e005:	jne    de70 <cpMontRedAdc_BNU.mla2x4n_3>
e00b:	mov    (%rsp),%rdx
e00f:	xor    %rcx,%rcx
e012:	nopl   0x0(%rax,%rax,1)
e01a:	nopw   0x0(%rax,%rax,1)
e020:	add    %rcx,%rcx
e023:	mov    (%rdi,%rbx,8),%r11
e027:	sbb    (%rsi,%rbx,8),%r11
e02b:	mov    %r11,(%rdx,%rbx,8)
e02f:	mov    0x8(%rdi,%rbx,8),%r12
e034:	sbb    0x8(%rsi,%rbx,8),%r12
e039:	mov    %r12,0x8(%rdx,%rbx,8)
e03e:	mov    0x10(%rdi,%rbx,8),%r13
e043:	sbb    0x10(%rsi,%rbx,8),%r13
e048:	mov    %r13,0x10(%rdx,%rbx,8)
e04d:	mov    0x18(%rdi,%rbx,8),%r14
e052:	sbb    0x18(%rsi,%rbx,8),%r14
e057:	mov    %r14,0x18(%rdx,%rbx,8)
e05c:	sbb    %rcx,%rcx
e05f:	add    $0x4,%rbx
e063:	jae    e020 <..@115.L_1>
e065:	add    %rcx,%rcx
e068:	mov    0x18(%rsp),%rbx
e06d:	mov    0x8(%rdi),%r12
e071:	sbb    0x8(%rsi),%r12
e075:	mov    %r12,0x8(%rdx)
e079:	mov    0x10(%rdi),%r13
e07d:	sbb    0x10(%rsi),%r13
e081:	mov    %r13,0x10(%rdx)
e085:	mov    0x18(%rdi),%r14
e089:	sbb    0x18(%rsi),%r14
e08d:	mov    %r14,0x18(%rdx)
e091:	sbb    $0x0,%rax
e095:	sbb    %rcx,%rcx
e098:	mov    %rcx,%r14
e09b:	nopl   0x0(%rax,%rax,1)
e0a0:	add    %r14,%r14
e0a3:	mov    (%rdx,%rbx,8),%r11
e0a7:	mov    (%rdi,%rbx,8),%r12
e0ab:	mov    0x8(%rdx,%rbx,8),%r13
e0b0:	mov    0x8(%rdi,%rbx,8),%r14
e0b5:	cmovb  %r12,%r11
e0b9:	mov    %r11,(%rdx,%rbx,8)
e0bd:	cmovb  %r14,%r13
e0c1:	mov    %r13,0x8(%rdx,%rbx,8)
e0c6:	mov    0x10(%rdx,%rbx,8),%r11
e0cb:	mov    0x10(%rdi,%rbx,8),%r12
e0d0:	mov    0x18(%rdx,%rbx,8),%r13
e0d5:	mov    0x18(%rdi,%rbx,8),%r14
e0da:	cmovb  %r12,%r11
e0de:	mov    %r11,0x10(%rdx,%rbx,8)
e0e3:	cmovb  %r14,%r13
e0e7:	mov    %r13,0x18(%rdx,%rbx,8)
e0ec:	mov    %rcx,%r14
e0ef:	add    $0x4,%rbx
e0f3:	jae    e0a0 <..@120.L_1>
e0f5:	add    %rcx,%rcx
e0f8:	mov    0x18(%rsp),%rbx
e0fd:	mov    0x8(%rdx),%r13
e101:	mov    0x8(%rdi),%r14
e105:	cmovb  %r14,%r13
e109:	mov    %r13,0x8(%rdx)
e10d:	mov    0x10(%rdx),%r11
e111:	mov    0x10(%rdi),%r12
e115:	cmovb  %r12,%r11
e119:	mov    %r11,0x10(%rdx)
e11d:	mov    0x18(%rdx),%r13
e121:	mov    0x18(%rdi),%r14
e125:	cmovb  %r14,%r13
e129:	mov    %r13,0x18(%rdx)
e12d:	jmpq   e5ed <cpMontRedAdc_BNU.quit>
e132:	nopl   0x0(%rax,%rax,1)
e13a:	nopw   0x0(%rax,%rax,1)
e140:	mov    (%rdi,%rbx,8),%r9
e144:	imul   %r15,%r9
e148:	mov    (%rsi,%rbx,8),%rax
e14c:	mul    %r9
e14f:	mov    0x8(%rsi,%rbx,8),%r10
e154:	imul   %r9,%r10
e158:	mov    %rax,%r11
e15b:	mov    %rdx,%r12
e15e:	add    (%rdi,%rbx,8),%rax
e162:	adc    0x8(%rdi,%rbx,8),%rdx
e167:	add    %rdx,%r10
e16a:	imul   %r15,%r10
e16e:	mov    (%rsi,%rbx,8),%rax
e172:	xor    %r13,%r13
e175:	nopl   0x0(%rax,%rax,1)
e17d:	nopl   (%rax)
e180:	mul    %r10
e183:	xor    %r14,%r14
e186:	add    %rax,%r12
e189:	mov    0x8(%rsi,%rbx,8),%rax
e18e:	adc    %rdx,%r13
e191:	mul    %r9
e194:	add    (%rdi,%rbx,8),%r11
e198:	adc    %rax,%r12
e19b:	mov    0x8(%rsi,%rbx,8),%rax
e1a0:	adc    %rdx,%r13
e1a3:	mov    %r11,(%rdi,%rbx,8)
e1a7:	adc    $0x0,%r14
e1ab:	mul    %r10
e1ae:	xor    %r11,%r11
e1b1:	add    %rax,%r13
e1b4:	mov    0x10(%rsi,%rbx,8),%rax
e1b9:	adc    %rdx,%r14
e1bc:	mul    %r9
e1bf:	add    0x8(%rdi,%rbx,8),%r12
e1c4:	adc    %rax,%r13
e1c7:	mov    0x10(%rsi,%rbx,8),%rax
e1cc:	adc    %rdx,%r14
e1cf:	mov    %r12,0x8(%rdi,%rbx,8)
e1d4:	adc    $0x0,%r11
e1d8:	mul    %r10
e1db:	xor    %r12,%r12
e1de:	add    %rax,%r14
e1e1:	mov    0x18(%rsi,%rbx,8),%rax
e1e6:	adc    %rdx,%r11
e1e9:	mul    %r9
e1ec:	add    0x10(%rdi,%rbx,8),%r13
e1f1:	adc    %rax,%r14
e1f4:	mov    0x18(%rsi,%rbx,8),%rax
e1f9:	adc    %rdx,%r11
e1fc:	mov    %r13,0x10(%rdi,%rbx,8)
e201:	adc    $0x0,%r12
e205:	mul    %r10
e208:	xor    %r13,%r13
e20b:	add    %rax,%r11
e20e:	mov    0x20(%rsi,%rbx,8),%rax
e213:	adc    %rdx,%r12
e216:	mul    %r9
e219:	add    0x18(%rdi,%rbx,8),%r14
e21e:	adc    %rax,%r11
e221:	mov    0x20(%rsi,%rbx,8),%rax
e226:	adc    %rdx,%r12
e229:	mov    %r14,0x18(%rdi,%rbx,8)
e22e:	adc    $0x0,%r13
e232:	add    $0x4,%rbx
e236:	jae    e180 <..@129.L_1>
e23c:	mul    %r10
e23f:	xor    %r14,%r14
e242:	add    %rax,%r12
e245:	mov    0x18(%rsi),%rax
e249:	adc    %rdx,%r13
e24c:	mul    %r9
e24f:	add    0x10(%rdi),%r11
e253:	adc    %rax,%r12
e256:	mov    0x18(%rsi),%rax
e25a:	adc    %rdx,%r13
e25d:	mov    %r11,0x10(%rdi)
e261:	adc    $0x0,%r14
e265:	mul    %r10
e268:	mov    0x18(%rsp),%rbx
e26d:	add    0x18(%rdi),%r12
e271:	adc    %rax,%r13
e274:	mov    %r12,0x18(%rdi)
e278:	adc    %rdx,%r14
e27b:	xor    %rax,%rax
e27e:	add    0x20(%rdi),%r13
e282:	adc    0x28(%rdi),%r14
e286:	adc    $0x0,%rax
e28a:	add    0x10(%rsp),%r13
e28f:	adc    $0x0,%r14
e293:	adc    $0x0,%rax
e297:	mov    %r13,0x20(%rdi)
e29b:	mov    %r14,0x28(%rdi)
e29f:	mov    %rax,0x10(%rsp)
e2a4:	add    $0x10,%rdi
e2a8:	sub    $0x2,%rcx
e2ac:	jne    e140 <cpMontRedAdc_BNU.mla2x4n_2>
e2b2:	mov    (%rsp),%rdx
e2b6:	xor    %rcx,%rcx
e2b9:	nopl   0x0(%rax)
e2c0:	add    %rcx,%rcx
e2c3:	mov    (%rdi,%rbx,8),%r11
e2c7:	sbb    (%rsi,%rbx,8),%r11
e2cb:	mov    %r11,(%rdx,%rbx,8)
e2cf:	mov    0x8(%rdi,%rbx,8),%r12
e2d4:	sbb    0x8(%rsi,%rbx,8),%r12
e2d9:	mov    %r12,0x8(%rdx,%rbx,8)
e2de:	mov    0x10(%rdi,%rbx,8),%r13
e2e3:	sbb    0x10(%rsi,%rbx,8),%r13
e2e8:	mov    %r13,0x10(%rdx,%rbx,8)
e2ed:	mov    0x18(%rdi,%rbx,8),%r14
e2f2:	sbb    0x18(%rsi,%rbx,8),%r14
e2f7:	mov    %r14,0x18(%rdx,%rbx,8)
e2fc:	sbb    %rcx,%rcx
e2ff:	add    $0x4,%rbx
e303:	jae    e2c0 <..@134.L_1>
e305:	add    %rcx,%rcx
e308:	mov    0x18(%rsp),%rbx
e30d:	mov    0x10(%rdi),%r13
e311:	sbb    0x10(%rsi),%r13
e315:	mov    %r13,0x10(%rdx)
e319:	mov    0x18(%rdi),%r14
e31d:	sbb    0x18(%rsi),%r14
e321:	mov    %r14,0x18(%rdx)
e325:	sbb    $0x0,%rax
e329:	sbb    %rcx,%rcx
e32c:	mov    %rcx,%r14
e32f:	nop
e330:	add    %r14,%r14
e333:	mov    (%rdx,%rbx,8),%r11
e337:	mov    (%rdi,%rbx,8),%r12
e33b:	mov    0x8(%rdx,%rbx,8),%r13
e340:	mov    0x8(%rdi,%rbx,8),%r14
e345:	cmovb  %r12,%r11
e349:	mov    %r11,(%rdx,%rbx,8)
e34d:	cmovb  %r14,%r13
e351:	mov    %r13,0x8(%rdx,%rbx,8)
e356:	mov    0x10(%rdx,%rbx,8),%r11
e35b:	mov    0x10(%rdi,%rbx,8),%r12
e360:	mov    0x18(%rdx,%rbx,8),%r13
e365:	mov    0x18(%rdi,%rbx,8),%r14
e36a:	cmovb  %r12,%r11
e36e:	mov    %r11,0x10(%rdx,%rbx,8)
e373:	cmovb  %r14,%r13
e377:	mov    %r13,0x18(%rdx,%rbx,8)
e37c:	mov    %rcx,%r14
e37f:	add    $0x4,%rbx
e383:	jae    e330 <..@139.L_1>
e385:	add    %rcx,%rcx
e388:	mov    0x18(%rsp),%rbx
e38d:	mov    0x10(%rdx),%r11
e391:	mov    0x10(%rdi),%r12
e395:	cmovb  %r12,%r11
e399:	mov    %r11,0x10(%rdx)
e39d:	mov    0x18(%rdx),%r13
e3a1:	mov    0x18(%rdi),%r14
e3a5:	cmovb  %r14,%r13
e3a9:	mov    %r13,0x18(%rdx)
e3ad:	jmpq   e5ed <cpMontRedAdc_BNU.quit>
e3b2:	nopl   0x0(%rax,%rax,1)
e3ba:	nopw   0x0(%rax,%rax,1)
e3c0:	mov    (%rdi,%rbx,8),%r9
e3c4:	imul   %r15,%r9
e3c8:	mov    (%rsi,%rbx,8),%rax
e3cc:	mul    %r9
e3cf:	mov    0x8(%rsi,%rbx,8),%r10
e3d4:	imul   %r9,%r10
e3d8:	mov    %rax,%r11
e3db:	mov    %rdx,%r12
e3de:	add    (%rdi,%rbx,8),%rax
e3e2:	adc    0x8(%rdi,%rbx,8),%rdx
e3e7:	add    %rdx,%r10
e3ea:	imul   %r15,%r10
e3ee:	mov    (%rsi,%rbx,8),%rax
e3f2:	xor    %r13,%r13
e3f5:	nopl   0x0(%rax,%rax,1)
e3fd:	nopl   (%rax)
e400:	mul    %r10
e403:	xor    %r14,%r14
e406:	add    %rax,%r12
e409:	mov    0x8(%rsi,%rbx,8),%rax
e40e:	adc    %rdx,%r13
e411:	mul    %r9
e414:	add    (%rdi,%rbx,8),%r11
e418:	adc    %rax,%r12
e41b:	mov    0x8(%rsi,%rbx,8),%rax
e420:	adc    %rdx,%r13
e423:	mov    %r11,(%rdi,%rbx,8)
e427:	adc    $0x0,%r14
e42b:	mul    %r10
e42e:	xor    %r11,%r11
e431:	add    %rax,%r13
e434:	mov    0x10(%rsi,%rbx,8),%rax
e439:	adc    %rdx,%r14
e43c:	mul    %r9
e43f:	add    0x8(%rdi,%rbx,8),%r12
e444:	adc    %rax,%r13
e447:	mov    0x10(%rsi,%rbx,8),%rax
e44c:	adc    %rdx,%r14
e44f:	mov    %r12,0x8(%rdi,%rbx,8)
e454:	adc    $0x0,%r11
e458:	mul    %r10
e45b:	xor    %r12,%r12
e45e:	add    %rax,%r14
e461:	mov    0x18(%rsi,%rbx,8),%rax
e466:	adc    %rdx,%r11
e469:	mul    %r9
e46c:	add    0x10(%rdi,%rbx,8),%r13
e471:	adc    %rax,%r14
e474:	mov    0x18(%rsi,%rbx,8),%rax
e479:	adc    %rdx,%r11
e47c:	mov    %r13,0x10(%rdi,%rbx,8)
e481:	adc    $0x0,%r12
e485:	mul    %r10
e488:	xor    %r13,%r13
e48b:	add    %rax,%r11
e48e:	mov    0x20(%rsi,%rbx,8),%rax
e493:	adc    %rdx,%r12
e496:	mul    %r9
e499:	add    0x18(%rdi,%rbx,8),%r14
e49e:	adc    %rax,%r11
e4a1:	mov    0x20(%rsi,%rbx,8),%rax
e4a6:	adc    %rdx,%r12
e4a9:	mov    %r14,0x18(%rdi,%rbx,8)
e4ae:	adc    $0x0,%r13
e4b2:	add    $0x4,%rbx
e4b6:	jae    e400 <..@148.L_1>
e4bc:	mul    %r10
e4bf:	mov    0x18(%rsp),%rbx
e4c4:	add    0x18(%rdi),%r11
e4c8:	adc    %rax,%r12
e4cb:	mov    %r11,0x18(%rdi)
e4cf:	adc    %rdx,%r13
e4d2:	xor    %rax,%rax
e4d5:	add    0x20(%rdi),%r12
e4d9:	adc    0x28(%rdi),%r13
e4dd:	adc    $0x0,%rax
e4e1:	add    0x10(%rsp),%r12
e4e6:	adc    $0x0,%r13
e4ea:	adc    $0x0,%rax
e4ee:	mov    %r12,0x20(%rdi)
e4f2:	mov    %r13,0x28(%rdi)
e4f6:	mov    %rax,0x10(%rsp)
e4fb:	add    $0x10,%rdi
e4ff:	sub    $0x2,%rcx
e503:	jne    e3c0 <cpMontRedAdc_BNU.mla2x4n_1>
e509:	mov    (%rsp),%rdx
e50d:	xor    %rcx,%rcx
e510:	add    %rcx,%rcx
e513:	mov    (%rdi,%rbx,8),%r11
e517:	sbb    (%rsi,%rbx,8),%r11
e51b:	mov    %r11,(%rdx,%rbx,8)
e51f:	mov    0x8(%rdi,%rbx,8),%r12
e524:	sbb    0x8(%rsi,%rbx,8),%r12
e529:	mov    %r12,0x8(%rdx,%rbx,8)
e52e:	mov    0x10(%rdi,%rbx,8),%r13
e533:	sbb    0x10(%rsi,%rbx,8),%r13
e538:	mov    %r13,0x10(%rdx,%rbx,8)
e53d:	mov    0x18(%rdi,%rbx,8),%r14
e542:	sbb    0x18(%rsi,%rbx,8),%r14
e547:	mov    %r14,0x18(%rdx,%rbx,8)
e54c:	sbb    %rcx,%rcx
e54f:	add    $0x4,%rbx
e553:	jae    e510 <..@153.L_1>
e555:	add    %rcx,%rcx
e558:	mov    0x18(%rsp),%rbx
e55d:	mov    0x18(%rdi),%r14
e561:	sbb    0x18(%rsi),%r14
e565:	mov    %r14,0x18(%rdx)
e569:	sbb    $0x0,%rax
e56d:	sbb    %rcx,%rcx
e570:	mov    %rcx,%r14
e573:	nopl   0x0(%rax,%rax,1)
e57b:	nopl   0x0(%rax,%rax,1)
e580:	add    %r14,%r14
e583:	mov    (%rdx,%rbx,8),%r11
e587:	mov    (%rdi,%rbx,8),%r12
e58b:	mov    0x8(%rdx,%rbx,8),%r13
e590:	mov    0x8(%rdi,%rbx,8),%r14
e595:	cmovb  %r12,%r11
e599:	mov    %r11,(%rdx,%rbx,8)
e59d:	cmovb  %r14,%r13
e5a1:	mov    %r13,0x8(%rdx,%rbx,8)
e5a6:	mov    0x10(%rdx,%rbx,8),%r11
e5ab:	mov    0x10(%rdi,%rbx,8),%r12
e5b0:	mov    0x18(%rdx,%rbx,8),%r13
e5b5:	mov    0x18(%rdi,%rbx,8),%r14
e5ba:	cmovb  %r12,%r11
e5be:	mov    %r11,0x10(%rdx,%rbx,8)
e5c3:	cmovb  %r14,%r13
e5c7:	mov    %r13,0x18(%rdx,%rbx,8)
e5cc:	mov    %rcx,%r14
e5cf:	add    $0x4,%rbx
e5d3:	jae    e580 <..@158.L_1>
e5d5:	add    %rcx,%rcx
e5d8:	mov    0x18(%rsp),%rbx
e5dd:	mov    0x18(%rdx),%r13
e5e1:	mov    0x18(%rdi),%r14
e5e5:	cmovb  %r14,%r13
e5e9:	mov    %r13,0x18(%rdx)
e5ed:	add    $0x28,%rsp
e5f1:	pop    %r15
e5f3:	pop    %r14
e5f5:	pop    %r13
e5f7:	pop    %r12
e5f9:	pop    %rbp
e5fa:	pop    %rbx
e5fb:	retq   
